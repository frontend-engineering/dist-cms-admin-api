
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type AuditsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Audits"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    createdAt: Date
    /**
     * @schema.title 关联 id
     */
    auditId: number
    /**
     * @schema.title 审计类型(关联 schema)
     */
    auditType: string
    /**
     * @schema.title 用户 id
     */
    userId: string
    /**
     * @schema.title 用户名
     */
    username: string | null
    /**
     * @schema.title 动作(e.g. update)
     */
    action: string
    /**
     * @schema.title 变化
     */
    auditChanges: string
    /**
     * @schema.title 版本
     */
    version: number
  }, ExtArgs["result"]["audits"]>
  composites: {}
}

/**
 * Model Audits
 * @schema.display_name 审计日志
 */
export type Audits = runtime.Types.DefaultSelection<AuditsPayload>
export type SiteTemplatePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "SiteTemplate"
  objects: {
    /**
     * @schema.model_name Site
     */
    site: SitePayload<ExtArgs>[]
    /**
     * @schema.model_name SiteTemplateDataDef
     */
    siteTemplateDataDef: SiteTemplateDataDefPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    /**
     * @schema.title 模板名称
     */
    name: string
    /**
     * @schema.title 模板内容
     * @schema.column_type textarea
     */
    template: string
  }, ExtArgs["result"]["siteTemplate"]>
  composites: {}
}

/**
 * Model SiteTemplate
 * @schema.display_name 网站模板
 * @schema.display_column name
 */
export type SiteTemplate = runtime.Types.DefaultSelection<SiteTemplatePayload>
export type SiteTemplateDataDefPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "SiteTemplateDataDef"
  objects: {
    siteTemplate: SiteTemplatePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    /**
     * @schema.reference SiteTemplate
     * @schema.x-unique true
     */
    siteTemplateId: number
    /**
     * @schema.title 结构定义
     */
    defData: Prisma.JsonValue
  }, ExtArgs["result"]["siteTemplateDataDef"]>
  composites: {}
}

/**
 * Model SiteTemplateDataDef
 * @schema.display_name 模板数据定义
 * @schema.display_column siteTemplateId
 */
export type SiteTemplateDataDef = runtime.Types.DefaultSelection<SiteTemplateDataDefPayload>
export type CustomerPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Customer"
  objects: {
    /**
     * @schema.model_name Site
     */
    site: SitePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    /**
     * @schema.title 客户名称
     */
    name: string
    /**
     * @schema.title 客户扩展数据
     */
    extendData: Prisma.JsonValue | null
  }, ExtArgs["result"]["customer"]>
  composites: {}
}

/**
 * Model Customer
 * @schema.primary_key id
 * @schema.display_name 客户信息
 * @schema.display_column name
 * @schema.display_primary_key false
 * @schema.searchable_columns name
 */
export type Customer = runtime.Types.DefaultSelection<CustomerPayload>
export type SitePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Site"
  objects: {
    siteTemplate: SiteTemplatePayload<ExtArgs>
    customer: CustomerPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    /**
     * @schema.title 网站名称
     */
    name: string
    /**
     * @schema.title COS 地址
     */
    cosUrl: string
    /**
     * @schema.reference SiteTemplate
     */
    siteTemplateId: number
    /**
     * @schema.reference Customer
     */
    customerId: number
    /**
     * @schema.title Slot 数据
     */
    slotData: Prisma.JsonValue
  }, ExtArgs["result"]["site"]>
  composites: {}
}

/**
 * Model Site
 * @schema.primary_key id
 * @schema.display_name 网站
 * @schema.display_column name
 * @schema.display_primary_key false
 * @schema.searchable_columns name
 */
export type Site = runtime.Types.DefaultSelection<SitePayload>
export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    accounts: AccountPayload<ExtArgs>[]
    sessions: SessionPayload<ExtArgs>[]
    projects: ProjectUsersPayload<ExtArgs>[]
    links: LinkPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    createdAt: Date
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type AccountPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Account"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    refresh_token_expires_in: number | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }, ExtArgs["result"]["account"]>
  composites: {}
}

/**
 * Model Account
 * 
 */
export type Account = runtime.Types.DefaultSelection<AccountPayload>
export type SessionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Session"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    sessionToken: string
    userId: string
    expires: Date
  }, ExtArgs["result"]["session"]>
  composites: {}
}

/**
 * Model Session
 * 
 */
export type Session = runtime.Types.DefaultSelection<SessionPayload>
export type VerificationTokenPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "VerificationToken"
  objects: {}
  scalars: $Extensions.GetResult<{
    identifier: string
    token: string
    expires: Date
  }, ExtArgs["result"]["verificationToken"]>
  composites: {}
}

/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = runtime.Types.DefaultSelection<VerificationTokenPayload>
export type ProjectPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Project"
  objects: {
    users: ProjectUsersPayload<ExtArgs>[]
    invites: ProjectInvitePayload<ExtArgs>[]
    sentEmails: SentEmailPayload<ExtArgs>[]
    domains: DomainPayload<ExtArgs>[]
    links: LinkPayload<ExtArgs>[]
    tags: TagPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    slug: string
    logo: string | null
    password: string | null
    type: string
    usage: number
    usageLimit: number
    plan: string
    stripeId: string | null
    billingCycleStart: number | null
    region: string | null
    endpoint: string | null
    bucket: string | null
    useHost: string | null
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
  }, ExtArgs["result"]["project"]>
  composites: {}
}

/**
 * Model Project
 * 
 */
export type Project = runtime.Types.DefaultSelection<ProjectPayload>
export type ProjectInvitePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ProjectInvite"
  objects: {
    project: ProjectPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    email: string
    expires: Date
    projectId: string
    createdAt: Date
  }, ExtArgs["result"]["projectInvite"]>
  composites: {}
}

/**
 * Model ProjectInvite
 * 
 */
export type ProjectInvite = runtime.Types.DefaultSelection<ProjectInvitePayload>
export type ProjectUsersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ProjectUsers"
  objects: {
    user: UserPayload<ExtArgs>
    project: ProjectPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    role: Role
    createdAt: Date
    updatedAt: Date
    userId: string
    projectId: string
  }, ExtArgs["result"]["projectUsers"]>
  composites: {}
}

/**
 * Model ProjectUsers
 * 
 */
export type ProjectUsers = runtime.Types.DefaultSelection<ProjectUsersPayload>
export type SentEmailPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "SentEmail"
  objects: {
    project: ProjectPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    type: EmailType
    createdAt: Date
    projectId: string | null
  }, ExtArgs["result"]["sentEmail"]>
  composites: {}
}

/**
 * Model SentEmail
 * 
 */
export type SentEmail = runtime.Types.DefaultSelection<SentEmailPayload>
export type DomainPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Domain"
  objects: {
    project: ProjectPayload<ExtArgs> | null
    links: LinkPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    slug: string
    verified: boolean
    target: string | null
    type: string
    description: string | null
    projectId: string | null
    primary: boolean
    lastChecked: Date
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["domain"]>
  composites: {}
}

/**
 * Model Domain
 * 
 */
export type Domain = runtime.Types.DefaultSelection<DomainPayload>
export type LinkPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Link"
  objects: {
    user: UserPayload<ExtArgs> | null
    project: ProjectPayload<ExtArgs> | null
    projectDomain: DomainPayload<ExtArgs> | null
    tag: TagPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: string
    domain: string
    key: string
    url: string
    archived: boolean
    expiresAt: Date | null
    password: string | null
    proxy: boolean
    title: string | null
    description: string | null
    image: string | null
    utm_source: string | null
    utm_medium: string | null
    utm_campaign: string | null
    utm_term: string | null
    utm_content: string | null
    rewrite: boolean
    ios: string | null
    android: string | null
    userId: string | null
    projectId: string | null
    clicks: number
    publicStats: boolean
    createdAt: Date
    updatedAt: Date
    tagId: string | null
  }, ExtArgs["result"]["link"]>
  composites: {}
}

/**
 * Model Link
 * 
 */
export type Link = runtime.Types.DefaultSelection<LinkPayload>
export type TagPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Tag"
  objects: {
    project: ProjectPayload<ExtArgs>
    links: LinkPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    color: string
    createdAt: Date
    updatedAt: Date
    projectId: string
  }, ExtArgs["result"]["tag"]>
  composites: {}
}

/**
 * Model Tag
 * 
 */
export type Tag = runtime.Types.DefaultSelection<TagPayload>
export type jackson_indexPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "jackson_index"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: number
    key: string
    storeKey: string
  }, ExtArgs["result"]["jackson_index"]>
  composites: {}
}

/**
 * Model jackson_index
 * 
 */
export type jackson_index = runtime.Types.DefaultSelection<jackson_indexPayload>
export type jackson_storePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "jackson_store"
  objects: {}
  scalars: $Extensions.GetResult<{
    key: string
    value: string
    iv: string | null
    tag: string | null
    createdAt: Date
    modifiedAt: Date | null
  }, ExtArgs["result"]["jackson_store"]>
  composites: {}
}

/**
 * Model jackson_store
 * 
 */
export type jackson_store = runtime.Types.DefaultSelection<jackson_storePayload>
export type jackson_ttlPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "jackson_ttl"
  objects: {}
  scalars: $Extensions.GetResult<{
    key: string
    expiresAt: bigint
  }, ExtArgs["result"]["jackson_ttl"]>
  composites: {}
}

/**
 * Model jackson_ttl
 * 
 */
export type jackson_ttl = runtime.Types.DefaultSelection<jackson_ttlPayload>

/**
 * Enums
 */

export const Role: {
  owner: 'owner',
  member: 'member'
};

export type Role = (typeof Role)[keyof typeof Role]


export const EmailType: {
  firstDomainInvalidEmail: 'firstDomainInvalidEmail',
  secondDomainInvalidEmail: 'secondDomainInvalidEmail',
  firstUsageLimitEmail: 'firstUsageLimitEmail',
  secondUsageLimitEmail: 'secondUsageLimitEmail'
};

export type EmailType = (typeof EmailType)[keyof typeof EmailType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Audits
 * const audits = await prisma.audits.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Audits
   * const audits = await prisma.audits.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.audits`: Exposes CRUD operations for the **Audits** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Audits
    * const audits = await prisma.audits.findMany()
    * ```
    */
  get audits(): Prisma.AuditsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.siteTemplate`: Exposes CRUD operations for the **SiteTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SiteTemplates
    * const siteTemplates = await prisma.siteTemplate.findMany()
    * ```
    */
  get siteTemplate(): Prisma.SiteTemplateDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.siteTemplateDataDef`: Exposes CRUD operations for the **SiteTemplateDataDef** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SiteTemplateDataDefs
    * const siteTemplateDataDefs = await prisma.siteTemplateDataDef.findMany()
    * ```
    */
  get siteTemplateDataDef(): Prisma.SiteTemplateDataDefDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.site`: Exposes CRUD operations for the **Site** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sites
    * const sites = await prisma.site.findMany()
    * ```
    */
  get site(): Prisma.SiteDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.projectInvite`: Exposes CRUD operations for the **ProjectInvite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectInvites
    * const projectInvites = await prisma.projectInvite.findMany()
    * ```
    */
  get projectInvite(): Prisma.ProjectInviteDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.projectUsers`: Exposes CRUD operations for the **ProjectUsers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectUsers
    * const projectUsers = await prisma.projectUsers.findMany()
    * ```
    */
  get projectUsers(): Prisma.ProjectUsersDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.sentEmail`: Exposes CRUD operations for the **SentEmail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SentEmails
    * const sentEmails = await prisma.sentEmail.findMany()
    * ```
    */
  get sentEmail(): Prisma.SentEmailDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.domain`: Exposes CRUD operations for the **Domain** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Domains
    * const domains = await prisma.domain.findMany()
    * ```
    */
  get domain(): Prisma.DomainDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.link`: Exposes CRUD operations for the **Link** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Links
    * const links = await prisma.link.findMany()
    * ```
    */
  get link(): Prisma.LinkDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.jackson_index`: Exposes CRUD operations for the **jackson_index** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jackson_indices
    * const jackson_indices = await prisma.jackson_index.findMany()
    * ```
    */
  get jackson_index(): Prisma.jackson_indexDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.jackson_store`: Exposes CRUD operations for the **jackson_store** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jackson_stores
    * const jackson_stores = await prisma.jackson_store.findMany()
    * ```
    */
  get jackson_store(): Prisma.jackson_storeDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.jackson_ttl`: Exposes CRUD operations for the **jackson_ttl** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jackson_ttls
    * const jackson_ttls = await prisma.jackson_ttl.findMany()
    * ```
    */
  get jackson_ttl(): Prisma.jackson_ttlDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Audits: 'Audits',
    SiteTemplate: 'SiteTemplate',
    SiteTemplateDataDef: 'SiteTemplateDataDef',
    Customer: 'Customer',
    Site: 'Site',
    User: 'User',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    Project: 'Project',
    ProjectInvite: 'ProjectInvite',
    ProjectUsers: 'ProjectUsers',
    SentEmail: 'SentEmail',
    Domain: 'Domain',
    Link: 'Link',
    Tag: 'Tag',
    jackson_index: 'jackson_index',
    jackson_store: 'jackson_store',
    jackson_ttl: 'jackson_ttl'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'audits' | 'siteTemplate' | 'siteTemplateDataDef' | 'customer' | 'site' | 'user' | 'account' | 'session' | 'verificationToken' | 'project' | 'projectInvite' | 'projectUsers' | 'sentEmail' | 'domain' | 'link' | 'tag' | 'jackson_index' | 'jackson_store' | 'jackson_ttl'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Audits: {
        payload: AuditsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AuditsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditsPayload>
          }
          findFirst: {
            args: Prisma.AuditsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditsPayload>
          }
          findMany: {
            args: Prisma.AuditsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditsPayload>[]
          }
          create: {
            args: Prisma.AuditsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditsPayload>
          }
          createMany: {
            args: Prisma.AuditsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AuditsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditsPayload>
          }
          update: {
            args: Prisma.AuditsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditsPayload>
          }
          deleteMany: {
            args: Prisma.AuditsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AuditsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AuditsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditsPayload>
          }
          aggregate: {
            args: Prisma.AuditsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAudits>
          }
          groupBy: {
            args: Prisma.AuditsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuditsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditsCountArgs<ExtArgs>,
            result: $Utils.Optional<AuditsCountAggregateOutputType> | number
          }
        }
      }
      SiteTemplate: {
        payload: SiteTemplatePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SiteTemplateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SiteTemplateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplatePayload>
          }
          findFirst: {
            args: Prisma.SiteTemplateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SiteTemplateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplatePayload>
          }
          findMany: {
            args: Prisma.SiteTemplateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplatePayload>[]
          }
          create: {
            args: Prisma.SiteTemplateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplatePayload>
          }
          createMany: {
            args: Prisma.SiteTemplateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SiteTemplateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplatePayload>
          }
          update: {
            args: Prisma.SiteTemplateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplatePayload>
          }
          deleteMany: {
            args: Prisma.SiteTemplateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SiteTemplateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SiteTemplateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplatePayload>
          }
          aggregate: {
            args: Prisma.SiteTemplateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSiteTemplate>
          }
          groupBy: {
            args: Prisma.SiteTemplateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SiteTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.SiteTemplateCountArgs<ExtArgs>,
            result: $Utils.Optional<SiteTemplateCountAggregateOutputType> | number
          }
        }
      }
      SiteTemplateDataDef: {
        payload: SiteTemplateDataDefPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SiteTemplateDataDefFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplateDataDefPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SiteTemplateDataDefFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplateDataDefPayload>
          }
          findFirst: {
            args: Prisma.SiteTemplateDataDefFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplateDataDefPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SiteTemplateDataDefFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplateDataDefPayload>
          }
          findMany: {
            args: Prisma.SiteTemplateDataDefFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplateDataDefPayload>[]
          }
          create: {
            args: Prisma.SiteTemplateDataDefCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplateDataDefPayload>
          }
          createMany: {
            args: Prisma.SiteTemplateDataDefCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SiteTemplateDataDefDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplateDataDefPayload>
          }
          update: {
            args: Prisma.SiteTemplateDataDefUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplateDataDefPayload>
          }
          deleteMany: {
            args: Prisma.SiteTemplateDataDefDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SiteTemplateDataDefUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SiteTemplateDataDefUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SiteTemplateDataDefPayload>
          }
          aggregate: {
            args: Prisma.SiteTemplateDataDefAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSiteTemplateDataDef>
          }
          groupBy: {
            args: Prisma.SiteTemplateDataDefGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SiteTemplateDataDefGroupByOutputType>[]
          }
          count: {
            args: Prisma.SiteTemplateDataDefCountArgs<ExtArgs>,
            result: $Utils.Optional<SiteTemplateDataDefCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: CustomerPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>,
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Site: {
        payload: SitePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SiteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SiteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SitePayload>
          }
          findFirst: {
            args: Prisma.SiteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SiteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SitePayload>
          }
          findMany: {
            args: Prisma.SiteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SitePayload>[]
          }
          create: {
            args: Prisma.SiteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SitePayload>
          }
          createMany: {
            args: Prisma.SiteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SiteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SitePayload>
          }
          update: {
            args: Prisma.SiteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SitePayload>
          }
          deleteMany: {
            args: Prisma.SiteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SiteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SiteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SitePayload>
          }
          aggregate: {
            args: Prisma.SiteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSite>
          }
          groupBy: {
            args: Prisma.SiteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SiteGroupByOutputType>[]
          }
          count: {
            args: Prisma.SiteCountArgs<ExtArgs>,
            result: $Utils.Optional<SiteCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: UserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: AccountPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: SessionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: VerificationTokenPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: ProjectPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>,
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      ProjectInvite: {
        payload: ProjectInvitePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ProjectInviteFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectInvitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectInviteFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectInvitePayload>
          }
          findFirst: {
            args: Prisma.ProjectInviteFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectInvitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectInviteFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectInvitePayload>
          }
          findMany: {
            args: Prisma.ProjectInviteFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectInvitePayload>[]
          }
          create: {
            args: Prisma.ProjectInviteCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectInvitePayload>
          }
          createMany: {
            args: Prisma.ProjectInviteCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProjectInviteDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectInvitePayload>
          }
          update: {
            args: Prisma.ProjectInviteUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectInvitePayload>
          }
          deleteMany: {
            args: Prisma.ProjectInviteDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectInviteUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProjectInviteUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectInvitePayload>
          }
          aggregate: {
            args: Prisma.ProjectInviteAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProjectInvite>
          }
          groupBy: {
            args: Prisma.ProjectInviteGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProjectInviteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectInviteCountArgs<ExtArgs>,
            result: $Utils.Optional<ProjectInviteCountAggregateOutputType> | number
          }
        }
      }
      ProjectUsers: {
        payload: ProjectUsersPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ProjectUsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectUsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectUsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectUsersPayload>
          }
          findFirst: {
            args: Prisma.ProjectUsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectUsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectUsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectUsersPayload>
          }
          findMany: {
            args: Prisma.ProjectUsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectUsersPayload>[]
          }
          create: {
            args: Prisma.ProjectUsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectUsersPayload>
          }
          createMany: {
            args: Prisma.ProjectUsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProjectUsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectUsersPayload>
          }
          update: {
            args: Prisma.ProjectUsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectUsersPayload>
          }
          deleteMany: {
            args: Prisma.ProjectUsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProjectUsersPayload>
          }
          aggregate: {
            args: Prisma.ProjectUsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProjectUsers>
          }
          groupBy: {
            args: Prisma.ProjectUsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProjectUsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectUsersCountArgs<ExtArgs>,
            result: $Utils.Optional<ProjectUsersCountAggregateOutputType> | number
          }
        }
      }
      SentEmail: {
        payload: SentEmailPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SentEmailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SentEmailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SentEmailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SentEmailPayload>
          }
          findFirst: {
            args: Prisma.SentEmailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SentEmailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SentEmailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SentEmailPayload>
          }
          findMany: {
            args: Prisma.SentEmailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SentEmailPayload>[]
          }
          create: {
            args: Prisma.SentEmailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SentEmailPayload>
          }
          createMany: {
            args: Prisma.SentEmailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SentEmailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SentEmailPayload>
          }
          update: {
            args: Prisma.SentEmailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SentEmailPayload>
          }
          deleteMany: {
            args: Prisma.SentEmailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SentEmailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SentEmailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SentEmailPayload>
          }
          aggregate: {
            args: Prisma.SentEmailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSentEmail>
          }
          groupBy: {
            args: Prisma.SentEmailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SentEmailGroupByOutputType>[]
          }
          count: {
            args: Prisma.SentEmailCountArgs<ExtArgs>,
            result: $Utils.Optional<SentEmailCountAggregateOutputType> | number
          }
        }
      }
      Domain: {
        payload: DomainPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.DomainFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DomainPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DomainFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DomainPayload>
          }
          findFirst: {
            args: Prisma.DomainFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DomainPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DomainFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DomainPayload>
          }
          findMany: {
            args: Prisma.DomainFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DomainPayload>[]
          }
          create: {
            args: Prisma.DomainCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DomainPayload>
          }
          createMany: {
            args: Prisma.DomainCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DomainDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DomainPayload>
          }
          update: {
            args: Prisma.DomainUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DomainPayload>
          }
          deleteMany: {
            args: Prisma.DomainDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DomainUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DomainUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DomainPayload>
          }
          aggregate: {
            args: Prisma.DomainAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDomain>
          }
          groupBy: {
            args: Prisma.DomainGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DomainGroupByOutputType>[]
          }
          count: {
            args: Prisma.DomainCountArgs<ExtArgs>,
            result: $Utils.Optional<DomainCountAggregateOutputType> | number
          }
        }
      }
      Link: {
        payload: LinkPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.LinkFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LinkFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LinkPayload>
          }
          findFirst: {
            args: Prisma.LinkFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LinkFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LinkPayload>
          }
          findMany: {
            args: Prisma.LinkFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LinkPayload>[]
          }
          create: {
            args: Prisma.LinkCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LinkPayload>
          }
          createMany: {
            args: Prisma.LinkCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LinkDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LinkPayload>
          }
          update: {
            args: Prisma.LinkUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LinkPayload>
          }
          deleteMany: {
            args: Prisma.LinkDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LinkUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LinkUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<LinkPayload>
          }
          aggregate: {
            args: Prisma.LinkAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLink>
          }
          groupBy: {
            args: Prisma.LinkGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.LinkCountArgs<ExtArgs>,
            result: $Utils.Optional<LinkCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: TagPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>,
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      jackson_index: {
        payload: jackson_indexPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.jackson_indexFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_indexPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.jackson_indexFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_indexPayload>
          }
          findFirst: {
            args: Prisma.jackson_indexFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_indexPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.jackson_indexFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_indexPayload>
          }
          findMany: {
            args: Prisma.jackson_indexFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_indexPayload>[]
          }
          create: {
            args: Prisma.jackson_indexCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_indexPayload>
          }
          createMany: {
            args: Prisma.jackson_indexCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.jackson_indexDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_indexPayload>
          }
          update: {
            args: Prisma.jackson_indexUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_indexPayload>
          }
          deleteMany: {
            args: Prisma.jackson_indexDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.jackson_indexUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.jackson_indexUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_indexPayload>
          }
          aggregate: {
            args: Prisma.Jackson_indexAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateJackson_index>
          }
          groupBy: {
            args: Prisma.Jackson_indexGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Jackson_indexGroupByOutputType>[]
          }
          count: {
            args: Prisma.jackson_indexCountArgs<ExtArgs>,
            result: $Utils.Optional<Jackson_indexCountAggregateOutputType> | number
          }
        }
      }
      jackson_store: {
        payload: jackson_storePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.jackson_storeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_storePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.jackson_storeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_storePayload>
          }
          findFirst: {
            args: Prisma.jackson_storeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_storePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.jackson_storeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_storePayload>
          }
          findMany: {
            args: Prisma.jackson_storeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_storePayload>[]
          }
          create: {
            args: Prisma.jackson_storeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_storePayload>
          }
          createMany: {
            args: Prisma.jackson_storeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.jackson_storeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_storePayload>
          }
          update: {
            args: Prisma.jackson_storeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_storePayload>
          }
          deleteMany: {
            args: Prisma.jackson_storeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.jackson_storeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.jackson_storeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_storePayload>
          }
          aggregate: {
            args: Prisma.Jackson_storeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateJackson_store>
          }
          groupBy: {
            args: Prisma.Jackson_storeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Jackson_storeGroupByOutputType>[]
          }
          count: {
            args: Prisma.jackson_storeCountArgs<ExtArgs>,
            result: $Utils.Optional<Jackson_storeCountAggregateOutputType> | number
          }
        }
      }
      jackson_ttl: {
        payload: jackson_ttlPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.jackson_ttlFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_ttlPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.jackson_ttlFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_ttlPayload>
          }
          findFirst: {
            args: Prisma.jackson_ttlFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_ttlPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.jackson_ttlFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_ttlPayload>
          }
          findMany: {
            args: Prisma.jackson_ttlFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_ttlPayload>[]
          }
          create: {
            args: Prisma.jackson_ttlCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_ttlPayload>
          }
          createMany: {
            args: Prisma.jackson_ttlCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.jackson_ttlDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_ttlPayload>
          }
          update: {
            args: Prisma.jackson_ttlUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_ttlPayload>
          }
          deleteMany: {
            args: Prisma.jackson_ttlDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.jackson_ttlUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.jackson_ttlUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<jackson_ttlPayload>
          }
          aggregate: {
            args: Prisma.Jackson_ttlAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateJackson_ttl>
          }
          groupBy: {
            args: Prisma.Jackson_ttlGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Jackson_ttlGroupByOutputType>[]
          }
          count: {
            args: Prisma.jackson_ttlCountArgs<ExtArgs>,
            result: $Utils.Optional<Jackson_ttlCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SiteTemplateCountOutputType
   */


  export type SiteTemplateCountOutputType = {
    site: number
  }

  export type SiteTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    site?: boolean | SiteTemplateCountOutputTypeCountSiteArgs
  }

  // Custom InputTypes

  /**
   * SiteTemplateCountOutputType without action
   */
  export type SiteTemplateCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplateCountOutputType
     */
    select?: SiteTemplateCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SiteTemplateCountOutputType without action
   */
  export type SiteTemplateCountOutputTypeCountSiteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
  }



  /**
   * Count Type CustomerCountOutputType
   */


  export type CustomerCountOutputType = {
    site: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    site?: boolean | CustomerCountOutputTypeCountSiteArgs
  }

  // Custom InputTypes

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountSiteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    accounts: number
    sessions: number
    projects: number
    links: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    projects?: boolean | UserCountOutputTypeCountProjectsArgs
    links?: boolean | UserCountOutputTypeCountLinksArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProjectUsersWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLinksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LinkWhereInput
  }



  /**
   * Count Type ProjectCountOutputType
   */


  export type ProjectCountOutputType = {
    users: number
    invites: number
    sentEmails: number
    domains: number
    links: number
    tags: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | ProjectCountOutputTypeCountUsersArgs
    invites?: boolean | ProjectCountOutputTypeCountInvitesArgs
    sentEmails?: boolean | ProjectCountOutputTypeCountSentEmailsArgs
    domains?: boolean | ProjectCountOutputTypeCountDomainsArgs
    links?: boolean | ProjectCountOutputTypeCountLinksArgs
    tags?: boolean | ProjectCountOutputTypeCountTagsArgs
  }

  // Custom InputTypes

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProjectUsersWhereInput
  }


  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountInvitesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProjectInviteWhereInput
  }


  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountSentEmailsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SentEmailWhereInput
  }


  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountDomainsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DomainWhereInput
  }


  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountLinksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LinkWhereInput
  }


  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
  }



  /**
   * Count Type DomainCountOutputType
   */


  export type DomainCountOutputType = {
    links: number
  }

  export type DomainCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    links?: boolean | DomainCountOutputTypeCountLinksArgs
  }

  // Custom InputTypes

  /**
   * DomainCountOutputType without action
   */
  export type DomainCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DomainCountOutputType
     */
    select?: DomainCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DomainCountOutputType without action
   */
  export type DomainCountOutputTypeCountLinksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LinkWhereInput
  }



  /**
   * Count Type TagCountOutputType
   */


  export type TagCountOutputType = {
    links: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    links?: boolean | TagCountOutputTypeCountLinksArgs
  }

  // Custom InputTypes

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountLinksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LinkWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Audits
   */


  export type AggregateAudits = {
    _count: AuditsCountAggregateOutputType | null
    _avg: AuditsAvgAggregateOutputType | null
    _sum: AuditsSumAggregateOutputType | null
    _min: AuditsMinAggregateOutputType | null
    _max: AuditsMaxAggregateOutputType | null
  }

  export type AuditsAvgAggregateOutputType = {
    id: number | null
    auditId: number | null
    version: number | null
  }

  export type AuditsSumAggregateOutputType = {
    id: number | null
    auditId: number | null
    version: number | null
  }

  export type AuditsMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    auditId: number | null
    auditType: string | null
    userId: string | null
    username: string | null
    action: string | null
    auditChanges: string | null
    version: number | null
  }

  export type AuditsMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    auditId: number | null
    auditType: string | null
    userId: string | null
    username: string | null
    action: string | null
    auditChanges: string | null
    version: number | null
  }

  export type AuditsCountAggregateOutputType = {
    id: number
    createdAt: number
    auditId: number
    auditType: number
    userId: number
    username: number
    action: number
    auditChanges: number
    version: number
    _all: number
  }


  export type AuditsAvgAggregateInputType = {
    id?: true
    auditId?: true
    version?: true
  }

  export type AuditsSumAggregateInputType = {
    id?: true
    auditId?: true
    version?: true
  }

  export type AuditsMinAggregateInputType = {
    id?: true
    createdAt?: true
    auditId?: true
    auditType?: true
    userId?: true
    username?: true
    action?: true
    auditChanges?: true
    version?: true
  }

  export type AuditsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    auditId?: true
    auditType?: true
    userId?: true
    username?: true
    action?: true
    auditChanges?: true
    version?: true
  }

  export type AuditsCountAggregateInputType = {
    id?: true
    createdAt?: true
    auditId?: true
    auditType?: true
    userId?: true
    username?: true
    action?: true
    auditChanges?: true
    version?: true
    _all?: true
  }

  export type AuditsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Audits to aggregate.
     */
    where?: AuditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audits to fetch.
     */
    orderBy?: Enumerable<AuditsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Audits
    **/
    _count?: true | AuditsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditsMaxAggregateInputType
  }

  export type GetAuditsAggregateType<T extends AuditsAggregateArgs> = {
        [P in keyof T & keyof AggregateAudits]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAudits[P]>
      : GetScalarType<T[P], AggregateAudits[P]>
  }




  export type AuditsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuditsWhereInput
    orderBy?: Enumerable<AuditsOrderByWithAggregationInput>
    by: AuditsScalarFieldEnum[]
    having?: AuditsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditsCountAggregateInputType | true
    _avg?: AuditsAvgAggregateInputType
    _sum?: AuditsSumAggregateInputType
    _min?: AuditsMinAggregateInputType
    _max?: AuditsMaxAggregateInputType
  }


  export type AuditsGroupByOutputType = {
    id: number
    createdAt: Date
    auditId: number
    auditType: string
    userId: string
    username: string | null
    action: string
    auditChanges: string
    version: number
    _count: AuditsCountAggregateOutputType | null
    _avg: AuditsAvgAggregateOutputType | null
    _sum: AuditsSumAggregateOutputType | null
    _min: AuditsMinAggregateOutputType | null
    _max: AuditsMaxAggregateOutputType | null
  }

  type GetAuditsGroupByPayload<T extends AuditsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AuditsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditsGroupByOutputType[P]>
            : GetScalarType<T[P], AuditsGroupByOutputType[P]>
        }
      >
    >


  export type AuditsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    auditId?: boolean
    auditType?: boolean
    userId?: boolean
    username?: boolean
    action?: boolean
    auditChanges?: boolean
    version?: boolean
  }, ExtArgs["result"]["audits"]>

  export type AuditsSelectScalar = {
    id?: boolean
    createdAt?: boolean
    auditId?: boolean
    auditType?: boolean
    userId?: boolean
    username?: boolean
    action?: boolean
    auditChanges?: boolean
    version?: boolean
  }


  type AuditsGetPayload<S extends boolean | null | undefined | AuditsArgs> = $Types.GetResult<AuditsPayload, S>

  type AuditsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AuditsFindManyArgs, 'select' | 'include'> & {
      select?: AuditsCountAggregateInputType | true
    }

  export interface AuditsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Audits'], meta: { name: 'Audits' } }
    /**
     * Find zero or one Audits that matches the filter.
     * @param {AuditsFindUniqueArgs} args - Arguments to find a Audits
     * @example
     * // Get one Audits
     * const audits = await prisma.audits.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuditsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AuditsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Audits'> extends True ? Prisma__AuditsClient<$Types.GetResult<AuditsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AuditsClient<$Types.GetResult<AuditsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Audits that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AuditsFindUniqueOrThrowArgs} args - Arguments to find a Audits
     * @example
     * // Get one Audits
     * const audits = await prisma.audits.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AuditsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AuditsClient<$Types.GetResult<AuditsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Audits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsFindFirstArgs} args - Arguments to find a Audits
     * @example
     * // Get one Audits
     * const audits = await prisma.audits.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuditsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AuditsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Audits'> extends True ? Prisma__AuditsClient<$Types.GetResult<AuditsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AuditsClient<$Types.GetResult<AuditsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Audits that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsFindFirstOrThrowArgs} args - Arguments to find a Audits
     * @example
     * // Get one Audits
     * const audits = await prisma.audits.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AuditsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AuditsClient<$Types.GetResult<AuditsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Audits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Audits
     * const audits = await prisma.audits.findMany()
     * 
     * // Get first 10 Audits
     * const audits = await prisma.audits.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditsWithIdOnly = await prisma.audits.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AuditsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AuditsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Audits.
     * @param {AuditsCreateArgs} args - Arguments to create a Audits.
     * @example
     * // Create one Audits
     * const Audits = await prisma.audits.create({
     *   data: {
     *     // ... data to create a Audits
     *   }
     * })
     * 
    **/
    create<T extends AuditsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AuditsCreateArgs<ExtArgs>>
    ): Prisma__AuditsClient<$Types.GetResult<AuditsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Audits.
     *     @param {AuditsCreateManyArgs} args - Arguments to create many Audits.
     *     @example
     *     // Create many Audits
     *     const audits = await prisma.audits.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AuditsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Audits.
     * @param {AuditsDeleteArgs} args - Arguments to delete one Audits.
     * @example
     * // Delete one Audits
     * const Audits = await prisma.audits.delete({
     *   where: {
     *     // ... filter to delete one Audits
     *   }
     * })
     * 
    **/
    delete<T extends AuditsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AuditsDeleteArgs<ExtArgs>>
    ): Prisma__AuditsClient<$Types.GetResult<AuditsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Audits.
     * @param {AuditsUpdateArgs} args - Arguments to update one Audits.
     * @example
     * // Update one Audits
     * const audits = await prisma.audits.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuditsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AuditsUpdateArgs<ExtArgs>>
    ): Prisma__AuditsClient<$Types.GetResult<AuditsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Audits.
     * @param {AuditsDeleteManyArgs} args - Arguments to filter Audits to delete.
     * @example
     * // Delete a few Audits
     * const { count } = await prisma.audits.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuditsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Audits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Audits
     * const audits = await prisma.audits.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuditsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AuditsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Audits.
     * @param {AuditsUpsertArgs} args - Arguments to update or create a Audits.
     * @example
     * // Update or create a Audits
     * const audits = await prisma.audits.upsert({
     *   create: {
     *     // ... data to create a Audits
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Audits we want to update
     *   }
     * })
    **/
    upsert<T extends AuditsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AuditsUpsertArgs<ExtArgs>>
    ): Prisma__AuditsClient<$Types.GetResult<AuditsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Audits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsCountArgs} args - Arguments to filter Audits to count.
     * @example
     * // Count the number of Audits
     * const count = await prisma.audits.count({
     *   where: {
     *     // ... the filter for the Audits we want to count
     *   }
     * })
    **/
    count<T extends AuditsCountArgs>(
      args?: Subset<T, AuditsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Audits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditsAggregateArgs>(args: Subset<T, AuditsAggregateArgs>): Prisma.PrismaPromise<GetAuditsAggregateType<T>>

    /**
     * Group by Audits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditsGroupByArgs['orderBy'] }
        : { orderBy?: AuditsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Audits.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AuditsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Audits base type for findUnique actions
   */
  export type AuditsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect<ExtArgs> | null
    /**
     * Filter, which Audits to fetch.
     */
    where: AuditsWhereUniqueInput
  }

  /**
   * Audits findUnique
   */
  export interface AuditsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AuditsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Audits findUniqueOrThrow
   */
  export type AuditsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect<ExtArgs> | null
    /**
     * Filter, which Audits to fetch.
     */
    where: AuditsWhereUniqueInput
  }


  /**
   * Audits base type for findFirst actions
   */
  export type AuditsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect<ExtArgs> | null
    /**
     * Filter, which Audits to fetch.
     */
    where?: AuditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audits to fetch.
     */
    orderBy?: Enumerable<AuditsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Audits.
     */
    cursor?: AuditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Audits.
     */
    distinct?: Enumerable<AuditsScalarFieldEnum>
  }

  /**
   * Audits findFirst
   */
  export interface AuditsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AuditsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Audits findFirstOrThrow
   */
  export type AuditsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect<ExtArgs> | null
    /**
     * Filter, which Audits to fetch.
     */
    where?: AuditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audits to fetch.
     */
    orderBy?: Enumerable<AuditsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Audits.
     */
    cursor?: AuditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Audits.
     */
    distinct?: Enumerable<AuditsScalarFieldEnum>
  }


  /**
   * Audits findMany
   */
  export type AuditsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect<ExtArgs> | null
    /**
     * Filter, which Audits to fetch.
     */
    where?: AuditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audits to fetch.
     */
    orderBy?: Enumerable<AuditsOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Audits.
     */
    cursor?: AuditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audits.
     */
    skip?: number
    distinct?: Enumerable<AuditsScalarFieldEnum>
  }


  /**
   * Audits create
   */
  export type AuditsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect<ExtArgs> | null
    /**
     * The data needed to create a Audits.
     */
    data: XOR<AuditsCreateInput, AuditsUncheckedCreateInput>
  }


  /**
   * Audits createMany
   */
  export type AuditsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Audits.
     */
    data: Enumerable<AuditsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Audits update
   */
  export type AuditsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect<ExtArgs> | null
    /**
     * The data needed to update a Audits.
     */
    data: XOR<AuditsUpdateInput, AuditsUncheckedUpdateInput>
    /**
     * Choose, which Audits to update.
     */
    where: AuditsWhereUniqueInput
  }


  /**
   * Audits updateMany
   */
  export type AuditsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Audits.
     */
    data: XOR<AuditsUpdateManyMutationInput, AuditsUncheckedUpdateManyInput>
    /**
     * Filter which Audits to update
     */
    where?: AuditsWhereInput
  }


  /**
   * Audits upsert
   */
  export type AuditsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect<ExtArgs> | null
    /**
     * The filter to search for the Audits to update in case it exists.
     */
    where: AuditsWhereUniqueInput
    /**
     * In case the Audits found by the `where` argument doesn't exist, create a new Audits with this data.
     */
    create: XOR<AuditsCreateInput, AuditsUncheckedCreateInput>
    /**
     * In case the Audits was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditsUpdateInput, AuditsUncheckedUpdateInput>
  }


  /**
   * Audits delete
   */
  export type AuditsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect<ExtArgs> | null
    /**
     * Filter which Audits to delete.
     */
    where: AuditsWhereUniqueInput
  }


  /**
   * Audits deleteMany
   */
  export type AuditsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Audits to delete
     */
    where?: AuditsWhereInput
  }


  /**
   * Audits without action
   */
  export type AuditsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect<ExtArgs> | null
  }



  /**
   * Model SiteTemplate
   */


  export type AggregateSiteTemplate = {
    _count: SiteTemplateCountAggregateOutputType | null
    _avg: SiteTemplateAvgAggregateOutputType | null
    _sum: SiteTemplateSumAggregateOutputType | null
    _min: SiteTemplateMinAggregateOutputType | null
    _max: SiteTemplateMaxAggregateOutputType | null
  }

  export type SiteTemplateAvgAggregateOutputType = {
    id: number | null
  }

  export type SiteTemplateSumAggregateOutputType = {
    id: number | null
  }

  export type SiteTemplateMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
    template: string | null
  }

  export type SiteTemplateMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
    template: string | null
  }

  export type SiteTemplateCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    name: number
    template: number
    _all: number
  }


  export type SiteTemplateAvgAggregateInputType = {
    id?: true
  }

  export type SiteTemplateSumAggregateInputType = {
    id?: true
  }

  export type SiteTemplateMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    template?: true
  }

  export type SiteTemplateMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    template?: true
  }

  export type SiteTemplateCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    template?: true
    _all?: true
  }

  export type SiteTemplateAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SiteTemplate to aggregate.
     */
    where?: SiteTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplates to fetch.
     */
    orderBy?: Enumerable<SiteTemplateOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SiteTemplates
    **/
    _count?: true | SiteTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteTemplateMaxAggregateInputType
  }

  export type GetSiteTemplateAggregateType<T extends SiteTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateSiteTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSiteTemplate[P]>
      : GetScalarType<T[P], AggregateSiteTemplate[P]>
  }




  export type SiteTemplateGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SiteTemplateWhereInput
    orderBy?: Enumerable<SiteTemplateOrderByWithAggregationInput>
    by: SiteTemplateScalarFieldEnum[]
    having?: SiteTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteTemplateCountAggregateInputType | true
    _avg?: SiteTemplateAvgAggregateInputType
    _sum?: SiteTemplateSumAggregateInputType
    _min?: SiteTemplateMinAggregateInputType
    _max?: SiteTemplateMaxAggregateInputType
  }


  export type SiteTemplateGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    name: string
    template: string
    _count: SiteTemplateCountAggregateOutputType | null
    _avg: SiteTemplateAvgAggregateOutputType | null
    _sum: SiteTemplateSumAggregateOutputType | null
    _min: SiteTemplateMinAggregateOutputType | null
    _max: SiteTemplateMaxAggregateOutputType | null
  }

  type GetSiteTemplateGroupByPayload<T extends SiteTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SiteTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], SiteTemplateGroupByOutputType[P]>
        }
      >
    >


  export type SiteTemplateSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    name?: boolean
    template?: boolean
    site?: boolean | SiteTemplate$siteArgs<ExtArgs>
    siteTemplateDataDef?: boolean | SiteTemplateDataDefArgs<ExtArgs>
    _count?: boolean | SiteTemplateCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["siteTemplate"]>

  export type SiteTemplateSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    name?: boolean
    template?: boolean
  }

  export type SiteTemplateInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    site?: boolean | SiteTemplate$siteArgs<ExtArgs>
    siteTemplateDataDef?: boolean | SiteTemplateDataDefArgs<ExtArgs>
    _count?: boolean | SiteTemplateCountOutputTypeArgs<ExtArgs>
  }


  type SiteTemplateGetPayload<S extends boolean | null | undefined | SiteTemplateArgs> = $Types.GetResult<SiteTemplatePayload, S>

  type SiteTemplateCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SiteTemplateFindManyArgs, 'select' | 'include'> & {
      select?: SiteTemplateCountAggregateInputType | true
    }

  export interface SiteTemplateDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SiteTemplate'], meta: { name: 'SiteTemplate' } }
    /**
     * Find zero or one SiteTemplate that matches the filter.
     * @param {SiteTemplateFindUniqueArgs} args - Arguments to find a SiteTemplate
     * @example
     * // Get one SiteTemplate
     * const siteTemplate = await prisma.siteTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SiteTemplateFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SiteTemplateFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SiteTemplate'> extends True ? Prisma__SiteTemplateClient<$Types.GetResult<SiteTemplatePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SiteTemplateClient<$Types.GetResult<SiteTemplatePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one SiteTemplate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SiteTemplateFindUniqueOrThrowArgs} args - Arguments to find a SiteTemplate
     * @example
     * // Get one SiteTemplate
     * const siteTemplate = await prisma.siteTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SiteTemplateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteTemplateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SiteTemplateClient<$Types.GetResult<SiteTemplatePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first SiteTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateFindFirstArgs} args - Arguments to find a SiteTemplate
     * @example
     * // Get one SiteTemplate
     * const siteTemplate = await prisma.siteTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SiteTemplateFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SiteTemplateFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SiteTemplate'> extends True ? Prisma__SiteTemplateClient<$Types.GetResult<SiteTemplatePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SiteTemplateClient<$Types.GetResult<SiteTemplatePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first SiteTemplate that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateFindFirstOrThrowArgs} args - Arguments to find a SiteTemplate
     * @example
     * // Get one SiteTemplate
     * const siteTemplate = await prisma.siteTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SiteTemplateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteTemplateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SiteTemplateClient<$Types.GetResult<SiteTemplatePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more SiteTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SiteTemplates
     * const siteTemplates = await prisma.siteTemplate.findMany()
     * 
     * // Get first 10 SiteTemplates
     * const siteTemplates = await prisma.siteTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteTemplateWithIdOnly = await prisma.siteTemplate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SiteTemplateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteTemplateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SiteTemplatePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a SiteTemplate.
     * @param {SiteTemplateCreateArgs} args - Arguments to create a SiteTemplate.
     * @example
     * // Create one SiteTemplate
     * const SiteTemplate = await prisma.siteTemplate.create({
     *   data: {
     *     // ... data to create a SiteTemplate
     *   }
     * })
     * 
    **/
    create<T extends SiteTemplateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SiteTemplateCreateArgs<ExtArgs>>
    ): Prisma__SiteTemplateClient<$Types.GetResult<SiteTemplatePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many SiteTemplates.
     *     @param {SiteTemplateCreateManyArgs} args - Arguments to create many SiteTemplates.
     *     @example
     *     // Create many SiteTemplates
     *     const siteTemplate = await prisma.siteTemplate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SiteTemplateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteTemplateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SiteTemplate.
     * @param {SiteTemplateDeleteArgs} args - Arguments to delete one SiteTemplate.
     * @example
     * // Delete one SiteTemplate
     * const SiteTemplate = await prisma.siteTemplate.delete({
     *   where: {
     *     // ... filter to delete one SiteTemplate
     *   }
     * })
     * 
    **/
    delete<T extends SiteTemplateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SiteTemplateDeleteArgs<ExtArgs>>
    ): Prisma__SiteTemplateClient<$Types.GetResult<SiteTemplatePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one SiteTemplate.
     * @param {SiteTemplateUpdateArgs} args - Arguments to update one SiteTemplate.
     * @example
     * // Update one SiteTemplate
     * const siteTemplate = await prisma.siteTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SiteTemplateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SiteTemplateUpdateArgs<ExtArgs>>
    ): Prisma__SiteTemplateClient<$Types.GetResult<SiteTemplatePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more SiteTemplates.
     * @param {SiteTemplateDeleteManyArgs} args - Arguments to filter SiteTemplates to delete.
     * @example
     * // Delete a few SiteTemplates
     * const { count } = await prisma.siteTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SiteTemplateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteTemplateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SiteTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SiteTemplates
     * const siteTemplate = await prisma.siteTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SiteTemplateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SiteTemplateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SiteTemplate.
     * @param {SiteTemplateUpsertArgs} args - Arguments to update or create a SiteTemplate.
     * @example
     * // Update or create a SiteTemplate
     * const siteTemplate = await prisma.siteTemplate.upsert({
     *   create: {
     *     // ... data to create a SiteTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SiteTemplate we want to update
     *   }
     * })
    **/
    upsert<T extends SiteTemplateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SiteTemplateUpsertArgs<ExtArgs>>
    ): Prisma__SiteTemplateClient<$Types.GetResult<SiteTemplatePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of SiteTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateCountArgs} args - Arguments to filter SiteTemplates to count.
     * @example
     * // Count the number of SiteTemplates
     * const count = await prisma.siteTemplate.count({
     *   where: {
     *     // ... the filter for the SiteTemplates we want to count
     *   }
     * })
    **/
    count<T extends SiteTemplateCountArgs>(
      args?: Subset<T, SiteTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SiteTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteTemplateAggregateArgs>(args: Subset<T, SiteTemplateAggregateArgs>): Prisma.PrismaPromise<GetSiteTemplateAggregateType<T>>

    /**
     * Group by SiteTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteTemplateGroupByArgs['orderBy'] }
        : { orderBy?: SiteTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SiteTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SiteTemplateClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    site<T extends SiteTemplate$siteArgs<ExtArgs> = {}>(args?: Subset<T, SiteTemplate$siteArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SitePayload<ExtArgs>, T, 'findMany', never>| Null>;

    siteTemplateDataDef<T extends SiteTemplateDataDefArgs<ExtArgs> = {}>(args?: Subset<T, SiteTemplateDataDefArgs<ExtArgs>>): Prisma__SiteTemplateDataDefClient<$Types.GetResult<SiteTemplateDataDefPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SiteTemplate base type for findUnique actions
   */
  export type SiteTemplateFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude<ExtArgs> | null
    /**
     * Filter, which SiteTemplate to fetch.
     */
    where: SiteTemplateWhereUniqueInput
  }

  /**
   * SiteTemplate findUnique
   */
  export interface SiteTemplateFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SiteTemplateFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SiteTemplate findUniqueOrThrow
   */
  export type SiteTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude<ExtArgs> | null
    /**
     * Filter, which SiteTemplate to fetch.
     */
    where: SiteTemplateWhereUniqueInput
  }


  /**
   * SiteTemplate base type for findFirst actions
   */
  export type SiteTemplateFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude<ExtArgs> | null
    /**
     * Filter, which SiteTemplate to fetch.
     */
    where?: SiteTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplates to fetch.
     */
    orderBy?: Enumerable<SiteTemplateOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteTemplates.
     */
    cursor?: SiteTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteTemplates.
     */
    distinct?: Enumerable<SiteTemplateScalarFieldEnum>
  }

  /**
   * SiteTemplate findFirst
   */
  export interface SiteTemplateFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SiteTemplateFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SiteTemplate findFirstOrThrow
   */
  export type SiteTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude<ExtArgs> | null
    /**
     * Filter, which SiteTemplate to fetch.
     */
    where?: SiteTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplates to fetch.
     */
    orderBy?: Enumerable<SiteTemplateOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteTemplates.
     */
    cursor?: SiteTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteTemplates.
     */
    distinct?: Enumerable<SiteTemplateScalarFieldEnum>
  }


  /**
   * SiteTemplate findMany
   */
  export type SiteTemplateFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude<ExtArgs> | null
    /**
     * Filter, which SiteTemplates to fetch.
     */
    where?: SiteTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplates to fetch.
     */
    orderBy?: Enumerable<SiteTemplateOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SiteTemplates.
     */
    cursor?: SiteTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplates.
     */
    skip?: number
    distinct?: Enumerable<SiteTemplateScalarFieldEnum>
  }


  /**
   * SiteTemplate create
   */
  export type SiteTemplateCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a SiteTemplate.
     */
    data: XOR<SiteTemplateCreateInput, SiteTemplateUncheckedCreateInput>
  }


  /**
   * SiteTemplate createMany
   */
  export type SiteTemplateCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SiteTemplates.
     */
    data: Enumerable<SiteTemplateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SiteTemplate update
   */
  export type SiteTemplateUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a SiteTemplate.
     */
    data: XOR<SiteTemplateUpdateInput, SiteTemplateUncheckedUpdateInput>
    /**
     * Choose, which SiteTemplate to update.
     */
    where: SiteTemplateWhereUniqueInput
  }


  /**
   * SiteTemplate updateMany
   */
  export type SiteTemplateUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SiteTemplates.
     */
    data: XOR<SiteTemplateUpdateManyMutationInput, SiteTemplateUncheckedUpdateManyInput>
    /**
     * Filter which SiteTemplates to update
     */
    where?: SiteTemplateWhereInput
  }


  /**
   * SiteTemplate upsert
   */
  export type SiteTemplateUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the SiteTemplate to update in case it exists.
     */
    where: SiteTemplateWhereUniqueInput
    /**
     * In case the SiteTemplate found by the `where` argument doesn't exist, create a new SiteTemplate with this data.
     */
    create: XOR<SiteTemplateCreateInput, SiteTemplateUncheckedCreateInput>
    /**
     * In case the SiteTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteTemplateUpdateInput, SiteTemplateUncheckedUpdateInput>
  }


  /**
   * SiteTemplate delete
   */
  export type SiteTemplateDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude<ExtArgs> | null
    /**
     * Filter which SiteTemplate to delete.
     */
    where: SiteTemplateWhereUniqueInput
  }


  /**
   * SiteTemplate deleteMany
   */
  export type SiteTemplateDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SiteTemplates to delete
     */
    where?: SiteTemplateWhereInput
  }


  /**
   * SiteTemplate.site
   */
  export type SiteTemplate$siteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    where?: SiteWhereInput
    orderBy?: Enumerable<SiteOrderByWithRelationAndSearchRelevanceInput>
    cursor?: SiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SiteScalarFieldEnum>
  }


  /**
   * SiteTemplate without action
   */
  export type SiteTemplateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude<ExtArgs> | null
  }



  /**
   * Model SiteTemplateDataDef
   */


  export type AggregateSiteTemplateDataDef = {
    _count: SiteTemplateDataDefCountAggregateOutputType | null
    _avg: SiteTemplateDataDefAvgAggregateOutputType | null
    _sum: SiteTemplateDataDefSumAggregateOutputType | null
    _min: SiteTemplateDataDefMinAggregateOutputType | null
    _max: SiteTemplateDataDefMaxAggregateOutputType | null
  }

  export type SiteTemplateDataDefAvgAggregateOutputType = {
    id: number | null
    siteTemplateId: number | null
  }

  export type SiteTemplateDataDefSumAggregateOutputType = {
    id: number | null
    siteTemplateId: number | null
  }

  export type SiteTemplateDataDefMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    siteTemplateId: number | null
  }

  export type SiteTemplateDataDefMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    siteTemplateId: number | null
  }

  export type SiteTemplateDataDefCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    siteTemplateId: number
    defData: number
    _all: number
  }


  export type SiteTemplateDataDefAvgAggregateInputType = {
    id?: true
    siteTemplateId?: true
  }

  export type SiteTemplateDataDefSumAggregateInputType = {
    id?: true
    siteTemplateId?: true
  }

  export type SiteTemplateDataDefMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    siteTemplateId?: true
  }

  export type SiteTemplateDataDefMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    siteTemplateId?: true
  }

  export type SiteTemplateDataDefCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    siteTemplateId?: true
    defData?: true
    _all?: true
  }

  export type SiteTemplateDataDefAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SiteTemplateDataDef to aggregate.
     */
    where?: SiteTemplateDataDefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplateDataDefs to fetch.
     */
    orderBy?: Enumerable<SiteTemplateDataDefOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteTemplateDataDefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplateDataDefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplateDataDefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SiteTemplateDataDefs
    **/
    _count?: true | SiteTemplateDataDefCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteTemplateDataDefAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteTemplateDataDefSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteTemplateDataDefMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteTemplateDataDefMaxAggregateInputType
  }

  export type GetSiteTemplateDataDefAggregateType<T extends SiteTemplateDataDefAggregateArgs> = {
        [P in keyof T & keyof AggregateSiteTemplateDataDef]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSiteTemplateDataDef[P]>
      : GetScalarType<T[P], AggregateSiteTemplateDataDef[P]>
  }




  export type SiteTemplateDataDefGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SiteTemplateDataDefWhereInput
    orderBy?: Enumerable<SiteTemplateDataDefOrderByWithAggregationInput>
    by: SiteTemplateDataDefScalarFieldEnum[]
    having?: SiteTemplateDataDefScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteTemplateDataDefCountAggregateInputType | true
    _avg?: SiteTemplateDataDefAvgAggregateInputType
    _sum?: SiteTemplateDataDefSumAggregateInputType
    _min?: SiteTemplateDataDefMinAggregateInputType
    _max?: SiteTemplateDataDefMaxAggregateInputType
  }


  export type SiteTemplateDataDefGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    siteTemplateId: number
    defData: JsonValue
    _count: SiteTemplateDataDefCountAggregateOutputType | null
    _avg: SiteTemplateDataDefAvgAggregateOutputType | null
    _sum: SiteTemplateDataDefSumAggregateOutputType | null
    _min: SiteTemplateDataDefMinAggregateOutputType | null
    _max: SiteTemplateDataDefMaxAggregateOutputType | null
  }

  type GetSiteTemplateDataDefGroupByPayload<T extends SiteTemplateDataDefGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SiteTemplateDataDefGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteTemplateDataDefGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteTemplateDataDefGroupByOutputType[P]>
            : GetScalarType<T[P], SiteTemplateDataDefGroupByOutputType[P]>
        }
      >
    >


  export type SiteTemplateDataDefSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    siteTemplateId?: boolean
    defData?: boolean
    siteTemplate?: boolean | SiteTemplateArgs<ExtArgs>
  }, ExtArgs["result"]["siteTemplateDataDef"]>

  export type SiteTemplateDataDefSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    siteTemplateId?: boolean
    defData?: boolean
  }

  export type SiteTemplateDataDefInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    siteTemplate?: boolean | SiteTemplateArgs<ExtArgs>
  }


  type SiteTemplateDataDefGetPayload<S extends boolean | null | undefined | SiteTemplateDataDefArgs> = $Types.GetResult<SiteTemplateDataDefPayload, S>

  type SiteTemplateDataDefCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SiteTemplateDataDefFindManyArgs, 'select' | 'include'> & {
      select?: SiteTemplateDataDefCountAggregateInputType | true
    }

  export interface SiteTemplateDataDefDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SiteTemplateDataDef'], meta: { name: 'SiteTemplateDataDef' } }
    /**
     * Find zero or one SiteTemplateDataDef that matches the filter.
     * @param {SiteTemplateDataDefFindUniqueArgs} args - Arguments to find a SiteTemplateDataDef
     * @example
     * // Get one SiteTemplateDataDef
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SiteTemplateDataDefFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SiteTemplateDataDefFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SiteTemplateDataDef'> extends True ? Prisma__SiteTemplateDataDefClient<$Types.GetResult<SiteTemplateDataDefPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SiteTemplateDataDefClient<$Types.GetResult<SiteTemplateDataDefPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one SiteTemplateDataDef that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SiteTemplateDataDefFindUniqueOrThrowArgs} args - Arguments to find a SiteTemplateDataDef
     * @example
     * // Get one SiteTemplateDataDef
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SiteTemplateDataDefFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteTemplateDataDefFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SiteTemplateDataDefClient<$Types.GetResult<SiteTemplateDataDefPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first SiteTemplateDataDef that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefFindFirstArgs} args - Arguments to find a SiteTemplateDataDef
     * @example
     * // Get one SiteTemplateDataDef
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SiteTemplateDataDefFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SiteTemplateDataDefFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SiteTemplateDataDef'> extends True ? Prisma__SiteTemplateDataDefClient<$Types.GetResult<SiteTemplateDataDefPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SiteTemplateDataDefClient<$Types.GetResult<SiteTemplateDataDefPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first SiteTemplateDataDef that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefFindFirstOrThrowArgs} args - Arguments to find a SiteTemplateDataDef
     * @example
     * // Get one SiteTemplateDataDef
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SiteTemplateDataDefFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteTemplateDataDefFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SiteTemplateDataDefClient<$Types.GetResult<SiteTemplateDataDefPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more SiteTemplateDataDefs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SiteTemplateDataDefs
     * const siteTemplateDataDefs = await prisma.siteTemplateDataDef.findMany()
     * 
     * // Get first 10 SiteTemplateDataDefs
     * const siteTemplateDataDefs = await prisma.siteTemplateDataDef.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteTemplateDataDefWithIdOnly = await prisma.siteTemplateDataDef.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SiteTemplateDataDefFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteTemplateDataDefFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SiteTemplateDataDefPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a SiteTemplateDataDef.
     * @param {SiteTemplateDataDefCreateArgs} args - Arguments to create a SiteTemplateDataDef.
     * @example
     * // Create one SiteTemplateDataDef
     * const SiteTemplateDataDef = await prisma.siteTemplateDataDef.create({
     *   data: {
     *     // ... data to create a SiteTemplateDataDef
     *   }
     * })
     * 
    **/
    create<T extends SiteTemplateDataDefCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SiteTemplateDataDefCreateArgs<ExtArgs>>
    ): Prisma__SiteTemplateDataDefClient<$Types.GetResult<SiteTemplateDataDefPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many SiteTemplateDataDefs.
     *     @param {SiteTemplateDataDefCreateManyArgs} args - Arguments to create many SiteTemplateDataDefs.
     *     @example
     *     // Create many SiteTemplateDataDefs
     *     const siteTemplateDataDef = await prisma.siteTemplateDataDef.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SiteTemplateDataDefCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteTemplateDataDefCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SiteTemplateDataDef.
     * @param {SiteTemplateDataDefDeleteArgs} args - Arguments to delete one SiteTemplateDataDef.
     * @example
     * // Delete one SiteTemplateDataDef
     * const SiteTemplateDataDef = await prisma.siteTemplateDataDef.delete({
     *   where: {
     *     // ... filter to delete one SiteTemplateDataDef
     *   }
     * })
     * 
    **/
    delete<T extends SiteTemplateDataDefDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SiteTemplateDataDefDeleteArgs<ExtArgs>>
    ): Prisma__SiteTemplateDataDefClient<$Types.GetResult<SiteTemplateDataDefPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one SiteTemplateDataDef.
     * @param {SiteTemplateDataDefUpdateArgs} args - Arguments to update one SiteTemplateDataDef.
     * @example
     * // Update one SiteTemplateDataDef
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SiteTemplateDataDefUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SiteTemplateDataDefUpdateArgs<ExtArgs>>
    ): Prisma__SiteTemplateDataDefClient<$Types.GetResult<SiteTemplateDataDefPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more SiteTemplateDataDefs.
     * @param {SiteTemplateDataDefDeleteManyArgs} args - Arguments to filter SiteTemplateDataDefs to delete.
     * @example
     * // Delete a few SiteTemplateDataDefs
     * const { count } = await prisma.siteTemplateDataDef.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SiteTemplateDataDefDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteTemplateDataDefDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SiteTemplateDataDefs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SiteTemplateDataDefs
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SiteTemplateDataDefUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SiteTemplateDataDefUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SiteTemplateDataDef.
     * @param {SiteTemplateDataDefUpsertArgs} args - Arguments to update or create a SiteTemplateDataDef.
     * @example
     * // Update or create a SiteTemplateDataDef
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.upsert({
     *   create: {
     *     // ... data to create a SiteTemplateDataDef
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SiteTemplateDataDef we want to update
     *   }
     * })
    **/
    upsert<T extends SiteTemplateDataDefUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SiteTemplateDataDefUpsertArgs<ExtArgs>>
    ): Prisma__SiteTemplateDataDefClient<$Types.GetResult<SiteTemplateDataDefPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of SiteTemplateDataDefs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefCountArgs} args - Arguments to filter SiteTemplateDataDefs to count.
     * @example
     * // Count the number of SiteTemplateDataDefs
     * const count = await prisma.siteTemplateDataDef.count({
     *   where: {
     *     // ... the filter for the SiteTemplateDataDefs we want to count
     *   }
     * })
    **/
    count<T extends SiteTemplateDataDefCountArgs>(
      args?: Subset<T, SiteTemplateDataDefCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteTemplateDataDefCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SiteTemplateDataDef.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteTemplateDataDefAggregateArgs>(args: Subset<T, SiteTemplateDataDefAggregateArgs>): Prisma.PrismaPromise<GetSiteTemplateDataDefAggregateType<T>>

    /**
     * Group by SiteTemplateDataDef.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteTemplateDataDefGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteTemplateDataDefGroupByArgs['orderBy'] }
        : { orderBy?: SiteTemplateDataDefGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteTemplateDataDefGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteTemplateDataDefGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SiteTemplateDataDef.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SiteTemplateDataDefClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    siteTemplate<T extends SiteTemplateArgs<ExtArgs> = {}>(args?: Subset<T, SiteTemplateArgs<ExtArgs>>): Prisma__SiteTemplateClient<$Types.GetResult<SiteTemplatePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SiteTemplateDataDef base type for findUnique actions
   */
  export type SiteTemplateDataDefFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude<ExtArgs> | null
    /**
     * Filter, which SiteTemplateDataDef to fetch.
     */
    where: SiteTemplateDataDefWhereUniqueInput
  }

  /**
   * SiteTemplateDataDef findUnique
   */
  export interface SiteTemplateDataDefFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SiteTemplateDataDefFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SiteTemplateDataDef findUniqueOrThrow
   */
  export type SiteTemplateDataDefFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude<ExtArgs> | null
    /**
     * Filter, which SiteTemplateDataDef to fetch.
     */
    where: SiteTemplateDataDefWhereUniqueInput
  }


  /**
   * SiteTemplateDataDef base type for findFirst actions
   */
  export type SiteTemplateDataDefFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude<ExtArgs> | null
    /**
     * Filter, which SiteTemplateDataDef to fetch.
     */
    where?: SiteTemplateDataDefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplateDataDefs to fetch.
     */
    orderBy?: Enumerable<SiteTemplateDataDefOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteTemplateDataDefs.
     */
    cursor?: SiteTemplateDataDefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplateDataDefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplateDataDefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteTemplateDataDefs.
     */
    distinct?: Enumerable<SiteTemplateDataDefScalarFieldEnum>
  }

  /**
   * SiteTemplateDataDef findFirst
   */
  export interface SiteTemplateDataDefFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SiteTemplateDataDefFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SiteTemplateDataDef findFirstOrThrow
   */
  export type SiteTemplateDataDefFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude<ExtArgs> | null
    /**
     * Filter, which SiteTemplateDataDef to fetch.
     */
    where?: SiteTemplateDataDefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplateDataDefs to fetch.
     */
    orderBy?: Enumerable<SiteTemplateDataDefOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteTemplateDataDefs.
     */
    cursor?: SiteTemplateDataDefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplateDataDefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplateDataDefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteTemplateDataDefs.
     */
    distinct?: Enumerable<SiteTemplateDataDefScalarFieldEnum>
  }


  /**
   * SiteTemplateDataDef findMany
   */
  export type SiteTemplateDataDefFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude<ExtArgs> | null
    /**
     * Filter, which SiteTemplateDataDefs to fetch.
     */
    where?: SiteTemplateDataDefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplateDataDefs to fetch.
     */
    orderBy?: Enumerable<SiteTemplateDataDefOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SiteTemplateDataDefs.
     */
    cursor?: SiteTemplateDataDefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplateDataDefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplateDataDefs.
     */
    skip?: number
    distinct?: Enumerable<SiteTemplateDataDefScalarFieldEnum>
  }


  /**
   * SiteTemplateDataDef create
   */
  export type SiteTemplateDataDefCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude<ExtArgs> | null
    /**
     * The data needed to create a SiteTemplateDataDef.
     */
    data: XOR<SiteTemplateDataDefCreateInput, SiteTemplateDataDefUncheckedCreateInput>
  }


  /**
   * SiteTemplateDataDef createMany
   */
  export type SiteTemplateDataDefCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SiteTemplateDataDefs.
     */
    data: Enumerable<SiteTemplateDataDefCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SiteTemplateDataDef update
   */
  export type SiteTemplateDataDefUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude<ExtArgs> | null
    /**
     * The data needed to update a SiteTemplateDataDef.
     */
    data: XOR<SiteTemplateDataDefUpdateInput, SiteTemplateDataDefUncheckedUpdateInput>
    /**
     * Choose, which SiteTemplateDataDef to update.
     */
    where: SiteTemplateDataDefWhereUniqueInput
  }


  /**
   * SiteTemplateDataDef updateMany
   */
  export type SiteTemplateDataDefUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SiteTemplateDataDefs.
     */
    data: XOR<SiteTemplateDataDefUpdateManyMutationInput, SiteTemplateDataDefUncheckedUpdateManyInput>
    /**
     * Filter which SiteTemplateDataDefs to update
     */
    where?: SiteTemplateDataDefWhereInput
  }


  /**
   * SiteTemplateDataDef upsert
   */
  export type SiteTemplateDataDefUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude<ExtArgs> | null
    /**
     * The filter to search for the SiteTemplateDataDef to update in case it exists.
     */
    where: SiteTemplateDataDefWhereUniqueInput
    /**
     * In case the SiteTemplateDataDef found by the `where` argument doesn't exist, create a new SiteTemplateDataDef with this data.
     */
    create: XOR<SiteTemplateDataDefCreateInput, SiteTemplateDataDefUncheckedCreateInput>
    /**
     * In case the SiteTemplateDataDef was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteTemplateDataDefUpdateInput, SiteTemplateDataDefUncheckedUpdateInput>
  }


  /**
   * SiteTemplateDataDef delete
   */
  export type SiteTemplateDataDefDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude<ExtArgs> | null
    /**
     * Filter which SiteTemplateDataDef to delete.
     */
    where: SiteTemplateDataDefWhereUniqueInput
  }


  /**
   * SiteTemplateDataDef deleteMany
   */
  export type SiteTemplateDataDefDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SiteTemplateDataDefs to delete
     */
    where?: SiteTemplateDataDefWhereInput
  }


  /**
   * SiteTemplateDataDef without action
   */
  export type SiteTemplateDataDefArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude<ExtArgs> | null
  }



  /**
   * Model Customer
   */


  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    name: number
    extendData: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    extendData?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: Enumerable<CustomerOrderByWithAggregationInput>
    by: CustomerScalarFieldEnum[]
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }


  export type CustomerGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    name: string
    extendData: JsonValue | null
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    name?: boolean
    extendData?: boolean
    site?: boolean | Customer$siteArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    name?: boolean
    extendData?: boolean
  }

  export type CustomerInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    site?: boolean | Customer$siteArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeArgs<ExtArgs>
  }


  type CustomerGetPayload<S extends boolean | null | undefined | CustomerArgs> = $Types.GetResult<CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CustomerFindManyArgs, 'select' | 'include'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CustomerFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Customer'> extends True ? Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Customer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CustomerFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Customer'> extends True ? Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Customer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CustomerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
    **/
    create<T extends CustomerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Customers.
     *     @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     *     @example
     *     // Create many Customers
     *     const customer = await prisma.customer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CustomerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
    **/
    delete<T extends CustomerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CustomerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CustomerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CustomerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
    **/
    upsert<T extends CustomerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    site<T extends Customer$siteArgs<ExtArgs> = {}>(args?: Subset<T, Customer$siteArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SitePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Customer base type for findUnique actions
   */
  export type CustomerFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUnique
   */
  export interface CustomerFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CustomerFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer base type for findFirst actions
   */
  export type CustomerFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }

  /**
   * Customer findFirst
   */
  export interface CustomerFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CustomerFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }


  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: Enumerable<CustomerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }


  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer.site
   */
  export type Customer$siteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    where?: SiteWhereInput
    orderBy?: Enumerable<SiteOrderByWithRelationAndSearchRelevanceInput>
    cursor?: SiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SiteScalarFieldEnum>
  }


  /**
   * Customer without action
   */
  export type CustomerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
  }



  /**
   * Model Site
   */


  export type AggregateSite = {
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  export type SiteAvgAggregateOutputType = {
    id: number | null
    siteTemplateId: number | null
    customerId: number | null
  }

  export type SiteSumAggregateOutputType = {
    id: number | null
    siteTemplateId: number | null
    customerId: number | null
  }

  export type SiteMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
    cosUrl: string | null
    siteTemplateId: number | null
    customerId: number | null
  }

  export type SiteMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
    cosUrl: string | null
    siteTemplateId: number | null
    customerId: number | null
  }

  export type SiteCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    name: number
    cosUrl: number
    siteTemplateId: number
    customerId: number
    slotData: number
    _all: number
  }


  export type SiteAvgAggregateInputType = {
    id?: true
    siteTemplateId?: true
    customerId?: true
  }

  export type SiteSumAggregateInputType = {
    id?: true
    siteTemplateId?: true
    customerId?: true
  }

  export type SiteMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    cosUrl?: true
    siteTemplateId?: true
    customerId?: true
  }

  export type SiteMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    cosUrl?: true
    siteTemplateId?: true
    customerId?: true
  }

  export type SiteCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    cosUrl?: true
    siteTemplateId?: true
    customerId?: true
    slotData?: true
    _all?: true
  }

  export type SiteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Site to aggregate.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sites
    **/
    _count?: true | SiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteMaxAggregateInputType
  }

  export type GetSiteAggregateType<T extends SiteAggregateArgs> = {
        [P in keyof T & keyof AggregateSite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSite[P]>
      : GetScalarType<T[P], AggregateSite[P]>
  }




  export type SiteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
    orderBy?: Enumerable<SiteOrderByWithAggregationInput>
    by: SiteScalarFieldEnum[]
    having?: SiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteCountAggregateInputType | true
    _avg?: SiteAvgAggregateInputType
    _sum?: SiteSumAggregateInputType
    _min?: SiteMinAggregateInputType
    _max?: SiteMaxAggregateInputType
  }


  export type SiteGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    name: string
    cosUrl: string
    siteTemplateId: number
    customerId: number
    slotData: JsonValue
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  type GetSiteGroupByPayload<T extends SiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteGroupByOutputType[P]>
            : GetScalarType<T[P], SiteGroupByOutputType[P]>
        }
      >
    >


  export type SiteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    name?: boolean
    cosUrl?: boolean
    siteTemplateId?: boolean
    customerId?: boolean
    slotData?: boolean
    siteTemplate?: boolean | SiteTemplateArgs<ExtArgs>
    customer?: boolean | CustomerArgs<ExtArgs>
  }, ExtArgs["result"]["site"]>

  export type SiteSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    name?: boolean
    cosUrl?: boolean
    siteTemplateId?: boolean
    customerId?: boolean
    slotData?: boolean
  }

  export type SiteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    siteTemplate?: boolean | SiteTemplateArgs<ExtArgs>
    customer?: boolean | CustomerArgs<ExtArgs>
  }


  type SiteGetPayload<S extends boolean | null | undefined | SiteArgs> = $Types.GetResult<SitePayload, S>

  type SiteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SiteFindManyArgs, 'select' | 'include'> & {
      select?: SiteCountAggregateInputType | true
    }

  export interface SiteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Site'], meta: { name: 'Site' } }
    /**
     * Find zero or one Site that matches the filter.
     * @param {SiteFindUniqueArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SiteFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SiteFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Site'> extends True ? Prisma__SiteClient<$Types.GetResult<SitePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SiteClient<$Types.GetResult<SitePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Site that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SiteFindUniqueOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SiteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SiteClient<$Types.GetResult<SitePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Site that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SiteFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SiteFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Site'> extends True ? Prisma__SiteClient<$Types.GetResult<SitePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SiteClient<$Types.GetResult<SitePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Site that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SiteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SiteClient<$Types.GetResult<SitePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Sites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sites
     * const sites = await prisma.site.findMany()
     * 
     * // Get first 10 Sites
     * const sites = await prisma.site.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteWithIdOnly = await prisma.site.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SiteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SitePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Site.
     * @param {SiteCreateArgs} args - Arguments to create a Site.
     * @example
     * // Create one Site
     * const Site = await prisma.site.create({
     *   data: {
     *     // ... data to create a Site
     *   }
     * })
     * 
    **/
    create<T extends SiteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SiteCreateArgs<ExtArgs>>
    ): Prisma__SiteClient<$Types.GetResult<SitePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Sites.
     *     @param {SiteCreateManyArgs} args - Arguments to create many Sites.
     *     @example
     *     // Create many Sites
     *     const site = await prisma.site.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SiteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Site.
     * @param {SiteDeleteArgs} args - Arguments to delete one Site.
     * @example
     * // Delete one Site
     * const Site = await prisma.site.delete({
     *   where: {
     *     // ... filter to delete one Site
     *   }
     * })
     * 
    **/
    delete<T extends SiteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SiteDeleteArgs<ExtArgs>>
    ): Prisma__SiteClient<$Types.GetResult<SitePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Site.
     * @param {SiteUpdateArgs} args - Arguments to update one Site.
     * @example
     * // Update one Site
     * const site = await prisma.site.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SiteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SiteUpdateArgs<ExtArgs>>
    ): Prisma__SiteClient<$Types.GetResult<SitePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Sites.
     * @param {SiteDeleteManyArgs} args - Arguments to filter Sites to delete.
     * @example
     * // Delete a few Sites
     * const { count } = await prisma.site.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SiteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SiteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sites
     * const site = await prisma.site.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SiteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SiteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Site.
     * @param {SiteUpsertArgs} args - Arguments to update or create a Site.
     * @example
     * // Update or create a Site
     * const site = await prisma.site.upsert({
     *   create: {
     *     // ... data to create a Site
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Site we want to update
     *   }
     * })
    **/
    upsert<T extends SiteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SiteUpsertArgs<ExtArgs>>
    ): Prisma__SiteClient<$Types.GetResult<SitePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCountArgs} args - Arguments to filter Sites to count.
     * @example
     * // Count the number of Sites
     * const count = await prisma.site.count({
     *   where: {
     *     // ... the filter for the Sites we want to count
     *   }
     * })
    **/
    count<T extends SiteCountArgs>(
      args?: Subset<T, SiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteAggregateArgs>(args: Subset<T, SiteAggregateArgs>): Prisma.PrismaPromise<GetSiteAggregateType<T>>

    /**
     * Group by Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteGroupByArgs['orderBy'] }
        : { orderBy?: SiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Site.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SiteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    siteTemplate<T extends SiteTemplateArgs<ExtArgs> = {}>(args?: Subset<T, SiteTemplateArgs<ExtArgs>>): Prisma__SiteTemplateClient<$Types.GetResult<SiteTemplatePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    customer<T extends CustomerArgs<ExtArgs> = {}>(args?: Subset<T, CustomerArgs<ExtArgs>>): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Site base type for findUnique actions
   */
  export type SiteFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site findUnique
   */
  export interface SiteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SiteFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Site findUniqueOrThrow
   */
  export type SiteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site base type for findFirst actions
   */
  export type SiteFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: Enumerable<SiteScalarFieldEnum>
  }

  /**
   * Site findFirst
   */
  export interface SiteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SiteFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Site findFirstOrThrow
   */
  export type SiteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: Enumerable<SiteScalarFieldEnum>
  }


  /**
   * Site findMany
   */
  export type SiteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Sites to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    distinct?: Enumerable<SiteScalarFieldEnum>
  }


  /**
   * Site create
   */
  export type SiteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The data needed to create a Site.
     */
    data: XOR<SiteCreateInput, SiteUncheckedCreateInput>
  }


  /**
   * Site createMany
   */
  export type SiteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sites.
     */
    data: Enumerable<SiteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Site update
   */
  export type SiteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The data needed to update a Site.
     */
    data: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
    /**
     * Choose, which Site to update.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site updateMany
   */
  export type SiteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sites.
     */
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyInput>
    /**
     * Filter which Sites to update
     */
    where?: SiteWhereInput
  }


  /**
   * Site upsert
   */
  export type SiteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The filter to search for the Site to update in case it exists.
     */
    where: SiteWhereUniqueInput
    /**
     * In case the Site found by the `where` argument doesn't exist, create a new Site with this data.
     */
    create: XOR<SiteCreateInput, SiteUncheckedCreateInput>
    /**
     * In case the Site was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
  }


  /**
   * Site delete
   */
  export type SiteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter which Site to delete.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site deleteMany
   */
  export type SiteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sites to delete
     */
    where?: SiteWhereInput
  }


  /**
   * Site without action
   */
  export type SiteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude<ExtArgs> | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    projects?: boolean | User$projectsArgs<ExtArgs>
    links?: boolean | User$linksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    projects?: boolean | User$projectsArgs<ExtArgs>
    links?: boolean | User$linksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findMany', never>| Null>;

    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    projects<T extends User$projectsArgs<ExtArgs> = {}>(args?: Subset<T, User$projectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ProjectUsersPayload<ExtArgs>, T, 'findMany', never>| Null>;

    links<T extends User$linksArgs<ExtArgs> = {}>(args?: Subset<T, User$linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<LinkPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithRelationAndSearchRelevanceInput>
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithRelationAndSearchRelevanceInput>
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * User.projects
   */
  export type User$projectsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectUsers
     */
    select?: ProjectUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectUsersInclude<ExtArgs> | null
    where?: ProjectUsersWhereInput
    orderBy?: Enumerable<ProjectUsersOrderByWithRelationAndSearchRelevanceInput>
    cursor?: ProjectUsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProjectUsersScalarFieldEnum>
  }


  /**
   * User.links
   */
  export type User$linksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
    where?: LinkWhereInput
    orderBy?: Enumerable<LinkOrderByWithRelationAndSearchRelevanceInput>
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LinkScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Account
   */


  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    refresh_token_expires_in: number | null
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    refresh_token_expires_in: number | null
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    refresh_token_expires_in: number | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    refresh_token_expires_in: number | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    refresh_token_expires_in: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    refresh_token_expires_in?: true
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    refresh_token_expires_in?: true
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    refresh_token_expires_in?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    refresh_token_expires_in?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    refresh_token_expires_in?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByWithAggregationInput>
    by: AccountScalarFieldEnum[]
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }


  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    refresh_token_expires_in: number | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    refresh_token_expires_in?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    refresh_token_expires_in?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type AccountGetPayload<S extends boolean | null | undefined | AccountArgs> = $Types.GetResult<AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Account'> extends True ? Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Account'> extends True ? Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AccountPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>
    ): Prisma__AccountClient<$Types.GetResult<AccountPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Account base type for findUnique actions
   */
  export type AccountFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUnique
   */
  export interface AccountFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AccountFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account base type for findFirst actions
   */
  export type AccountFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }

  /**
   * Account findFirst
   */
  export interface AccountFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AccountFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: Enumerable<AccountOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: Enumerable<AccountCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: SessionScalarFieldEnum[]
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionArgs> = $Types.GetResult<SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SessionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Types.GetResult<SessionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUnique
   */
  export interface SessionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SessionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session findFirst
   */
  export interface SessionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SessionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: Enumerable<SessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SessionInclude<ExtArgs> | null
  }



  /**
   * Model VerificationToken
   */


  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: Enumerable<VerificationTokenOrderByWithAggregationInput>
    by: VerificationTokenScalarFieldEnum[]
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }


  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }


  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenArgs> = $Types.GetResult<VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationTokenFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'VerificationToken'> extends True ? Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one VerificationToken that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationTokenFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'VerificationToken'> extends True ? Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
    **/
    findMany<T extends VerificationTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
    **/
    create<T extends VerificationTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many VerificationTokens.
     *     @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     *     @example
     *     // Create many VerificationTokens
     *     const verificationToken = await prisma.verificationToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerificationTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends VerificationTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Types.GetResult<VerificationTokenPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * VerificationToken base type for findUnique actions
   */
  export type VerificationTokenFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUnique
   */
  export interface VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VerificationTokenFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken base type for findFirst actions
   */
  export type VerificationTokenFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }

  /**
   * VerificationToken findFirst
   */
  export interface VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VerificationTokenFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }


  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: Enumerable<VerificationTokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }


  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken without action
   */
  export type VerificationTokenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
  }



  /**
   * Model Project
   */


  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    usage: number | null
    usageLimit: number | null
    billingCycleStart: number | null
  }

  export type ProjectSumAggregateOutputType = {
    usage: number | null
    usageLimit: number | null
    billingCycleStart: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    logo: string | null
    password: string | null
    type: string | null
    usage: number | null
    usageLimit: number | null
    plan: string | null
    stripeId: string | null
    billingCycleStart: number | null
    region: string | null
    endpoint: string | null
    bucket: string | null
    useHost: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    logo: string | null
    password: string | null
    type: string | null
    usage: number | null
    usageLimit: number | null
    plan: string | null
    stripeId: string | null
    billingCycleStart: number | null
    region: string | null
    endpoint: string | null
    bucket: string | null
    useHost: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    logo: number
    password: number
    type: number
    usage: number
    usageLimit: number
    plan: number
    stripeId: number
    billingCycleStart: number
    region: number
    endpoint: number
    bucket: number
    useHost: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    usage?: true
    usageLimit?: true
    billingCycleStart?: true
  }

  export type ProjectSumAggregateInputType = {
    usage?: true
    usageLimit?: true
    billingCycleStart?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    password?: true
    type?: true
    usage?: true
    usageLimit?: true
    plan?: true
    stripeId?: true
    billingCycleStart?: true
    region?: true
    endpoint?: true
    bucket?: true
    useHost?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    password?: true
    type?: true
    usage?: true
    usageLimit?: true
    plan?: true
    stripeId?: true
    billingCycleStart?: true
    region?: true
    endpoint?: true
    bucket?: true
    useHost?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    logo?: true
    password?: true
    type?: true
    usage?: true
    usageLimit?: true
    plan?: true
    stripeId?: true
    billingCycleStart?: true
    region?: true
    endpoint?: true
    bucket?: true
    useHost?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: Enumerable<ProjectOrderByWithAggregationInput>
    by: ProjectScalarFieldEnum[]
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }


  export type ProjectGroupByOutputType = {
    id: string
    name: string
    slug: string
    logo: string | null
    password: string | null
    type: string
    usage: number
    usageLimit: number
    plan: string
    stripeId: string | null
    billingCycleStart: number | null
    region: string | null
    endpoint: string | null
    bucket: string | null
    useHost: string | null
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    password?: boolean
    type?: boolean
    usage?: boolean
    usageLimit?: boolean
    plan?: boolean
    stripeId?: boolean
    billingCycleStart?: boolean
    region?: boolean
    endpoint?: boolean
    bucket?: boolean
    useHost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    users?: boolean | Project$usersArgs<ExtArgs>
    invites?: boolean | Project$invitesArgs<ExtArgs>
    sentEmails?: boolean | Project$sentEmailsArgs<ExtArgs>
    domains?: boolean | Project$domainsArgs<ExtArgs>
    links?: boolean | Project$linksArgs<ExtArgs>
    tags?: boolean | Project$tagsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    logo?: boolean
    password?: boolean
    type?: boolean
    usage?: boolean
    usageLimit?: boolean
    plan?: boolean
    stripeId?: boolean
    billingCycleStart?: boolean
    region?: boolean
    endpoint?: boolean
    bucket?: boolean
    useHost?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    users?: boolean | Project$usersArgs<ExtArgs>
    invites?: boolean | Project$invitesArgs<ExtArgs>
    sentEmails?: boolean | Project$sentEmailsArgs<ExtArgs>
    domains?: boolean | Project$domainsArgs<ExtArgs>
    links?: boolean | Project$linksArgs<ExtArgs>
    tags?: boolean | Project$tagsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeArgs<ExtArgs>
  }


  type ProjectGetPayload<S extends boolean | null | undefined | ProjectArgs> = $Types.GetResult<ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Project'> extends True ? Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Project'> extends True ? Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjectFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
    **/
    create<T extends ProjectCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Projects.
     *     @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     *     @example
     *     // Create many Projects
     *     const project = await prisma.project.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>
    ): Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    users<T extends Project$usersArgs<ExtArgs> = {}>(args?: Subset<T, Project$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ProjectUsersPayload<ExtArgs>, T, 'findMany', never>| Null>;

    invites<T extends Project$invitesArgs<ExtArgs> = {}>(args?: Subset<T, Project$invitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ProjectInvitePayload<ExtArgs>, T, 'findMany', never>| Null>;

    sentEmails<T extends Project$sentEmailsArgs<ExtArgs> = {}>(args?: Subset<T, Project$sentEmailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SentEmailPayload<ExtArgs>, T, 'findMany', never>| Null>;

    domains<T extends Project$domainsArgs<ExtArgs> = {}>(args?: Subset<T, Project$domainsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<DomainPayload<ExtArgs>, T, 'findMany', never>| Null>;

    links<T extends Project$linksArgs<ExtArgs> = {}>(args?: Subset<T, Project$linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<LinkPayload<ExtArgs>, T, 'findMany', never>| Null>;

    tags<T extends Project$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Project$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<TagPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Project base type for findUnique actions
   */
  export type ProjectFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUnique
   */
  export interface ProjectFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProjectFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project base type for findFirst actions
   */
  export type ProjectFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }

  /**
   * Project findFirst
   */
  export interface ProjectFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProjectFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: Enumerable<ProjectOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }


  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: Enumerable<ProjectCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }


  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }


  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }


  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }


  /**
   * Project.users
   */
  export type Project$usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectUsers
     */
    select?: ProjectUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectUsersInclude<ExtArgs> | null
    where?: ProjectUsersWhereInput
    orderBy?: Enumerable<ProjectUsersOrderByWithRelationAndSearchRelevanceInput>
    cursor?: ProjectUsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProjectUsersScalarFieldEnum>
  }


  /**
   * Project.invites
   */
  export type Project$invitesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInvite
     */
    select?: ProjectInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInviteInclude<ExtArgs> | null
    where?: ProjectInviteWhereInput
    orderBy?: Enumerable<ProjectInviteOrderByWithRelationAndSearchRelevanceInput>
    cursor?: ProjectInviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProjectInviteScalarFieldEnum>
  }


  /**
   * Project.sentEmails
   */
  export type Project$sentEmailsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SentEmailInclude<ExtArgs> | null
    where?: SentEmailWhereInput
    orderBy?: Enumerable<SentEmailOrderByWithRelationAndSearchRelevanceInput>
    cursor?: SentEmailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SentEmailScalarFieldEnum>
  }


  /**
   * Project.domains
   */
  export type Project$domainsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DomainInclude<ExtArgs> | null
    where?: DomainWhereInput
    orderBy?: Enumerable<DomainOrderByWithRelationAndSearchRelevanceInput>
    cursor?: DomainWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DomainScalarFieldEnum>
  }


  /**
   * Project.links
   */
  export type Project$linksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
    where?: LinkWhereInput
    orderBy?: Enumerable<LinkOrderByWithRelationAndSearchRelevanceInput>
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LinkScalarFieldEnum>
  }


  /**
   * Project.tags
   */
  export type Project$tagsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    where?: TagWhereInput
    orderBy?: Enumerable<TagOrderByWithRelationAndSearchRelevanceInput>
    cursor?: TagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Project without action
   */
  export type ProjectArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInclude<ExtArgs> | null
  }



  /**
   * Model ProjectInvite
   */


  export type AggregateProjectInvite = {
    _count: ProjectInviteCountAggregateOutputType | null
    _min: ProjectInviteMinAggregateOutputType | null
    _max: ProjectInviteMaxAggregateOutputType | null
  }

  export type ProjectInviteMinAggregateOutputType = {
    email: string | null
    expires: Date | null
    projectId: string | null
    createdAt: Date | null
  }

  export type ProjectInviteMaxAggregateOutputType = {
    email: string | null
    expires: Date | null
    projectId: string | null
    createdAt: Date | null
  }

  export type ProjectInviteCountAggregateOutputType = {
    email: number
    expires: number
    projectId: number
    createdAt: number
    _all: number
  }


  export type ProjectInviteMinAggregateInputType = {
    email?: true
    expires?: true
    projectId?: true
    createdAt?: true
  }

  export type ProjectInviteMaxAggregateInputType = {
    email?: true
    expires?: true
    projectId?: true
    createdAt?: true
  }

  export type ProjectInviteCountAggregateInputType = {
    email?: true
    expires?: true
    projectId?: true
    createdAt?: true
    _all?: true
  }

  export type ProjectInviteAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectInvite to aggregate.
     */
    where?: ProjectInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectInvites to fetch.
     */
    orderBy?: Enumerable<ProjectInviteOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectInvites
    **/
    _count?: true | ProjectInviteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectInviteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectInviteMaxAggregateInputType
  }

  export type GetProjectInviteAggregateType<T extends ProjectInviteAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectInvite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectInvite[P]>
      : GetScalarType<T[P], AggregateProjectInvite[P]>
  }




  export type ProjectInviteGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProjectInviteWhereInput
    orderBy?: Enumerable<ProjectInviteOrderByWithAggregationInput>
    by: ProjectInviteScalarFieldEnum[]
    having?: ProjectInviteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectInviteCountAggregateInputType | true
    _min?: ProjectInviteMinAggregateInputType
    _max?: ProjectInviteMaxAggregateInputType
  }


  export type ProjectInviteGroupByOutputType = {
    email: string
    expires: Date
    projectId: string
    createdAt: Date
    _count: ProjectInviteCountAggregateOutputType | null
    _min: ProjectInviteMinAggregateOutputType | null
    _max: ProjectInviteMaxAggregateOutputType | null
  }

  type GetProjectInviteGroupByPayload<T extends ProjectInviteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProjectInviteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectInviteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectInviteGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectInviteGroupByOutputType[P]>
        }
      >
    >


  export type ProjectInviteSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    email?: boolean
    expires?: boolean
    projectId?: boolean
    createdAt?: boolean
    project?: boolean | ProjectArgs<ExtArgs>
  }, ExtArgs["result"]["projectInvite"]>

  export type ProjectInviteSelectScalar = {
    email?: boolean
    expires?: boolean
    projectId?: boolean
    createdAt?: boolean
  }

  export type ProjectInviteInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectArgs<ExtArgs>
  }


  type ProjectInviteGetPayload<S extends boolean | null | undefined | ProjectInviteArgs> = $Types.GetResult<ProjectInvitePayload, S>

  type ProjectInviteCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProjectInviteFindManyArgs, 'select' | 'include'> & {
      select?: ProjectInviteCountAggregateInputType | true
    }

  export interface ProjectInviteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectInvite'], meta: { name: 'ProjectInvite' } }
    /**
     * Find zero or one ProjectInvite that matches the filter.
     * @param {ProjectInviteFindUniqueArgs} args - Arguments to find a ProjectInvite
     * @example
     * // Get one ProjectInvite
     * const projectInvite = await prisma.projectInvite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectInviteFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProjectInviteFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ProjectInvite'> extends True ? Prisma__ProjectInviteClient<$Types.GetResult<ProjectInvitePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ProjectInviteClient<$Types.GetResult<ProjectInvitePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ProjectInvite that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjectInviteFindUniqueOrThrowArgs} args - Arguments to find a ProjectInvite
     * @example
     * // Get one ProjectInvite
     * const projectInvite = await prisma.projectInvite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectInviteFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectInviteFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectInviteClient<$Types.GetResult<ProjectInvitePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ProjectInvite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInviteFindFirstArgs} args - Arguments to find a ProjectInvite
     * @example
     * // Get one ProjectInvite
     * const projectInvite = await prisma.projectInvite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectInviteFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProjectInviteFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ProjectInvite'> extends True ? Prisma__ProjectInviteClient<$Types.GetResult<ProjectInvitePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ProjectInviteClient<$Types.GetResult<ProjectInvitePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ProjectInvite that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInviteFindFirstOrThrowArgs} args - Arguments to find a ProjectInvite
     * @example
     * // Get one ProjectInvite
     * const projectInvite = await prisma.projectInvite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectInviteFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectInviteFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectInviteClient<$Types.GetResult<ProjectInvitePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ProjectInvites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInviteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectInvites
     * const projectInvites = await prisma.projectInvite.findMany()
     * 
     * // Get first 10 ProjectInvites
     * const projectInvites = await prisma.projectInvite.findMany({ take: 10 })
     * 
     * // Only select the `email`
     * const projectInviteWithEmailOnly = await prisma.projectInvite.findMany({ select: { email: true } })
     * 
    **/
    findMany<T extends ProjectInviteFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectInviteFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ProjectInvitePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ProjectInvite.
     * @param {ProjectInviteCreateArgs} args - Arguments to create a ProjectInvite.
     * @example
     * // Create one ProjectInvite
     * const ProjectInvite = await prisma.projectInvite.create({
     *   data: {
     *     // ... data to create a ProjectInvite
     *   }
     * })
     * 
    **/
    create<T extends ProjectInviteCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectInviteCreateArgs<ExtArgs>>
    ): Prisma__ProjectInviteClient<$Types.GetResult<ProjectInvitePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ProjectInvites.
     *     @param {ProjectInviteCreateManyArgs} args - Arguments to create many ProjectInvites.
     *     @example
     *     // Create many ProjectInvites
     *     const projectInvite = await prisma.projectInvite.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectInviteCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectInviteCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProjectInvite.
     * @param {ProjectInviteDeleteArgs} args - Arguments to delete one ProjectInvite.
     * @example
     * // Delete one ProjectInvite
     * const ProjectInvite = await prisma.projectInvite.delete({
     *   where: {
     *     // ... filter to delete one ProjectInvite
     *   }
     * })
     * 
    **/
    delete<T extends ProjectInviteDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectInviteDeleteArgs<ExtArgs>>
    ): Prisma__ProjectInviteClient<$Types.GetResult<ProjectInvitePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ProjectInvite.
     * @param {ProjectInviteUpdateArgs} args - Arguments to update one ProjectInvite.
     * @example
     * // Update one ProjectInvite
     * const projectInvite = await prisma.projectInvite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectInviteUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectInviteUpdateArgs<ExtArgs>>
    ): Prisma__ProjectInviteClient<$Types.GetResult<ProjectInvitePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ProjectInvites.
     * @param {ProjectInviteDeleteManyArgs} args - Arguments to filter ProjectInvites to delete.
     * @example
     * // Delete a few ProjectInvites
     * const { count } = await prisma.projectInvite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectInviteDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectInviteDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInviteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectInvites
     * const projectInvite = await prisma.projectInvite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectInviteUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectInviteUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectInvite.
     * @param {ProjectInviteUpsertArgs} args - Arguments to update or create a ProjectInvite.
     * @example
     * // Update or create a ProjectInvite
     * const projectInvite = await prisma.projectInvite.upsert({
     *   create: {
     *     // ... data to create a ProjectInvite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectInvite we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectInviteUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectInviteUpsertArgs<ExtArgs>>
    ): Prisma__ProjectInviteClient<$Types.GetResult<ProjectInvitePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ProjectInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInviteCountArgs} args - Arguments to filter ProjectInvites to count.
     * @example
     * // Count the number of ProjectInvites
     * const count = await prisma.projectInvite.count({
     *   where: {
     *     // ... the filter for the ProjectInvites we want to count
     *   }
     * })
    **/
    count<T extends ProjectInviteCountArgs>(
      args?: Subset<T, ProjectInviteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectInviteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectInvite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInviteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectInviteAggregateArgs>(args: Subset<T, ProjectInviteAggregateArgs>): Prisma.PrismaPromise<GetProjectInviteAggregateType<T>>

    /**
     * Group by ProjectInvite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInviteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectInviteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectInviteGroupByArgs['orderBy'] }
        : { orderBy?: ProjectInviteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectInviteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectInviteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectInvite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectInviteClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    project<T extends ProjectArgs<ExtArgs> = {}>(args?: Subset<T, ProjectArgs<ExtArgs>>): Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ProjectInvite base type for findUnique actions
   */
  export type ProjectInviteFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInvite
     */
    select?: ProjectInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInviteInclude<ExtArgs> | null
    /**
     * Filter, which ProjectInvite to fetch.
     */
    where: ProjectInviteWhereUniqueInput
  }

  /**
   * ProjectInvite findUnique
   */
  export interface ProjectInviteFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProjectInviteFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProjectInvite findUniqueOrThrow
   */
  export type ProjectInviteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInvite
     */
    select?: ProjectInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInviteInclude<ExtArgs> | null
    /**
     * Filter, which ProjectInvite to fetch.
     */
    where: ProjectInviteWhereUniqueInput
  }


  /**
   * ProjectInvite base type for findFirst actions
   */
  export type ProjectInviteFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInvite
     */
    select?: ProjectInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInviteInclude<ExtArgs> | null
    /**
     * Filter, which ProjectInvite to fetch.
     */
    where?: ProjectInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectInvites to fetch.
     */
    orderBy?: Enumerable<ProjectInviteOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectInvites.
     */
    cursor?: ProjectInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectInvites.
     */
    distinct?: Enumerable<ProjectInviteScalarFieldEnum>
  }

  /**
   * ProjectInvite findFirst
   */
  export interface ProjectInviteFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProjectInviteFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProjectInvite findFirstOrThrow
   */
  export type ProjectInviteFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInvite
     */
    select?: ProjectInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInviteInclude<ExtArgs> | null
    /**
     * Filter, which ProjectInvite to fetch.
     */
    where?: ProjectInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectInvites to fetch.
     */
    orderBy?: Enumerable<ProjectInviteOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectInvites.
     */
    cursor?: ProjectInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectInvites.
     */
    distinct?: Enumerable<ProjectInviteScalarFieldEnum>
  }


  /**
   * ProjectInvite findMany
   */
  export type ProjectInviteFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInvite
     */
    select?: ProjectInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInviteInclude<ExtArgs> | null
    /**
     * Filter, which ProjectInvites to fetch.
     */
    where?: ProjectInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectInvites to fetch.
     */
    orderBy?: Enumerable<ProjectInviteOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectInvites.
     */
    cursor?: ProjectInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectInvites.
     */
    skip?: number
    distinct?: Enumerable<ProjectInviteScalarFieldEnum>
  }


  /**
   * ProjectInvite create
   */
  export type ProjectInviteCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInvite
     */
    select?: ProjectInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInviteInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectInvite.
     */
    data: XOR<ProjectInviteCreateInput, ProjectInviteUncheckedCreateInput>
  }


  /**
   * ProjectInvite createMany
   */
  export type ProjectInviteCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectInvites.
     */
    data: Enumerable<ProjectInviteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ProjectInvite update
   */
  export type ProjectInviteUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInvite
     */
    select?: ProjectInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInviteInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectInvite.
     */
    data: XOR<ProjectInviteUpdateInput, ProjectInviteUncheckedUpdateInput>
    /**
     * Choose, which ProjectInvite to update.
     */
    where: ProjectInviteWhereUniqueInput
  }


  /**
   * ProjectInvite updateMany
   */
  export type ProjectInviteUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectInvites.
     */
    data: XOR<ProjectInviteUpdateManyMutationInput, ProjectInviteUncheckedUpdateManyInput>
    /**
     * Filter which ProjectInvites to update
     */
    where?: ProjectInviteWhereInput
  }


  /**
   * ProjectInvite upsert
   */
  export type ProjectInviteUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInvite
     */
    select?: ProjectInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInviteInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectInvite to update in case it exists.
     */
    where: ProjectInviteWhereUniqueInput
    /**
     * In case the ProjectInvite found by the `where` argument doesn't exist, create a new ProjectInvite with this data.
     */
    create: XOR<ProjectInviteCreateInput, ProjectInviteUncheckedCreateInput>
    /**
     * In case the ProjectInvite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectInviteUpdateInput, ProjectInviteUncheckedUpdateInput>
  }


  /**
   * ProjectInvite delete
   */
  export type ProjectInviteDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInvite
     */
    select?: ProjectInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInviteInclude<ExtArgs> | null
    /**
     * Filter which ProjectInvite to delete.
     */
    where: ProjectInviteWhereUniqueInput
  }


  /**
   * ProjectInvite deleteMany
   */
  export type ProjectInviteDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectInvites to delete
     */
    where?: ProjectInviteWhereInput
  }


  /**
   * ProjectInvite without action
   */
  export type ProjectInviteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInvite
     */
    select?: ProjectInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectInviteInclude<ExtArgs> | null
  }



  /**
   * Model ProjectUsers
   */


  export type AggregateProjectUsers = {
    _count: ProjectUsersCountAggregateOutputType | null
    _min: ProjectUsersMinAggregateOutputType | null
    _max: ProjectUsersMaxAggregateOutputType | null
  }

  export type ProjectUsersMinAggregateOutputType = {
    id: string | null
    role: Role | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    projectId: string | null
  }

  export type ProjectUsersMaxAggregateOutputType = {
    id: string | null
    role: Role | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    projectId: string | null
  }

  export type ProjectUsersCountAggregateOutputType = {
    id: number
    role: number
    createdAt: number
    updatedAt: number
    userId: number
    projectId: number
    _all: number
  }


  export type ProjectUsersMinAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    projectId?: true
  }

  export type ProjectUsersMaxAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    projectId?: true
  }

  export type ProjectUsersCountAggregateInputType = {
    id?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    projectId?: true
    _all?: true
  }

  export type ProjectUsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectUsers to aggregate.
     */
    where?: ProjectUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectUsers to fetch.
     */
    orderBy?: Enumerable<ProjectUsersOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectUsers
    **/
    _count?: true | ProjectUsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectUsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectUsersMaxAggregateInputType
  }

  export type GetProjectUsersAggregateType<T extends ProjectUsersAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectUsers[P]>
      : GetScalarType<T[P], AggregateProjectUsers[P]>
  }




  export type ProjectUsersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProjectUsersWhereInput
    orderBy?: Enumerable<ProjectUsersOrderByWithAggregationInput>
    by: ProjectUsersScalarFieldEnum[]
    having?: ProjectUsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectUsersCountAggregateInputType | true
    _min?: ProjectUsersMinAggregateInputType
    _max?: ProjectUsersMaxAggregateInputType
  }


  export type ProjectUsersGroupByOutputType = {
    id: string
    role: Role
    createdAt: Date
    updatedAt: Date
    userId: string
    projectId: string
    _count: ProjectUsersCountAggregateOutputType | null
    _min: ProjectUsersMinAggregateOutputType | null
    _max: ProjectUsersMaxAggregateOutputType | null
  }

  type GetProjectUsersGroupByPayload<T extends ProjectUsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProjectUsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectUsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectUsersGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectUsersGroupByOutputType[P]>
        }
      >
    >


  export type ProjectUsersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    projectId?: boolean
    user?: boolean | UserArgs<ExtArgs>
    project?: boolean | ProjectArgs<ExtArgs>
  }, ExtArgs["result"]["projectUsers"]>

  export type ProjectUsersSelectScalar = {
    id?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    projectId?: boolean
  }

  export type ProjectUsersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    project?: boolean | ProjectArgs<ExtArgs>
  }


  type ProjectUsersGetPayload<S extends boolean | null | undefined | ProjectUsersArgs> = $Types.GetResult<ProjectUsersPayload, S>

  type ProjectUsersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProjectUsersFindManyArgs, 'select' | 'include'> & {
      select?: ProjectUsersCountAggregateInputType | true
    }

  export interface ProjectUsersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectUsers'], meta: { name: 'ProjectUsers' } }
    /**
     * Find zero or one ProjectUsers that matches the filter.
     * @param {ProjectUsersFindUniqueArgs} args - Arguments to find a ProjectUsers
     * @example
     * // Get one ProjectUsers
     * const projectUsers = await prisma.projectUsers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProjectUsersFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProjectUsersFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ProjectUsers'> extends True ? Prisma__ProjectUsersClient<$Types.GetResult<ProjectUsersPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ProjectUsersClient<$Types.GetResult<ProjectUsersPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ProjectUsers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProjectUsersFindUniqueOrThrowArgs} args - Arguments to find a ProjectUsers
     * @example
     * // Get one ProjectUsers
     * const projectUsers = await prisma.projectUsers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProjectUsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectUsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectUsersClient<$Types.GetResult<ProjectUsersPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ProjectUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUsersFindFirstArgs} args - Arguments to find a ProjectUsers
     * @example
     * // Get one ProjectUsers
     * const projectUsers = await prisma.projectUsers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProjectUsersFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProjectUsersFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ProjectUsers'> extends True ? Prisma__ProjectUsersClient<$Types.GetResult<ProjectUsersPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ProjectUsersClient<$Types.GetResult<ProjectUsersPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ProjectUsers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUsersFindFirstOrThrowArgs} args - Arguments to find a ProjectUsers
     * @example
     * // Get one ProjectUsers
     * const projectUsers = await prisma.projectUsers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProjectUsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectUsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProjectUsersClient<$Types.GetResult<ProjectUsersPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ProjectUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectUsers
     * const projectUsers = await prisma.projectUsers.findMany()
     * 
     * // Get first 10 ProjectUsers
     * const projectUsers = await prisma.projectUsers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectUsersWithIdOnly = await prisma.projectUsers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProjectUsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectUsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ProjectUsersPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ProjectUsers.
     * @param {ProjectUsersCreateArgs} args - Arguments to create a ProjectUsers.
     * @example
     * // Create one ProjectUsers
     * const ProjectUsers = await prisma.projectUsers.create({
     *   data: {
     *     // ... data to create a ProjectUsers
     *   }
     * })
     * 
    **/
    create<T extends ProjectUsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUsersCreateArgs<ExtArgs>>
    ): Prisma__ProjectUsersClient<$Types.GetResult<ProjectUsersPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ProjectUsers.
     *     @param {ProjectUsersCreateManyArgs} args - Arguments to create many ProjectUsers.
     *     @example
     *     // Create many ProjectUsers
     *     const projectUsers = await prisma.projectUsers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProjectUsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectUsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProjectUsers.
     * @param {ProjectUsersDeleteArgs} args - Arguments to delete one ProjectUsers.
     * @example
     * // Delete one ProjectUsers
     * const ProjectUsers = await prisma.projectUsers.delete({
     *   where: {
     *     // ... filter to delete one ProjectUsers
     *   }
     * })
     * 
    **/
    delete<T extends ProjectUsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUsersDeleteArgs<ExtArgs>>
    ): Prisma__ProjectUsersClient<$Types.GetResult<ProjectUsersPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ProjectUsers.
     * @param {ProjectUsersUpdateArgs} args - Arguments to update one ProjectUsers.
     * @example
     * // Update one ProjectUsers
     * const projectUsers = await prisma.projectUsers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUsersUpdateArgs<ExtArgs>>
    ): Prisma__ProjectUsersClient<$Types.GetResult<ProjectUsersPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ProjectUsers.
     * @param {ProjectUsersDeleteManyArgs} args - Arguments to filter ProjectUsers to delete.
     * @example
     * // Delete a few ProjectUsers
     * const { count } = await prisma.projectUsers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectUsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProjectUsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectUsers
     * const projectUsers = await prisma.projectUsers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectUsers.
     * @param {ProjectUsersUpsertArgs} args - Arguments to update or create a ProjectUsers.
     * @example
     * // Update or create a ProjectUsers
     * const projectUsers = await prisma.projectUsers.upsert({
     *   create: {
     *     // ... data to create a ProjectUsers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectUsers we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProjectUsersUpsertArgs<ExtArgs>>
    ): Prisma__ProjectUsersClient<$Types.GetResult<ProjectUsersPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ProjectUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUsersCountArgs} args - Arguments to filter ProjectUsers to count.
     * @example
     * // Count the number of ProjectUsers
     * const count = await prisma.projectUsers.count({
     *   where: {
     *     // ... the filter for the ProjectUsers we want to count
     *   }
     * })
    **/
    count<T extends ProjectUsersCountArgs>(
      args?: Subset<T, ProjectUsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectUsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectUsersAggregateArgs>(args: Subset<T, ProjectUsersAggregateArgs>): Prisma.PrismaPromise<GetProjectUsersAggregateType<T>>

    /**
     * Group by ProjectUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectUsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectUsersGroupByArgs['orderBy'] }
        : { orderBy?: ProjectUsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectUsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectUsers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectUsersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    project<T extends ProjectArgs<ExtArgs> = {}>(args?: Subset<T, ProjectArgs<ExtArgs>>): Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ProjectUsers base type for findUnique actions
   */
  export type ProjectUsersFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectUsers
     */
    select?: ProjectUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectUsersInclude<ExtArgs> | null
    /**
     * Filter, which ProjectUsers to fetch.
     */
    where: ProjectUsersWhereUniqueInput
  }

  /**
   * ProjectUsers findUnique
   */
  export interface ProjectUsersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProjectUsersFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProjectUsers findUniqueOrThrow
   */
  export type ProjectUsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectUsers
     */
    select?: ProjectUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectUsersInclude<ExtArgs> | null
    /**
     * Filter, which ProjectUsers to fetch.
     */
    where: ProjectUsersWhereUniqueInput
  }


  /**
   * ProjectUsers base type for findFirst actions
   */
  export type ProjectUsersFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectUsers
     */
    select?: ProjectUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectUsersInclude<ExtArgs> | null
    /**
     * Filter, which ProjectUsers to fetch.
     */
    where?: ProjectUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectUsers to fetch.
     */
    orderBy?: Enumerable<ProjectUsersOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectUsers.
     */
    cursor?: ProjectUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectUsers.
     */
    distinct?: Enumerable<ProjectUsersScalarFieldEnum>
  }

  /**
   * ProjectUsers findFirst
   */
  export interface ProjectUsersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProjectUsersFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProjectUsers findFirstOrThrow
   */
  export type ProjectUsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectUsers
     */
    select?: ProjectUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectUsersInclude<ExtArgs> | null
    /**
     * Filter, which ProjectUsers to fetch.
     */
    where?: ProjectUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectUsers to fetch.
     */
    orderBy?: Enumerable<ProjectUsersOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectUsers.
     */
    cursor?: ProjectUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectUsers.
     */
    distinct?: Enumerable<ProjectUsersScalarFieldEnum>
  }


  /**
   * ProjectUsers findMany
   */
  export type ProjectUsersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectUsers
     */
    select?: ProjectUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectUsersInclude<ExtArgs> | null
    /**
     * Filter, which ProjectUsers to fetch.
     */
    where?: ProjectUsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectUsers to fetch.
     */
    orderBy?: Enumerable<ProjectUsersOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectUsers.
     */
    cursor?: ProjectUsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectUsers.
     */
    skip?: number
    distinct?: Enumerable<ProjectUsersScalarFieldEnum>
  }


  /**
   * ProjectUsers create
   */
  export type ProjectUsersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectUsers
     */
    select?: ProjectUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectUsersInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectUsers.
     */
    data: XOR<ProjectUsersCreateInput, ProjectUsersUncheckedCreateInput>
  }


  /**
   * ProjectUsers createMany
   */
  export type ProjectUsersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectUsers.
     */
    data: Enumerable<ProjectUsersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ProjectUsers update
   */
  export type ProjectUsersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectUsers
     */
    select?: ProjectUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectUsersInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectUsers.
     */
    data: XOR<ProjectUsersUpdateInput, ProjectUsersUncheckedUpdateInput>
    /**
     * Choose, which ProjectUsers to update.
     */
    where: ProjectUsersWhereUniqueInput
  }


  /**
   * ProjectUsers updateMany
   */
  export type ProjectUsersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectUsers.
     */
    data: XOR<ProjectUsersUpdateManyMutationInput, ProjectUsersUncheckedUpdateManyInput>
    /**
     * Filter which ProjectUsers to update
     */
    where?: ProjectUsersWhereInput
  }


  /**
   * ProjectUsers upsert
   */
  export type ProjectUsersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectUsers
     */
    select?: ProjectUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectUsersInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectUsers to update in case it exists.
     */
    where: ProjectUsersWhereUniqueInput
    /**
     * In case the ProjectUsers found by the `where` argument doesn't exist, create a new ProjectUsers with this data.
     */
    create: XOR<ProjectUsersCreateInput, ProjectUsersUncheckedCreateInput>
    /**
     * In case the ProjectUsers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUsersUpdateInput, ProjectUsersUncheckedUpdateInput>
  }


  /**
   * ProjectUsers delete
   */
  export type ProjectUsersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectUsers
     */
    select?: ProjectUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectUsersInclude<ExtArgs> | null
    /**
     * Filter which ProjectUsers to delete.
     */
    where: ProjectUsersWhereUniqueInput
  }


  /**
   * ProjectUsers deleteMany
   */
  export type ProjectUsersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectUsers to delete
     */
    where?: ProjectUsersWhereInput
  }


  /**
   * ProjectUsers without action
   */
  export type ProjectUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectUsers
     */
    select?: ProjectUsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProjectUsersInclude<ExtArgs> | null
  }



  /**
   * Model SentEmail
   */


  export type AggregateSentEmail = {
    _count: SentEmailCountAggregateOutputType | null
    _min: SentEmailMinAggregateOutputType | null
    _max: SentEmailMaxAggregateOutputType | null
  }

  export type SentEmailMinAggregateOutputType = {
    id: string | null
    type: EmailType | null
    createdAt: Date | null
    projectId: string | null
  }

  export type SentEmailMaxAggregateOutputType = {
    id: string | null
    type: EmailType | null
    createdAt: Date | null
    projectId: string | null
  }

  export type SentEmailCountAggregateOutputType = {
    id: number
    type: number
    createdAt: number
    projectId: number
    _all: number
  }


  export type SentEmailMinAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    projectId?: true
  }

  export type SentEmailMaxAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    projectId?: true
  }

  export type SentEmailCountAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    projectId?: true
    _all?: true
  }

  export type SentEmailAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SentEmail to aggregate.
     */
    where?: SentEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SentEmails to fetch.
     */
    orderBy?: Enumerable<SentEmailOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SentEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SentEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SentEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SentEmails
    **/
    _count?: true | SentEmailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SentEmailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SentEmailMaxAggregateInputType
  }

  export type GetSentEmailAggregateType<T extends SentEmailAggregateArgs> = {
        [P in keyof T & keyof AggregateSentEmail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSentEmail[P]>
      : GetScalarType<T[P], AggregateSentEmail[P]>
  }




  export type SentEmailGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SentEmailWhereInput
    orderBy?: Enumerable<SentEmailOrderByWithAggregationInput>
    by: SentEmailScalarFieldEnum[]
    having?: SentEmailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SentEmailCountAggregateInputType | true
    _min?: SentEmailMinAggregateInputType
    _max?: SentEmailMaxAggregateInputType
  }


  export type SentEmailGroupByOutputType = {
    id: string
    type: EmailType
    createdAt: Date
    projectId: string | null
    _count: SentEmailCountAggregateOutputType | null
    _min: SentEmailMinAggregateOutputType | null
    _max: SentEmailMaxAggregateOutputType | null
  }

  type GetSentEmailGroupByPayload<T extends SentEmailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SentEmailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SentEmailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SentEmailGroupByOutputType[P]>
            : GetScalarType<T[P], SentEmailGroupByOutputType[P]>
        }
      >
    >


  export type SentEmailSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    createdAt?: boolean
    projectId?: boolean
    project?: boolean | ProjectArgs<ExtArgs>
  }, ExtArgs["result"]["sentEmail"]>

  export type SentEmailSelectScalar = {
    id?: boolean
    type?: boolean
    createdAt?: boolean
    projectId?: boolean
  }

  export type SentEmailInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectArgs<ExtArgs>
  }


  type SentEmailGetPayload<S extends boolean | null | undefined | SentEmailArgs> = $Types.GetResult<SentEmailPayload, S>

  type SentEmailCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SentEmailFindManyArgs, 'select' | 'include'> & {
      select?: SentEmailCountAggregateInputType | true
    }

  export interface SentEmailDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SentEmail'], meta: { name: 'SentEmail' } }
    /**
     * Find zero or one SentEmail that matches the filter.
     * @param {SentEmailFindUniqueArgs} args - Arguments to find a SentEmail
     * @example
     * // Get one SentEmail
     * const sentEmail = await prisma.sentEmail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SentEmailFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SentEmailFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SentEmail'> extends True ? Prisma__SentEmailClient<$Types.GetResult<SentEmailPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SentEmailClient<$Types.GetResult<SentEmailPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one SentEmail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SentEmailFindUniqueOrThrowArgs} args - Arguments to find a SentEmail
     * @example
     * // Get one SentEmail
     * const sentEmail = await prisma.sentEmail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SentEmailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SentEmailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SentEmailClient<$Types.GetResult<SentEmailPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first SentEmail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailFindFirstArgs} args - Arguments to find a SentEmail
     * @example
     * // Get one SentEmail
     * const sentEmail = await prisma.sentEmail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SentEmailFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SentEmailFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SentEmail'> extends True ? Prisma__SentEmailClient<$Types.GetResult<SentEmailPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SentEmailClient<$Types.GetResult<SentEmailPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first SentEmail that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailFindFirstOrThrowArgs} args - Arguments to find a SentEmail
     * @example
     * // Get one SentEmail
     * const sentEmail = await prisma.sentEmail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SentEmailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SentEmailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SentEmailClient<$Types.GetResult<SentEmailPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more SentEmails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SentEmails
     * const sentEmails = await prisma.sentEmail.findMany()
     * 
     * // Get first 10 SentEmails
     * const sentEmails = await prisma.sentEmail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sentEmailWithIdOnly = await prisma.sentEmail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SentEmailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SentEmailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SentEmailPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a SentEmail.
     * @param {SentEmailCreateArgs} args - Arguments to create a SentEmail.
     * @example
     * // Create one SentEmail
     * const SentEmail = await prisma.sentEmail.create({
     *   data: {
     *     // ... data to create a SentEmail
     *   }
     * })
     * 
    **/
    create<T extends SentEmailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SentEmailCreateArgs<ExtArgs>>
    ): Prisma__SentEmailClient<$Types.GetResult<SentEmailPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many SentEmails.
     *     @param {SentEmailCreateManyArgs} args - Arguments to create many SentEmails.
     *     @example
     *     // Create many SentEmails
     *     const sentEmail = await prisma.sentEmail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SentEmailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SentEmailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SentEmail.
     * @param {SentEmailDeleteArgs} args - Arguments to delete one SentEmail.
     * @example
     * // Delete one SentEmail
     * const SentEmail = await prisma.sentEmail.delete({
     *   where: {
     *     // ... filter to delete one SentEmail
     *   }
     * })
     * 
    **/
    delete<T extends SentEmailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SentEmailDeleteArgs<ExtArgs>>
    ): Prisma__SentEmailClient<$Types.GetResult<SentEmailPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one SentEmail.
     * @param {SentEmailUpdateArgs} args - Arguments to update one SentEmail.
     * @example
     * // Update one SentEmail
     * const sentEmail = await prisma.sentEmail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SentEmailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SentEmailUpdateArgs<ExtArgs>>
    ): Prisma__SentEmailClient<$Types.GetResult<SentEmailPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more SentEmails.
     * @param {SentEmailDeleteManyArgs} args - Arguments to filter SentEmails to delete.
     * @example
     * // Delete a few SentEmails
     * const { count } = await prisma.sentEmail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SentEmailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SentEmailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SentEmails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SentEmails
     * const sentEmail = await prisma.sentEmail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SentEmailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SentEmailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SentEmail.
     * @param {SentEmailUpsertArgs} args - Arguments to update or create a SentEmail.
     * @example
     * // Update or create a SentEmail
     * const sentEmail = await prisma.sentEmail.upsert({
     *   create: {
     *     // ... data to create a SentEmail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SentEmail we want to update
     *   }
     * })
    **/
    upsert<T extends SentEmailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SentEmailUpsertArgs<ExtArgs>>
    ): Prisma__SentEmailClient<$Types.GetResult<SentEmailPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of SentEmails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailCountArgs} args - Arguments to filter SentEmails to count.
     * @example
     * // Count the number of SentEmails
     * const count = await prisma.sentEmail.count({
     *   where: {
     *     // ... the filter for the SentEmails we want to count
     *   }
     * })
    **/
    count<T extends SentEmailCountArgs>(
      args?: Subset<T, SentEmailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SentEmailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SentEmail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SentEmailAggregateArgs>(args: Subset<T, SentEmailAggregateArgs>): Prisma.PrismaPromise<GetSentEmailAggregateType<T>>

    /**
     * Group by SentEmail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SentEmailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SentEmailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SentEmailGroupByArgs['orderBy'] }
        : { orderBy?: SentEmailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SentEmailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSentEmailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SentEmail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SentEmailClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    project<T extends ProjectArgs<ExtArgs> = {}>(args?: Subset<T, ProjectArgs<ExtArgs>>): Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SentEmail base type for findUnique actions
   */
  export type SentEmailFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SentEmailInclude<ExtArgs> | null
    /**
     * Filter, which SentEmail to fetch.
     */
    where: SentEmailWhereUniqueInput
  }

  /**
   * SentEmail findUnique
   */
  export interface SentEmailFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SentEmailFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SentEmail findUniqueOrThrow
   */
  export type SentEmailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SentEmailInclude<ExtArgs> | null
    /**
     * Filter, which SentEmail to fetch.
     */
    where: SentEmailWhereUniqueInput
  }


  /**
   * SentEmail base type for findFirst actions
   */
  export type SentEmailFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SentEmailInclude<ExtArgs> | null
    /**
     * Filter, which SentEmail to fetch.
     */
    where?: SentEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SentEmails to fetch.
     */
    orderBy?: Enumerable<SentEmailOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SentEmails.
     */
    cursor?: SentEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SentEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SentEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SentEmails.
     */
    distinct?: Enumerable<SentEmailScalarFieldEnum>
  }

  /**
   * SentEmail findFirst
   */
  export interface SentEmailFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SentEmailFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SentEmail findFirstOrThrow
   */
  export type SentEmailFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SentEmailInclude<ExtArgs> | null
    /**
     * Filter, which SentEmail to fetch.
     */
    where?: SentEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SentEmails to fetch.
     */
    orderBy?: Enumerable<SentEmailOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SentEmails.
     */
    cursor?: SentEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SentEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SentEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SentEmails.
     */
    distinct?: Enumerable<SentEmailScalarFieldEnum>
  }


  /**
   * SentEmail findMany
   */
  export type SentEmailFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SentEmailInclude<ExtArgs> | null
    /**
     * Filter, which SentEmails to fetch.
     */
    where?: SentEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SentEmails to fetch.
     */
    orderBy?: Enumerable<SentEmailOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SentEmails.
     */
    cursor?: SentEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SentEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SentEmails.
     */
    skip?: number
    distinct?: Enumerable<SentEmailScalarFieldEnum>
  }


  /**
   * SentEmail create
   */
  export type SentEmailCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SentEmailInclude<ExtArgs> | null
    /**
     * The data needed to create a SentEmail.
     */
    data: XOR<SentEmailCreateInput, SentEmailUncheckedCreateInput>
  }


  /**
   * SentEmail createMany
   */
  export type SentEmailCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SentEmails.
     */
    data: Enumerable<SentEmailCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SentEmail update
   */
  export type SentEmailUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SentEmailInclude<ExtArgs> | null
    /**
     * The data needed to update a SentEmail.
     */
    data: XOR<SentEmailUpdateInput, SentEmailUncheckedUpdateInput>
    /**
     * Choose, which SentEmail to update.
     */
    where: SentEmailWhereUniqueInput
  }


  /**
   * SentEmail updateMany
   */
  export type SentEmailUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SentEmails.
     */
    data: XOR<SentEmailUpdateManyMutationInput, SentEmailUncheckedUpdateManyInput>
    /**
     * Filter which SentEmails to update
     */
    where?: SentEmailWhereInput
  }


  /**
   * SentEmail upsert
   */
  export type SentEmailUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SentEmailInclude<ExtArgs> | null
    /**
     * The filter to search for the SentEmail to update in case it exists.
     */
    where: SentEmailWhereUniqueInput
    /**
     * In case the SentEmail found by the `where` argument doesn't exist, create a new SentEmail with this data.
     */
    create: XOR<SentEmailCreateInput, SentEmailUncheckedCreateInput>
    /**
     * In case the SentEmail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SentEmailUpdateInput, SentEmailUncheckedUpdateInput>
  }


  /**
   * SentEmail delete
   */
  export type SentEmailDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SentEmailInclude<ExtArgs> | null
    /**
     * Filter which SentEmail to delete.
     */
    where: SentEmailWhereUniqueInput
  }


  /**
   * SentEmail deleteMany
   */
  export type SentEmailDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SentEmails to delete
     */
    where?: SentEmailWhereInput
  }


  /**
   * SentEmail without action
   */
  export type SentEmailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SentEmail
     */
    select?: SentEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SentEmailInclude<ExtArgs> | null
  }



  /**
   * Model Domain
   */


  export type AggregateDomain = {
    _count: DomainCountAggregateOutputType | null
    _min: DomainMinAggregateOutputType | null
    _max: DomainMaxAggregateOutputType | null
  }

  export type DomainMinAggregateOutputType = {
    id: string | null
    slug: string | null
    verified: boolean | null
    target: string | null
    type: string | null
    description: string | null
    projectId: string | null
    primary: boolean | null
    lastChecked: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DomainMaxAggregateOutputType = {
    id: string | null
    slug: string | null
    verified: boolean | null
    target: string | null
    type: string | null
    description: string | null
    projectId: string | null
    primary: boolean | null
    lastChecked: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DomainCountAggregateOutputType = {
    id: number
    slug: number
    verified: number
    target: number
    type: number
    description: number
    projectId: number
    primary: number
    lastChecked: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DomainMinAggregateInputType = {
    id?: true
    slug?: true
    verified?: true
    target?: true
    type?: true
    description?: true
    projectId?: true
    primary?: true
    lastChecked?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DomainMaxAggregateInputType = {
    id?: true
    slug?: true
    verified?: true
    target?: true
    type?: true
    description?: true
    projectId?: true
    primary?: true
    lastChecked?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DomainCountAggregateInputType = {
    id?: true
    slug?: true
    verified?: true
    target?: true
    type?: true
    description?: true
    projectId?: true
    primary?: true
    lastChecked?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DomainAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Domain to aggregate.
     */
    where?: DomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     */
    orderBy?: Enumerable<DomainOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Domains
    **/
    _count?: true | DomainCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DomainMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DomainMaxAggregateInputType
  }

  export type GetDomainAggregateType<T extends DomainAggregateArgs> = {
        [P in keyof T & keyof AggregateDomain]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDomain[P]>
      : GetScalarType<T[P], AggregateDomain[P]>
  }




  export type DomainGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DomainWhereInput
    orderBy?: Enumerable<DomainOrderByWithAggregationInput>
    by: DomainScalarFieldEnum[]
    having?: DomainScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DomainCountAggregateInputType | true
    _min?: DomainMinAggregateInputType
    _max?: DomainMaxAggregateInputType
  }


  export type DomainGroupByOutputType = {
    id: string
    slug: string
    verified: boolean
    target: string | null
    type: string
    description: string | null
    projectId: string | null
    primary: boolean
    lastChecked: Date
    createdAt: Date
    updatedAt: Date
    _count: DomainCountAggregateOutputType | null
    _min: DomainMinAggregateOutputType | null
    _max: DomainMaxAggregateOutputType | null
  }

  type GetDomainGroupByPayload<T extends DomainGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DomainGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DomainGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DomainGroupByOutputType[P]>
            : GetScalarType<T[P], DomainGroupByOutputType[P]>
        }
      >
    >


  export type DomainSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    slug?: boolean
    verified?: boolean
    target?: boolean
    type?: boolean
    description?: boolean
    projectId?: boolean
    primary?: boolean
    lastChecked?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    project?: boolean | ProjectArgs<ExtArgs>
    links?: boolean | Domain$linksArgs<ExtArgs>
    _count?: boolean | DomainCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["domain"]>

  export type DomainSelectScalar = {
    id?: boolean
    slug?: boolean
    verified?: boolean
    target?: boolean
    type?: boolean
    description?: boolean
    projectId?: boolean
    primary?: boolean
    lastChecked?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DomainInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectArgs<ExtArgs>
    links?: boolean | Domain$linksArgs<ExtArgs>
    _count?: boolean | DomainCountOutputTypeArgs<ExtArgs>
  }


  type DomainGetPayload<S extends boolean | null | undefined | DomainArgs> = $Types.GetResult<DomainPayload, S>

  type DomainCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DomainFindManyArgs, 'select' | 'include'> & {
      select?: DomainCountAggregateInputType | true
    }

  export interface DomainDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Domain'], meta: { name: 'Domain' } }
    /**
     * Find zero or one Domain that matches the filter.
     * @param {DomainFindUniqueArgs} args - Arguments to find a Domain
     * @example
     * // Get one Domain
     * const domain = await prisma.domain.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DomainFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DomainFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Domain'> extends True ? Prisma__DomainClient<$Types.GetResult<DomainPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__DomainClient<$Types.GetResult<DomainPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Domain that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DomainFindUniqueOrThrowArgs} args - Arguments to find a Domain
     * @example
     * // Get one Domain
     * const domain = await prisma.domain.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DomainFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DomainFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DomainClient<$Types.GetResult<DomainPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Domain that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainFindFirstArgs} args - Arguments to find a Domain
     * @example
     * // Get one Domain
     * const domain = await prisma.domain.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DomainFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DomainFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Domain'> extends True ? Prisma__DomainClient<$Types.GetResult<DomainPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__DomainClient<$Types.GetResult<DomainPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Domain that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainFindFirstOrThrowArgs} args - Arguments to find a Domain
     * @example
     * // Get one Domain
     * const domain = await prisma.domain.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DomainFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DomainFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DomainClient<$Types.GetResult<DomainPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Domains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Domains
     * const domains = await prisma.domain.findMany()
     * 
     * // Get first 10 Domains
     * const domains = await prisma.domain.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const domainWithIdOnly = await prisma.domain.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DomainFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DomainFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DomainPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Domain.
     * @param {DomainCreateArgs} args - Arguments to create a Domain.
     * @example
     * // Create one Domain
     * const Domain = await prisma.domain.create({
     *   data: {
     *     // ... data to create a Domain
     *   }
     * })
     * 
    **/
    create<T extends DomainCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DomainCreateArgs<ExtArgs>>
    ): Prisma__DomainClient<$Types.GetResult<DomainPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Domains.
     *     @param {DomainCreateManyArgs} args - Arguments to create many Domains.
     *     @example
     *     // Create many Domains
     *     const domain = await prisma.domain.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DomainCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DomainCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Domain.
     * @param {DomainDeleteArgs} args - Arguments to delete one Domain.
     * @example
     * // Delete one Domain
     * const Domain = await prisma.domain.delete({
     *   where: {
     *     // ... filter to delete one Domain
     *   }
     * })
     * 
    **/
    delete<T extends DomainDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DomainDeleteArgs<ExtArgs>>
    ): Prisma__DomainClient<$Types.GetResult<DomainPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Domain.
     * @param {DomainUpdateArgs} args - Arguments to update one Domain.
     * @example
     * // Update one Domain
     * const domain = await prisma.domain.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DomainUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DomainUpdateArgs<ExtArgs>>
    ): Prisma__DomainClient<$Types.GetResult<DomainPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Domains.
     * @param {DomainDeleteManyArgs} args - Arguments to filter Domains to delete.
     * @example
     * // Delete a few Domains
     * const { count } = await prisma.domain.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DomainDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DomainDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Domains
     * const domain = await prisma.domain.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DomainUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DomainUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Domain.
     * @param {DomainUpsertArgs} args - Arguments to update or create a Domain.
     * @example
     * // Update or create a Domain
     * const domain = await prisma.domain.upsert({
     *   create: {
     *     // ... data to create a Domain
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Domain we want to update
     *   }
     * })
    **/
    upsert<T extends DomainUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DomainUpsertArgs<ExtArgs>>
    ): Prisma__DomainClient<$Types.GetResult<DomainPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainCountArgs} args - Arguments to filter Domains to count.
     * @example
     * // Count the number of Domains
     * const count = await prisma.domain.count({
     *   where: {
     *     // ... the filter for the Domains we want to count
     *   }
     * })
    **/
    count<T extends DomainCountArgs>(
      args?: Subset<T, DomainCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DomainCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Domain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DomainAggregateArgs>(args: Subset<T, DomainAggregateArgs>): Prisma.PrismaPromise<GetDomainAggregateType<T>>

    /**
     * Group by Domain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DomainGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DomainGroupByArgs['orderBy'] }
        : { orderBy?: DomainGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DomainGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDomainGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Domain.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DomainClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    project<T extends ProjectArgs<ExtArgs> = {}>(args?: Subset<T, ProjectArgs<ExtArgs>>): Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    links<T extends Domain$linksArgs<ExtArgs> = {}>(args?: Subset<T, Domain$linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<LinkPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Domain base type for findUnique actions
   */
  export type DomainFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domain to fetch.
     */
    where: DomainWhereUniqueInput
  }

  /**
   * Domain findUnique
   */
  export interface DomainFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DomainFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Domain findUniqueOrThrow
   */
  export type DomainFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domain to fetch.
     */
    where: DomainWhereUniqueInput
  }


  /**
   * Domain base type for findFirst actions
   */
  export type DomainFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domain to fetch.
     */
    where?: DomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     */
    orderBy?: Enumerable<DomainOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Domains.
     */
    cursor?: DomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Domains.
     */
    distinct?: Enumerable<DomainScalarFieldEnum>
  }

  /**
   * Domain findFirst
   */
  export interface DomainFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DomainFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Domain findFirstOrThrow
   */
  export type DomainFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domain to fetch.
     */
    where?: DomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     */
    orderBy?: Enumerable<DomainOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Domains.
     */
    cursor?: DomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Domains.
     */
    distinct?: Enumerable<DomainScalarFieldEnum>
  }


  /**
   * Domain findMany
   */
  export type DomainFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domains to fetch.
     */
    where?: DomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     */
    orderBy?: Enumerable<DomainOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Domains.
     */
    cursor?: DomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     */
    skip?: number
    distinct?: Enumerable<DomainScalarFieldEnum>
  }


  /**
   * Domain create
   */
  export type DomainCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * The data needed to create a Domain.
     */
    data: XOR<DomainCreateInput, DomainUncheckedCreateInput>
  }


  /**
   * Domain createMany
   */
  export type DomainCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Domains.
     */
    data: Enumerable<DomainCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Domain update
   */
  export type DomainUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * The data needed to update a Domain.
     */
    data: XOR<DomainUpdateInput, DomainUncheckedUpdateInput>
    /**
     * Choose, which Domain to update.
     */
    where: DomainWhereUniqueInput
  }


  /**
   * Domain updateMany
   */
  export type DomainUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Domains.
     */
    data: XOR<DomainUpdateManyMutationInput, DomainUncheckedUpdateManyInput>
    /**
     * Filter which Domains to update
     */
    where?: DomainWhereInput
  }


  /**
   * Domain upsert
   */
  export type DomainUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * The filter to search for the Domain to update in case it exists.
     */
    where: DomainWhereUniqueInput
    /**
     * In case the Domain found by the `where` argument doesn't exist, create a new Domain with this data.
     */
    create: XOR<DomainCreateInput, DomainUncheckedCreateInput>
    /**
     * In case the Domain was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DomainUpdateInput, DomainUncheckedUpdateInput>
  }


  /**
   * Domain delete
   */
  export type DomainDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter which Domain to delete.
     */
    where: DomainWhereUniqueInput
  }


  /**
   * Domain deleteMany
   */
  export type DomainDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Domains to delete
     */
    where?: DomainWhereInput
  }


  /**
   * Domain.links
   */
  export type Domain$linksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
    where?: LinkWhereInput
    orderBy?: Enumerable<LinkOrderByWithRelationAndSearchRelevanceInput>
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LinkScalarFieldEnum>
  }


  /**
   * Domain without action
   */
  export type DomainArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DomainInclude<ExtArgs> | null
  }



  /**
   * Model Link
   */


  export type AggregateLink = {
    _count: LinkCountAggregateOutputType | null
    _avg: LinkAvgAggregateOutputType | null
    _sum: LinkSumAggregateOutputType | null
    _min: LinkMinAggregateOutputType | null
    _max: LinkMaxAggregateOutputType | null
  }

  export type LinkAvgAggregateOutputType = {
    clicks: number | null
  }

  export type LinkSumAggregateOutputType = {
    clicks: number | null
  }

  export type LinkMinAggregateOutputType = {
    id: string | null
    domain: string | null
    key: string | null
    url: string | null
    archived: boolean | null
    expiresAt: Date | null
    password: string | null
    proxy: boolean | null
    title: string | null
    description: string | null
    image: string | null
    utm_source: string | null
    utm_medium: string | null
    utm_campaign: string | null
    utm_term: string | null
    utm_content: string | null
    rewrite: boolean | null
    ios: string | null
    android: string | null
    userId: string | null
    projectId: string | null
    clicks: number | null
    publicStats: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tagId: string | null
  }

  export type LinkMaxAggregateOutputType = {
    id: string | null
    domain: string | null
    key: string | null
    url: string | null
    archived: boolean | null
    expiresAt: Date | null
    password: string | null
    proxy: boolean | null
    title: string | null
    description: string | null
    image: string | null
    utm_source: string | null
    utm_medium: string | null
    utm_campaign: string | null
    utm_term: string | null
    utm_content: string | null
    rewrite: boolean | null
    ios: string | null
    android: string | null
    userId: string | null
    projectId: string | null
    clicks: number | null
    publicStats: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    tagId: string | null
  }

  export type LinkCountAggregateOutputType = {
    id: number
    domain: number
    key: number
    url: number
    archived: number
    expiresAt: number
    password: number
    proxy: number
    title: number
    description: number
    image: number
    utm_source: number
    utm_medium: number
    utm_campaign: number
    utm_term: number
    utm_content: number
    rewrite: number
    ios: number
    android: number
    userId: number
    projectId: number
    clicks: number
    publicStats: number
    createdAt: number
    updatedAt: number
    tagId: number
    _all: number
  }


  export type LinkAvgAggregateInputType = {
    clicks?: true
  }

  export type LinkSumAggregateInputType = {
    clicks?: true
  }

  export type LinkMinAggregateInputType = {
    id?: true
    domain?: true
    key?: true
    url?: true
    archived?: true
    expiresAt?: true
    password?: true
    proxy?: true
    title?: true
    description?: true
    image?: true
    utm_source?: true
    utm_medium?: true
    utm_campaign?: true
    utm_term?: true
    utm_content?: true
    rewrite?: true
    ios?: true
    android?: true
    userId?: true
    projectId?: true
    clicks?: true
    publicStats?: true
    createdAt?: true
    updatedAt?: true
    tagId?: true
  }

  export type LinkMaxAggregateInputType = {
    id?: true
    domain?: true
    key?: true
    url?: true
    archived?: true
    expiresAt?: true
    password?: true
    proxy?: true
    title?: true
    description?: true
    image?: true
    utm_source?: true
    utm_medium?: true
    utm_campaign?: true
    utm_term?: true
    utm_content?: true
    rewrite?: true
    ios?: true
    android?: true
    userId?: true
    projectId?: true
    clicks?: true
    publicStats?: true
    createdAt?: true
    updatedAt?: true
    tagId?: true
  }

  export type LinkCountAggregateInputType = {
    id?: true
    domain?: true
    key?: true
    url?: true
    archived?: true
    expiresAt?: true
    password?: true
    proxy?: true
    title?: true
    description?: true
    image?: true
    utm_source?: true
    utm_medium?: true
    utm_campaign?: true
    utm_term?: true
    utm_content?: true
    rewrite?: true
    ios?: true
    android?: true
    userId?: true
    projectId?: true
    clicks?: true
    publicStats?: true
    createdAt?: true
    updatedAt?: true
    tagId?: true
    _all?: true
  }

  export type LinkAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Link to aggregate.
     */
    where?: LinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     */
    orderBy?: Enumerable<LinkOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Links
    **/
    _count?: true | LinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LinkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LinkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LinkMaxAggregateInputType
  }

  export type GetLinkAggregateType<T extends LinkAggregateArgs> = {
        [P in keyof T & keyof AggregateLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLink[P]>
      : GetScalarType<T[P], AggregateLink[P]>
  }




  export type LinkGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: LinkWhereInput
    orderBy?: Enumerable<LinkOrderByWithAggregationInput>
    by: LinkScalarFieldEnum[]
    having?: LinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LinkCountAggregateInputType | true
    _avg?: LinkAvgAggregateInputType
    _sum?: LinkSumAggregateInputType
    _min?: LinkMinAggregateInputType
    _max?: LinkMaxAggregateInputType
  }


  export type LinkGroupByOutputType = {
    id: string
    domain: string
    key: string
    url: string
    archived: boolean
    expiresAt: Date | null
    password: string | null
    proxy: boolean
    title: string | null
    description: string | null
    image: string | null
    utm_source: string | null
    utm_medium: string | null
    utm_campaign: string | null
    utm_term: string | null
    utm_content: string | null
    rewrite: boolean
    ios: string | null
    android: string | null
    userId: string | null
    projectId: string | null
    clicks: number
    publicStats: boolean
    createdAt: Date
    updatedAt: Date
    tagId: string | null
    _count: LinkCountAggregateOutputType | null
    _avg: LinkAvgAggregateOutputType | null
    _sum: LinkSumAggregateOutputType | null
    _min: LinkMinAggregateOutputType | null
    _max: LinkMaxAggregateOutputType | null
  }

  type GetLinkGroupByPayload<T extends LinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LinkGroupByOutputType[P]>
            : GetScalarType<T[P], LinkGroupByOutputType[P]>
        }
      >
    >


  export type LinkSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domain?: boolean
    key?: boolean
    url?: boolean
    archived?: boolean
    expiresAt?: boolean
    password?: boolean
    proxy?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    utm_source?: boolean
    utm_medium?: boolean
    utm_campaign?: boolean
    utm_term?: boolean
    utm_content?: boolean
    rewrite?: boolean
    ios?: boolean
    android?: boolean
    userId?: boolean
    projectId?: boolean
    clicks?: boolean
    publicStats?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tagId?: boolean
    user?: boolean | UserArgs<ExtArgs>
    project?: boolean | ProjectArgs<ExtArgs>
    projectDomain?: boolean | DomainArgs<ExtArgs>
    tag?: boolean | TagArgs<ExtArgs>
  }, ExtArgs["result"]["link"]>

  export type LinkSelectScalar = {
    id?: boolean
    domain?: boolean
    key?: boolean
    url?: boolean
    archived?: boolean
    expiresAt?: boolean
    password?: boolean
    proxy?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    utm_source?: boolean
    utm_medium?: boolean
    utm_campaign?: boolean
    utm_term?: boolean
    utm_content?: boolean
    rewrite?: boolean
    ios?: boolean
    android?: boolean
    userId?: boolean
    projectId?: boolean
    clicks?: boolean
    publicStats?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tagId?: boolean
  }

  export type LinkInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    project?: boolean | ProjectArgs<ExtArgs>
    projectDomain?: boolean | DomainArgs<ExtArgs>
    tag?: boolean | TagArgs<ExtArgs>
  }


  type LinkGetPayload<S extends boolean | null | undefined | LinkArgs> = $Types.GetResult<LinkPayload, S>

  type LinkCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<LinkFindManyArgs, 'select' | 'include'> & {
      select?: LinkCountAggregateInputType | true
    }

  export interface LinkDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Link'], meta: { name: 'Link' } }
    /**
     * Find zero or one Link that matches the filter.
     * @param {LinkFindUniqueArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LinkFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LinkFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Link'> extends True ? Prisma__LinkClient<$Types.GetResult<LinkPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__LinkClient<$Types.GetResult<LinkPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Link that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LinkFindUniqueOrThrowArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LinkFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LinkFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LinkClient<$Types.GetResult<LinkPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Link that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkFindFirstArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LinkFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LinkFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Link'> extends True ? Prisma__LinkClient<$Types.GetResult<LinkPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__LinkClient<$Types.GetResult<LinkPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Link that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkFindFirstOrThrowArgs} args - Arguments to find a Link
     * @example
     * // Get one Link
     * const link = await prisma.link.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LinkFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LinkFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LinkClient<$Types.GetResult<LinkPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Links that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Links
     * const links = await prisma.link.findMany()
     * 
     * // Get first 10 Links
     * const links = await prisma.link.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const linkWithIdOnly = await prisma.link.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LinkFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LinkFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<LinkPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Link.
     * @param {LinkCreateArgs} args - Arguments to create a Link.
     * @example
     * // Create one Link
     * const Link = await prisma.link.create({
     *   data: {
     *     // ... data to create a Link
     *   }
     * })
     * 
    **/
    create<T extends LinkCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LinkCreateArgs<ExtArgs>>
    ): Prisma__LinkClient<$Types.GetResult<LinkPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Links.
     *     @param {LinkCreateManyArgs} args - Arguments to create many Links.
     *     @example
     *     // Create many Links
     *     const link = await prisma.link.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LinkCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LinkCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Link.
     * @param {LinkDeleteArgs} args - Arguments to delete one Link.
     * @example
     * // Delete one Link
     * const Link = await prisma.link.delete({
     *   where: {
     *     // ... filter to delete one Link
     *   }
     * })
     * 
    **/
    delete<T extends LinkDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LinkDeleteArgs<ExtArgs>>
    ): Prisma__LinkClient<$Types.GetResult<LinkPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Link.
     * @param {LinkUpdateArgs} args - Arguments to update one Link.
     * @example
     * // Update one Link
     * const link = await prisma.link.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LinkUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LinkUpdateArgs<ExtArgs>>
    ): Prisma__LinkClient<$Types.GetResult<LinkPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Links.
     * @param {LinkDeleteManyArgs} args - Arguments to filter Links to delete.
     * @example
     * // Delete a few Links
     * const { count } = await prisma.link.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LinkDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LinkDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Links
     * const link = await prisma.link.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LinkUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LinkUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Link.
     * @param {LinkUpsertArgs} args - Arguments to update or create a Link.
     * @example
     * // Update or create a Link
     * const link = await prisma.link.upsert({
     *   create: {
     *     // ... data to create a Link
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Link we want to update
     *   }
     * })
    **/
    upsert<T extends LinkUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LinkUpsertArgs<ExtArgs>>
    ): Prisma__LinkClient<$Types.GetResult<LinkPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Links.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkCountArgs} args - Arguments to filter Links to count.
     * @example
     * // Count the number of Links
     * const count = await prisma.link.count({
     *   where: {
     *     // ... the filter for the Links we want to count
     *   }
     * })
    **/
    count<T extends LinkCountArgs>(
      args?: Subset<T, LinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Link.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LinkAggregateArgs>(args: Subset<T, LinkAggregateArgs>): Prisma.PrismaPromise<GetLinkAggregateType<T>>

    /**
     * Group by Link.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LinkGroupByArgs['orderBy'] }
        : { orderBy?: LinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Link.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LinkClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    project<T extends ProjectArgs<ExtArgs> = {}>(args?: Subset<T, ProjectArgs<ExtArgs>>): Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    projectDomain<T extends DomainArgs<ExtArgs> = {}>(args?: Subset<T, DomainArgs<ExtArgs>>): Prisma__DomainClient<$Types.GetResult<DomainPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    tag<T extends TagArgs<ExtArgs> = {}>(args?: Subset<T, TagArgs<ExtArgs>>): Prisma__TagClient<$Types.GetResult<TagPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Link base type for findUnique actions
   */
  export type LinkFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Link to fetch.
     */
    where: LinkWhereUniqueInput
  }

  /**
   * Link findUnique
   */
  export interface LinkFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends LinkFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Link findUniqueOrThrow
   */
  export type LinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Link to fetch.
     */
    where: LinkWhereUniqueInput
  }


  /**
   * Link base type for findFirst actions
   */
  export type LinkFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Link to fetch.
     */
    where?: LinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     */
    orderBy?: Enumerable<LinkOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Links.
     */
    cursor?: LinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Links.
     */
    distinct?: Enumerable<LinkScalarFieldEnum>
  }

  /**
   * Link findFirst
   */
  export interface LinkFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends LinkFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Link findFirstOrThrow
   */
  export type LinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Link to fetch.
     */
    where?: LinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     */
    orderBy?: Enumerable<LinkOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Links.
     */
    cursor?: LinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Links.
     */
    distinct?: Enumerable<LinkScalarFieldEnum>
  }


  /**
   * Link findMany
   */
  export type LinkFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter, which Links to fetch.
     */
    where?: LinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Links to fetch.
     */
    orderBy?: Enumerable<LinkOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Links.
     */
    cursor?: LinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Links from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Links.
     */
    skip?: number
    distinct?: Enumerable<LinkScalarFieldEnum>
  }


  /**
   * Link create
   */
  export type LinkCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * The data needed to create a Link.
     */
    data: XOR<LinkCreateInput, LinkUncheckedCreateInput>
  }


  /**
   * Link createMany
   */
  export type LinkCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Links.
     */
    data: Enumerable<LinkCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Link update
   */
  export type LinkUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * The data needed to update a Link.
     */
    data: XOR<LinkUpdateInput, LinkUncheckedUpdateInput>
    /**
     * Choose, which Link to update.
     */
    where: LinkWhereUniqueInput
  }


  /**
   * Link updateMany
   */
  export type LinkUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Links.
     */
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyInput>
    /**
     * Filter which Links to update
     */
    where?: LinkWhereInput
  }


  /**
   * Link upsert
   */
  export type LinkUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * The filter to search for the Link to update in case it exists.
     */
    where: LinkWhereUniqueInput
    /**
     * In case the Link found by the `where` argument doesn't exist, create a new Link with this data.
     */
    create: XOR<LinkCreateInput, LinkUncheckedCreateInput>
    /**
     * In case the Link was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LinkUpdateInput, LinkUncheckedUpdateInput>
  }


  /**
   * Link delete
   */
  export type LinkDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
    /**
     * Filter which Link to delete.
     */
    where: LinkWhereUniqueInput
  }


  /**
   * Link deleteMany
   */
  export type LinkDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Links to delete
     */
    where?: LinkWhereInput
  }


  /**
   * Link without action
   */
  export type LinkArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
  }



  /**
   * Model Tag
   */


  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
    projectId: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    color: number
    createdAt: number
    updatedAt: number
    projectId: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
    color?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
    color?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    color?: true
    createdAt?: true
    updatedAt?: true
    projectId?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: Enumerable<TagOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: Enumerable<TagOrderByWithAggregationInput>
    by: TagScalarFieldEnum[]
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }


  export type TagGroupByOutputType = {
    id: string
    name: string
    color: string
    createdAt: Date
    updatedAt: Date
    projectId: string
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
    project?: boolean | ProjectArgs<ExtArgs>
    links?: boolean | Tag$linksArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    projectId?: boolean
  }

  export type TagInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectArgs<ExtArgs>
    links?: boolean | Tag$linksArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeArgs<ExtArgs>
  }


  type TagGetPayload<S extends boolean | null | undefined | TagArgs> = $Types.GetResult<TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tag'> extends True ? Prisma__TagClient<$Types.GetResult<TagPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__TagClient<$Types.GetResult<TagPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TagClient<$Types.GetResult<TagPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tag'> extends True ? Prisma__TagClient<$Types.GetResult<TagPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__TagClient<$Types.GetResult<TagPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TagClient<$Types.GetResult<TagPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TagFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TagPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
    **/
    create<T extends TagCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TagCreateArgs<ExtArgs>>
    ): Prisma__TagClient<$Types.GetResult<TagPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Tags.
     *     @param {TagCreateManyArgs} args - Arguments to create many Tags.
     *     @example
     *     // Create many Tags
     *     const tag = await prisma.tag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TagCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
    **/
    delete<T extends TagDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TagDeleteArgs<ExtArgs>>
    ): Prisma__TagClient<$Types.GetResult<TagPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TagUpdateArgs<ExtArgs>>
    ): Prisma__TagClient<$Types.GetResult<TagPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
    **/
    upsert<T extends TagUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TagUpsertArgs<ExtArgs>>
    ): Prisma__TagClient<$Types.GetResult<TagPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    project<T extends ProjectArgs<ExtArgs> = {}>(args?: Subset<T, ProjectArgs<ExtArgs>>): Prisma__ProjectClient<$Types.GetResult<ProjectPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    links<T extends Tag$linksArgs<ExtArgs> = {}>(args?: Subset<T, Tag$linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<LinkPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Tag base type for findUnique actions
   */
  export type TagFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUnique
   */
  export interface TagFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TagFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }


  /**
   * Tag base type for findFirst actions
   */
  export type TagFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: Enumerable<TagOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: Enumerable<TagScalarFieldEnum>
  }

  /**
   * Tag findFirst
   */
  export interface TagFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TagFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: Enumerable<TagOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: Enumerable<TagOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: Enumerable<TagScalarFieldEnum>
  }


  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }


  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: Enumerable<TagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }


  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }


  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }


  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }


  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }


  /**
   * Tag.links
   */
  export type Tag$linksArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Link
     */
    select?: LinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LinkInclude<ExtArgs> | null
    where?: LinkWhereInput
    orderBy?: Enumerable<LinkOrderByWithRelationAndSearchRelevanceInput>
    cursor?: LinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LinkScalarFieldEnum>
  }


  /**
   * Tag without action
   */
  export type TagArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagInclude<ExtArgs> | null
  }



  /**
   * Model jackson_index
   */


  export type AggregateJackson_index = {
    _count: Jackson_indexCountAggregateOutputType | null
    _avg: Jackson_indexAvgAggregateOutputType | null
    _sum: Jackson_indexSumAggregateOutputType | null
    _min: Jackson_indexMinAggregateOutputType | null
    _max: Jackson_indexMaxAggregateOutputType | null
  }

  export type Jackson_indexAvgAggregateOutputType = {
    id: number | null
  }

  export type Jackson_indexSumAggregateOutputType = {
    id: number | null
  }

  export type Jackson_indexMinAggregateOutputType = {
    id: number | null
    key: string | null
    storeKey: string | null
  }

  export type Jackson_indexMaxAggregateOutputType = {
    id: number | null
    key: string | null
    storeKey: string | null
  }

  export type Jackson_indexCountAggregateOutputType = {
    id: number
    key: number
    storeKey: number
    _all: number
  }


  export type Jackson_indexAvgAggregateInputType = {
    id?: true
  }

  export type Jackson_indexSumAggregateInputType = {
    id?: true
  }

  export type Jackson_indexMinAggregateInputType = {
    id?: true
    key?: true
    storeKey?: true
  }

  export type Jackson_indexMaxAggregateInputType = {
    id?: true
    key?: true
    storeKey?: true
  }

  export type Jackson_indexCountAggregateInputType = {
    id?: true
    key?: true
    storeKey?: true
    _all?: true
  }

  export type Jackson_indexAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which jackson_index to aggregate.
     */
    where?: jackson_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jackson_indices to fetch.
     */
    orderBy?: Enumerable<jackson_indexOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: jackson_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jackson_indices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jackson_indices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned jackson_indices
    **/
    _count?: true | Jackson_indexCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Jackson_indexAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Jackson_indexSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Jackson_indexMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Jackson_indexMaxAggregateInputType
  }

  export type GetJackson_indexAggregateType<T extends Jackson_indexAggregateArgs> = {
        [P in keyof T & keyof AggregateJackson_index]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJackson_index[P]>
      : GetScalarType<T[P], AggregateJackson_index[P]>
  }




  export type Jackson_indexGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: jackson_indexWhereInput
    orderBy?: Enumerable<jackson_indexOrderByWithAggregationInput>
    by: Jackson_indexScalarFieldEnum[]
    having?: jackson_indexScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Jackson_indexCountAggregateInputType | true
    _avg?: Jackson_indexAvgAggregateInputType
    _sum?: Jackson_indexSumAggregateInputType
    _min?: Jackson_indexMinAggregateInputType
    _max?: Jackson_indexMaxAggregateInputType
  }


  export type Jackson_indexGroupByOutputType = {
    id: number
    key: string
    storeKey: string
    _count: Jackson_indexCountAggregateOutputType | null
    _avg: Jackson_indexAvgAggregateOutputType | null
    _sum: Jackson_indexSumAggregateOutputType | null
    _min: Jackson_indexMinAggregateOutputType | null
    _max: Jackson_indexMaxAggregateOutputType | null
  }

  type GetJackson_indexGroupByPayload<T extends Jackson_indexGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Jackson_indexGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Jackson_indexGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Jackson_indexGroupByOutputType[P]>
            : GetScalarType<T[P], Jackson_indexGroupByOutputType[P]>
        }
      >
    >


  export type jackson_indexSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    storeKey?: boolean
  }, ExtArgs["result"]["jackson_index"]>

  export type jackson_indexSelectScalar = {
    id?: boolean
    key?: boolean
    storeKey?: boolean
  }


  type jackson_indexGetPayload<S extends boolean | null | undefined | jackson_indexArgs> = $Types.GetResult<jackson_indexPayload, S>

  type jackson_indexCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<jackson_indexFindManyArgs, 'select' | 'include'> & {
      select?: Jackson_indexCountAggregateInputType | true
    }

  export interface jackson_indexDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['jackson_index'], meta: { name: 'jackson_index' } }
    /**
     * Find zero or one Jackson_index that matches the filter.
     * @param {jackson_indexFindUniqueArgs} args - Arguments to find a Jackson_index
     * @example
     * // Get one Jackson_index
     * const jackson_index = await prisma.jackson_index.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends jackson_indexFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, jackson_indexFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'jackson_index'> extends True ? Prisma__jackson_indexClient<$Types.GetResult<jackson_indexPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__jackson_indexClient<$Types.GetResult<jackson_indexPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Jackson_index that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {jackson_indexFindUniqueOrThrowArgs} args - Arguments to find a Jackson_index
     * @example
     * // Get one Jackson_index
     * const jackson_index = await prisma.jackson_index.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends jackson_indexFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_indexFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__jackson_indexClient<$Types.GetResult<jackson_indexPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Jackson_index that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_indexFindFirstArgs} args - Arguments to find a Jackson_index
     * @example
     * // Get one Jackson_index
     * const jackson_index = await prisma.jackson_index.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends jackson_indexFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, jackson_indexFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'jackson_index'> extends True ? Prisma__jackson_indexClient<$Types.GetResult<jackson_indexPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__jackson_indexClient<$Types.GetResult<jackson_indexPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Jackson_index that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_indexFindFirstOrThrowArgs} args - Arguments to find a Jackson_index
     * @example
     * // Get one Jackson_index
     * const jackson_index = await prisma.jackson_index.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends jackson_indexFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_indexFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__jackson_indexClient<$Types.GetResult<jackson_indexPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Jackson_indices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_indexFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jackson_indices
     * const jackson_indices = await prisma.jackson_index.findMany()
     * 
     * // Get first 10 Jackson_indices
     * const jackson_indices = await prisma.jackson_index.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jackson_indexWithIdOnly = await prisma.jackson_index.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends jackson_indexFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_indexFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<jackson_indexPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Jackson_index.
     * @param {jackson_indexCreateArgs} args - Arguments to create a Jackson_index.
     * @example
     * // Create one Jackson_index
     * const Jackson_index = await prisma.jackson_index.create({
     *   data: {
     *     // ... data to create a Jackson_index
     *   }
     * })
     * 
    **/
    create<T extends jackson_indexCreateArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_indexCreateArgs<ExtArgs>>
    ): Prisma__jackson_indexClient<$Types.GetResult<jackson_indexPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Jackson_indices.
     *     @param {jackson_indexCreateManyArgs} args - Arguments to create many Jackson_indices.
     *     @example
     *     // Create many Jackson_indices
     *     const jackson_index = await prisma.jackson_index.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends jackson_indexCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_indexCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Jackson_index.
     * @param {jackson_indexDeleteArgs} args - Arguments to delete one Jackson_index.
     * @example
     * // Delete one Jackson_index
     * const Jackson_index = await prisma.jackson_index.delete({
     *   where: {
     *     // ... filter to delete one Jackson_index
     *   }
     * })
     * 
    **/
    delete<T extends jackson_indexDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_indexDeleteArgs<ExtArgs>>
    ): Prisma__jackson_indexClient<$Types.GetResult<jackson_indexPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Jackson_index.
     * @param {jackson_indexUpdateArgs} args - Arguments to update one Jackson_index.
     * @example
     * // Update one Jackson_index
     * const jackson_index = await prisma.jackson_index.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends jackson_indexUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_indexUpdateArgs<ExtArgs>>
    ): Prisma__jackson_indexClient<$Types.GetResult<jackson_indexPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Jackson_indices.
     * @param {jackson_indexDeleteManyArgs} args - Arguments to filter Jackson_indices to delete.
     * @example
     * // Delete a few Jackson_indices
     * const { count } = await prisma.jackson_index.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends jackson_indexDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_indexDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jackson_indices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_indexUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jackson_indices
     * const jackson_index = await prisma.jackson_index.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends jackson_indexUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_indexUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jackson_index.
     * @param {jackson_indexUpsertArgs} args - Arguments to update or create a Jackson_index.
     * @example
     * // Update or create a Jackson_index
     * const jackson_index = await prisma.jackson_index.upsert({
     *   create: {
     *     // ... data to create a Jackson_index
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jackson_index we want to update
     *   }
     * })
    **/
    upsert<T extends jackson_indexUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_indexUpsertArgs<ExtArgs>>
    ): Prisma__jackson_indexClient<$Types.GetResult<jackson_indexPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Jackson_indices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_indexCountArgs} args - Arguments to filter Jackson_indices to count.
     * @example
     * // Count the number of Jackson_indices
     * const count = await prisma.jackson_index.count({
     *   where: {
     *     // ... the filter for the Jackson_indices we want to count
     *   }
     * })
    **/
    count<T extends jackson_indexCountArgs>(
      args?: Subset<T, jackson_indexCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Jackson_indexCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jackson_index.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jackson_indexAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Jackson_indexAggregateArgs>(args: Subset<T, Jackson_indexAggregateArgs>): Prisma.PrismaPromise<GetJackson_indexAggregateType<T>>

    /**
     * Group by Jackson_index.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jackson_indexGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Jackson_indexGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Jackson_indexGroupByArgs['orderBy'] }
        : { orderBy?: Jackson_indexGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Jackson_indexGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJackson_indexGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for jackson_index.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__jackson_indexClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * jackson_index base type for findUnique actions
   */
  export type jackson_indexFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_index
     */
    select?: jackson_indexSelect<ExtArgs> | null
    /**
     * Filter, which jackson_index to fetch.
     */
    where: jackson_indexWhereUniqueInput
  }

  /**
   * jackson_index findUnique
   */
  export interface jackson_indexFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends jackson_indexFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * jackson_index findUniqueOrThrow
   */
  export type jackson_indexFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_index
     */
    select?: jackson_indexSelect<ExtArgs> | null
    /**
     * Filter, which jackson_index to fetch.
     */
    where: jackson_indexWhereUniqueInput
  }


  /**
   * jackson_index base type for findFirst actions
   */
  export type jackson_indexFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_index
     */
    select?: jackson_indexSelect<ExtArgs> | null
    /**
     * Filter, which jackson_index to fetch.
     */
    where?: jackson_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jackson_indices to fetch.
     */
    orderBy?: Enumerable<jackson_indexOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jackson_indices.
     */
    cursor?: jackson_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jackson_indices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jackson_indices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jackson_indices.
     */
    distinct?: Enumerable<Jackson_indexScalarFieldEnum>
  }

  /**
   * jackson_index findFirst
   */
  export interface jackson_indexFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends jackson_indexFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * jackson_index findFirstOrThrow
   */
  export type jackson_indexFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_index
     */
    select?: jackson_indexSelect<ExtArgs> | null
    /**
     * Filter, which jackson_index to fetch.
     */
    where?: jackson_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jackson_indices to fetch.
     */
    orderBy?: Enumerable<jackson_indexOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jackson_indices.
     */
    cursor?: jackson_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jackson_indices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jackson_indices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jackson_indices.
     */
    distinct?: Enumerable<Jackson_indexScalarFieldEnum>
  }


  /**
   * jackson_index findMany
   */
  export type jackson_indexFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_index
     */
    select?: jackson_indexSelect<ExtArgs> | null
    /**
     * Filter, which jackson_indices to fetch.
     */
    where?: jackson_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jackson_indices to fetch.
     */
    orderBy?: Enumerable<jackson_indexOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing jackson_indices.
     */
    cursor?: jackson_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jackson_indices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jackson_indices.
     */
    skip?: number
    distinct?: Enumerable<Jackson_indexScalarFieldEnum>
  }


  /**
   * jackson_index create
   */
  export type jackson_indexCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_index
     */
    select?: jackson_indexSelect<ExtArgs> | null
    /**
     * The data needed to create a jackson_index.
     */
    data: XOR<jackson_indexCreateInput, jackson_indexUncheckedCreateInput>
  }


  /**
   * jackson_index createMany
   */
  export type jackson_indexCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many jackson_indices.
     */
    data: Enumerable<jackson_indexCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * jackson_index update
   */
  export type jackson_indexUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_index
     */
    select?: jackson_indexSelect<ExtArgs> | null
    /**
     * The data needed to update a jackson_index.
     */
    data: XOR<jackson_indexUpdateInput, jackson_indexUncheckedUpdateInput>
    /**
     * Choose, which jackson_index to update.
     */
    where: jackson_indexWhereUniqueInput
  }


  /**
   * jackson_index updateMany
   */
  export type jackson_indexUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update jackson_indices.
     */
    data: XOR<jackson_indexUpdateManyMutationInput, jackson_indexUncheckedUpdateManyInput>
    /**
     * Filter which jackson_indices to update
     */
    where?: jackson_indexWhereInput
  }


  /**
   * jackson_index upsert
   */
  export type jackson_indexUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_index
     */
    select?: jackson_indexSelect<ExtArgs> | null
    /**
     * The filter to search for the jackson_index to update in case it exists.
     */
    where: jackson_indexWhereUniqueInput
    /**
     * In case the jackson_index found by the `where` argument doesn't exist, create a new jackson_index with this data.
     */
    create: XOR<jackson_indexCreateInput, jackson_indexUncheckedCreateInput>
    /**
     * In case the jackson_index was found with the provided `where` argument, update it with this data.
     */
    update: XOR<jackson_indexUpdateInput, jackson_indexUncheckedUpdateInput>
  }


  /**
   * jackson_index delete
   */
  export type jackson_indexDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_index
     */
    select?: jackson_indexSelect<ExtArgs> | null
    /**
     * Filter which jackson_index to delete.
     */
    where: jackson_indexWhereUniqueInput
  }


  /**
   * jackson_index deleteMany
   */
  export type jackson_indexDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which jackson_indices to delete
     */
    where?: jackson_indexWhereInput
  }


  /**
   * jackson_index without action
   */
  export type jackson_indexArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_index
     */
    select?: jackson_indexSelect<ExtArgs> | null
  }



  /**
   * Model jackson_store
   */


  export type AggregateJackson_store = {
    _count: Jackson_storeCountAggregateOutputType | null
    _min: Jackson_storeMinAggregateOutputType | null
    _max: Jackson_storeMaxAggregateOutputType | null
  }

  export type Jackson_storeMinAggregateOutputType = {
    key: string | null
    value: string | null
    iv: string | null
    tag: string | null
    createdAt: Date | null
    modifiedAt: Date | null
  }

  export type Jackson_storeMaxAggregateOutputType = {
    key: string | null
    value: string | null
    iv: string | null
    tag: string | null
    createdAt: Date | null
    modifiedAt: Date | null
  }

  export type Jackson_storeCountAggregateOutputType = {
    key: number
    value: number
    iv: number
    tag: number
    createdAt: number
    modifiedAt: number
    _all: number
  }


  export type Jackson_storeMinAggregateInputType = {
    key?: true
    value?: true
    iv?: true
    tag?: true
    createdAt?: true
    modifiedAt?: true
  }

  export type Jackson_storeMaxAggregateInputType = {
    key?: true
    value?: true
    iv?: true
    tag?: true
    createdAt?: true
    modifiedAt?: true
  }

  export type Jackson_storeCountAggregateInputType = {
    key?: true
    value?: true
    iv?: true
    tag?: true
    createdAt?: true
    modifiedAt?: true
    _all?: true
  }

  export type Jackson_storeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which jackson_store to aggregate.
     */
    where?: jackson_storeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jackson_stores to fetch.
     */
    orderBy?: Enumerable<jackson_storeOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: jackson_storeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jackson_stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jackson_stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned jackson_stores
    **/
    _count?: true | Jackson_storeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Jackson_storeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Jackson_storeMaxAggregateInputType
  }

  export type GetJackson_storeAggregateType<T extends Jackson_storeAggregateArgs> = {
        [P in keyof T & keyof AggregateJackson_store]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJackson_store[P]>
      : GetScalarType<T[P], AggregateJackson_store[P]>
  }




  export type Jackson_storeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: jackson_storeWhereInput
    orderBy?: Enumerable<jackson_storeOrderByWithAggregationInput>
    by: Jackson_storeScalarFieldEnum[]
    having?: jackson_storeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Jackson_storeCountAggregateInputType | true
    _min?: Jackson_storeMinAggregateInputType
    _max?: Jackson_storeMaxAggregateInputType
  }


  export type Jackson_storeGroupByOutputType = {
    key: string
    value: string
    iv: string | null
    tag: string | null
    createdAt: Date
    modifiedAt: Date | null
    _count: Jackson_storeCountAggregateOutputType | null
    _min: Jackson_storeMinAggregateOutputType | null
    _max: Jackson_storeMaxAggregateOutputType | null
  }

  type GetJackson_storeGroupByPayload<T extends Jackson_storeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Jackson_storeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Jackson_storeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Jackson_storeGroupByOutputType[P]>
            : GetScalarType<T[P], Jackson_storeGroupByOutputType[P]>
        }
      >
    >


  export type jackson_storeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    value?: boolean
    iv?: boolean
    tag?: boolean
    createdAt?: boolean
    modifiedAt?: boolean
  }, ExtArgs["result"]["jackson_store"]>

  export type jackson_storeSelectScalar = {
    key?: boolean
    value?: boolean
    iv?: boolean
    tag?: boolean
    createdAt?: boolean
    modifiedAt?: boolean
  }


  type jackson_storeGetPayload<S extends boolean | null | undefined | jackson_storeArgs> = $Types.GetResult<jackson_storePayload, S>

  type jackson_storeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<jackson_storeFindManyArgs, 'select' | 'include'> & {
      select?: Jackson_storeCountAggregateInputType | true
    }

  export interface jackson_storeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['jackson_store'], meta: { name: 'jackson_store' } }
    /**
     * Find zero or one Jackson_store that matches the filter.
     * @param {jackson_storeFindUniqueArgs} args - Arguments to find a Jackson_store
     * @example
     * // Get one Jackson_store
     * const jackson_store = await prisma.jackson_store.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends jackson_storeFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, jackson_storeFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'jackson_store'> extends True ? Prisma__jackson_storeClient<$Types.GetResult<jackson_storePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__jackson_storeClient<$Types.GetResult<jackson_storePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Jackson_store that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {jackson_storeFindUniqueOrThrowArgs} args - Arguments to find a Jackson_store
     * @example
     * // Get one Jackson_store
     * const jackson_store = await prisma.jackson_store.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends jackson_storeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_storeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__jackson_storeClient<$Types.GetResult<jackson_storePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Jackson_store that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_storeFindFirstArgs} args - Arguments to find a Jackson_store
     * @example
     * // Get one Jackson_store
     * const jackson_store = await prisma.jackson_store.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends jackson_storeFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, jackson_storeFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'jackson_store'> extends True ? Prisma__jackson_storeClient<$Types.GetResult<jackson_storePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__jackson_storeClient<$Types.GetResult<jackson_storePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Jackson_store that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_storeFindFirstOrThrowArgs} args - Arguments to find a Jackson_store
     * @example
     * // Get one Jackson_store
     * const jackson_store = await prisma.jackson_store.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends jackson_storeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_storeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__jackson_storeClient<$Types.GetResult<jackson_storePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Jackson_stores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_storeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jackson_stores
     * const jackson_stores = await prisma.jackson_store.findMany()
     * 
     * // Get first 10 Jackson_stores
     * const jackson_stores = await prisma.jackson_store.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const jackson_storeWithKeyOnly = await prisma.jackson_store.findMany({ select: { key: true } })
     * 
    **/
    findMany<T extends jackson_storeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_storeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<jackson_storePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Jackson_store.
     * @param {jackson_storeCreateArgs} args - Arguments to create a Jackson_store.
     * @example
     * // Create one Jackson_store
     * const Jackson_store = await prisma.jackson_store.create({
     *   data: {
     *     // ... data to create a Jackson_store
     *   }
     * })
     * 
    **/
    create<T extends jackson_storeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_storeCreateArgs<ExtArgs>>
    ): Prisma__jackson_storeClient<$Types.GetResult<jackson_storePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Jackson_stores.
     *     @param {jackson_storeCreateManyArgs} args - Arguments to create many Jackson_stores.
     *     @example
     *     // Create many Jackson_stores
     *     const jackson_store = await prisma.jackson_store.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends jackson_storeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_storeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Jackson_store.
     * @param {jackson_storeDeleteArgs} args - Arguments to delete one Jackson_store.
     * @example
     * // Delete one Jackson_store
     * const Jackson_store = await prisma.jackson_store.delete({
     *   where: {
     *     // ... filter to delete one Jackson_store
     *   }
     * })
     * 
    **/
    delete<T extends jackson_storeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_storeDeleteArgs<ExtArgs>>
    ): Prisma__jackson_storeClient<$Types.GetResult<jackson_storePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Jackson_store.
     * @param {jackson_storeUpdateArgs} args - Arguments to update one Jackson_store.
     * @example
     * // Update one Jackson_store
     * const jackson_store = await prisma.jackson_store.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends jackson_storeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_storeUpdateArgs<ExtArgs>>
    ): Prisma__jackson_storeClient<$Types.GetResult<jackson_storePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Jackson_stores.
     * @param {jackson_storeDeleteManyArgs} args - Arguments to filter Jackson_stores to delete.
     * @example
     * // Delete a few Jackson_stores
     * const { count } = await prisma.jackson_store.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends jackson_storeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_storeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jackson_stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_storeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jackson_stores
     * const jackson_store = await prisma.jackson_store.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends jackson_storeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_storeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jackson_store.
     * @param {jackson_storeUpsertArgs} args - Arguments to update or create a Jackson_store.
     * @example
     * // Update or create a Jackson_store
     * const jackson_store = await prisma.jackson_store.upsert({
     *   create: {
     *     // ... data to create a Jackson_store
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jackson_store we want to update
     *   }
     * })
    **/
    upsert<T extends jackson_storeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_storeUpsertArgs<ExtArgs>>
    ): Prisma__jackson_storeClient<$Types.GetResult<jackson_storePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Jackson_stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_storeCountArgs} args - Arguments to filter Jackson_stores to count.
     * @example
     * // Count the number of Jackson_stores
     * const count = await prisma.jackson_store.count({
     *   where: {
     *     // ... the filter for the Jackson_stores we want to count
     *   }
     * })
    **/
    count<T extends jackson_storeCountArgs>(
      args?: Subset<T, jackson_storeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Jackson_storeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jackson_store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jackson_storeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Jackson_storeAggregateArgs>(args: Subset<T, Jackson_storeAggregateArgs>): Prisma.PrismaPromise<GetJackson_storeAggregateType<T>>

    /**
     * Group by Jackson_store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jackson_storeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Jackson_storeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Jackson_storeGroupByArgs['orderBy'] }
        : { orderBy?: Jackson_storeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Jackson_storeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJackson_storeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for jackson_store.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__jackson_storeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * jackson_store base type for findUnique actions
   */
  export type jackson_storeFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_store
     */
    select?: jackson_storeSelect<ExtArgs> | null
    /**
     * Filter, which jackson_store to fetch.
     */
    where: jackson_storeWhereUniqueInput
  }

  /**
   * jackson_store findUnique
   */
  export interface jackson_storeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends jackson_storeFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * jackson_store findUniqueOrThrow
   */
  export type jackson_storeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_store
     */
    select?: jackson_storeSelect<ExtArgs> | null
    /**
     * Filter, which jackson_store to fetch.
     */
    where: jackson_storeWhereUniqueInput
  }


  /**
   * jackson_store base type for findFirst actions
   */
  export type jackson_storeFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_store
     */
    select?: jackson_storeSelect<ExtArgs> | null
    /**
     * Filter, which jackson_store to fetch.
     */
    where?: jackson_storeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jackson_stores to fetch.
     */
    orderBy?: Enumerable<jackson_storeOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jackson_stores.
     */
    cursor?: jackson_storeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jackson_stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jackson_stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jackson_stores.
     */
    distinct?: Enumerable<Jackson_storeScalarFieldEnum>
  }

  /**
   * jackson_store findFirst
   */
  export interface jackson_storeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends jackson_storeFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * jackson_store findFirstOrThrow
   */
  export type jackson_storeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_store
     */
    select?: jackson_storeSelect<ExtArgs> | null
    /**
     * Filter, which jackson_store to fetch.
     */
    where?: jackson_storeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jackson_stores to fetch.
     */
    orderBy?: Enumerable<jackson_storeOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jackson_stores.
     */
    cursor?: jackson_storeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jackson_stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jackson_stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jackson_stores.
     */
    distinct?: Enumerable<Jackson_storeScalarFieldEnum>
  }


  /**
   * jackson_store findMany
   */
  export type jackson_storeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_store
     */
    select?: jackson_storeSelect<ExtArgs> | null
    /**
     * Filter, which jackson_stores to fetch.
     */
    where?: jackson_storeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jackson_stores to fetch.
     */
    orderBy?: Enumerable<jackson_storeOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing jackson_stores.
     */
    cursor?: jackson_storeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jackson_stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jackson_stores.
     */
    skip?: number
    distinct?: Enumerable<Jackson_storeScalarFieldEnum>
  }


  /**
   * jackson_store create
   */
  export type jackson_storeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_store
     */
    select?: jackson_storeSelect<ExtArgs> | null
    /**
     * The data needed to create a jackson_store.
     */
    data: XOR<jackson_storeCreateInput, jackson_storeUncheckedCreateInput>
  }


  /**
   * jackson_store createMany
   */
  export type jackson_storeCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many jackson_stores.
     */
    data: Enumerable<jackson_storeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * jackson_store update
   */
  export type jackson_storeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_store
     */
    select?: jackson_storeSelect<ExtArgs> | null
    /**
     * The data needed to update a jackson_store.
     */
    data: XOR<jackson_storeUpdateInput, jackson_storeUncheckedUpdateInput>
    /**
     * Choose, which jackson_store to update.
     */
    where: jackson_storeWhereUniqueInput
  }


  /**
   * jackson_store updateMany
   */
  export type jackson_storeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update jackson_stores.
     */
    data: XOR<jackson_storeUpdateManyMutationInput, jackson_storeUncheckedUpdateManyInput>
    /**
     * Filter which jackson_stores to update
     */
    where?: jackson_storeWhereInput
  }


  /**
   * jackson_store upsert
   */
  export type jackson_storeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_store
     */
    select?: jackson_storeSelect<ExtArgs> | null
    /**
     * The filter to search for the jackson_store to update in case it exists.
     */
    where: jackson_storeWhereUniqueInput
    /**
     * In case the jackson_store found by the `where` argument doesn't exist, create a new jackson_store with this data.
     */
    create: XOR<jackson_storeCreateInput, jackson_storeUncheckedCreateInput>
    /**
     * In case the jackson_store was found with the provided `where` argument, update it with this data.
     */
    update: XOR<jackson_storeUpdateInput, jackson_storeUncheckedUpdateInput>
  }


  /**
   * jackson_store delete
   */
  export type jackson_storeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_store
     */
    select?: jackson_storeSelect<ExtArgs> | null
    /**
     * Filter which jackson_store to delete.
     */
    where: jackson_storeWhereUniqueInput
  }


  /**
   * jackson_store deleteMany
   */
  export type jackson_storeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which jackson_stores to delete
     */
    where?: jackson_storeWhereInput
  }


  /**
   * jackson_store without action
   */
  export type jackson_storeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_store
     */
    select?: jackson_storeSelect<ExtArgs> | null
  }



  /**
   * Model jackson_ttl
   */


  export type AggregateJackson_ttl = {
    _count: Jackson_ttlCountAggregateOutputType | null
    _avg: Jackson_ttlAvgAggregateOutputType | null
    _sum: Jackson_ttlSumAggregateOutputType | null
    _min: Jackson_ttlMinAggregateOutputType | null
    _max: Jackson_ttlMaxAggregateOutputType | null
  }

  export type Jackson_ttlAvgAggregateOutputType = {
    expiresAt: number | null
  }

  export type Jackson_ttlSumAggregateOutputType = {
    expiresAt: bigint | null
  }

  export type Jackson_ttlMinAggregateOutputType = {
    key: string | null
    expiresAt: bigint | null
  }

  export type Jackson_ttlMaxAggregateOutputType = {
    key: string | null
    expiresAt: bigint | null
  }

  export type Jackson_ttlCountAggregateOutputType = {
    key: number
    expiresAt: number
    _all: number
  }


  export type Jackson_ttlAvgAggregateInputType = {
    expiresAt?: true
  }

  export type Jackson_ttlSumAggregateInputType = {
    expiresAt?: true
  }

  export type Jackson_ttlMinAggregateInputType = {
    key?: true
    expiresAt?: true
  }

  export type Jackson_ttlMaxAggregateInputType = {
    key?: true
    expiresAt?: true
  }

  export type Jackson_ttlCountAggregateInputType = {
    key?: true
    expiresAt?: true
    _all?: true
  }

  export type Jackson_ttlAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which jackson_ttl to aggregate.
     */
    where?: jackson_ttlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jackson_ttls to fetch.
     */
    orderBy?: Enumerable<jackson_ttlOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: jackson_ttlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jackson_ttls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jackson_ttls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned jackson_ttls
    **/
    _count?: true | Jackson_ttlCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Jackson_ttlAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Jackson_ttlSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Jackson_ttlMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Jackson_ttlMaxAggregateInputType
  }

  export type GetJackson_ttlAggregateType<T extends Jackson_ttlAggregateArgs> = {
        [P in keyof T & keyof AggregateJackson_ttl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJackson_ttl[P]>
      : GetScalarType<T[P], AggregateJackson_ttl[P]>
  }




  export type Jackson_ttlGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: jackson_ttlWhereInput
    orderBy?: Enumerable<jackson_ttlOrderByWithAggregationInput>
    by: Jackson_ttlScalarFieldEnum[]
    having?: jackson_ttlScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Jackson_ttlCountAggregateInputType | true
    _avg?: Jackson_ttlAvgAggregateInputType
    _sum?: Jackson_ttlSumAggregateInputType
    _min?: Jackson_ttlMinAggregateInputType
    _max?: Jackson_ttlMaxAggregateInputType
  }


  export type Jackson_ttlGroupByOutputType = {
    key: string
    expiresAt: bigint
    _count: Jackson_ttlCountAggregateOutputType | null
    _avg: Jackson_ttlAvgAggregateOutputType | null
    _sum: Jackson_ttlSumAggregateOutputType | null
    _min: Jackson_ttlMinAggregateOutputType | null
    _max: Jackson_ttlMaxAggregateOutputType | null
  }

  type GetJackson_ttlGroupByPayload<T extends Jackson_ttlGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<Jackson_ttlGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Jackson_ttlGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Jackson_ttlGroupByOutputType[P]>
            : GetScalarType<T[P], Jackson_ttlGroupByOutputType[P]>
        }
      >
    >


  export type jackson_ttlSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    expiresAt?: boolean
  }, ExtArgs["result"]["jackson_ttl"]>

  export type jackson_ttlSelectScalar = {
    key?: boolean
    expiresAt?: boolean
  }


  type jackson_ttlGetPayload<S extends boolean | null | undefined | jackson_ttlArgs> = $Types.GetResult<jackson_ttlPayload, S>

  type jackson_ttlCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<jackson_ttlFindManyArgs, 'select' | 'include'> & {
      select?: Jackson_ttlCountAggregateInputType | true
    }

  export interface jackson_ttlDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['jackson_ttl'], meta: { name: 'jackson_ttl' } }
    /**
     * Find zero or one Jackson_ttl that matches the filter.
     * @param {jackson_ttlFindUniqueArgs} args - Arguments to find a Jackson_ttl
     * @example
     * // Get one Jackson_ttl
     * const jackson_ttl = await prisma.jackson_ttl.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends jackson_ttlFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, jackson_ttlFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'jackson_ttl'> extends True ? Prisma__jackson_ttlClient<$Types.GetResult<jackson_ttlPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__jackson_ttlClient<$Types.GetResult<jackson_ttlPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Jackson_ttl that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {jackson_ttlFindUniqueOrThrowArgs} args - Arguments to find a Jackson_ttl
     * @example
     * // Get one Jackson_ttl
     * const jackson_ttl = await prisma.jackson_ttl.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends jackson_ttlFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_ttlFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__jackson_ttlClient<$Types.GetResult<jackson_ttlPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Jackson_ttl that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_ttlFindFirstArgs} args - Arguments to find a Jackson_ttl
     * @example
     * // Get one Jackson_ttl
     * const jackson_ttl = await prisma.jackson_ttl.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends jackson_ttlFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, jackson_ttlFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'jackson_ttl'> extends True ? Prisma__jackson_ttlClient<$Types.GetResult<jackson_ttlPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__jackson_ttlClient<$Types.GetResult<jackson_ttlPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Jackson_ttl that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_ttlFindFirstOrThrowArgs} args - Arguments to find a Jackson_ttl
     * @example
     * // Get one Jackson_ttl
     * const jackson_ttl = await prisma.jackson_ttl.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends jackson_ttlFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_ttlFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__jackson_ttlClient<$Types.GetResult<jackson_ttlPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Jackson_ttls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_ttlFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jackson_ttls
     * const jackson_ttls = await prisma.jackson_ttl.findMany()
     * 
     * // Get first 10 Jackson_ttls
     * const jackson_ttls = await prisma.jackson_ttl.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const jackson_ttlWithKeyOnly = await prisma.jackson_ttl.findMany({ select: { key: true } })
     * 
    **/
    findMany<T extends jackson_ttlFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_ttlFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<jackson_ttlPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Jackson_ttl.
     * @param {jackson_ttlCreateArgs} args - Arguments to create a Jackson_ttl.
     * @example
     * // Create one Jackson_ttl
     * const Jackson_ttl = await prisma.jackson_ttl.create({
     *   data: {
     *     // ... data to create a Jackson_ttl
     *   }
     * })
     * 
    **/
    create<T extends jackson_ttlCreateArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_ttlCreateArgs<ExtArgs>>
    ): Prisma__jackson_ttlClient<$Types.GetResult<jackson_ttlPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Jackson_ttls.
     *     @param {jackson_ttlCreateManyArgs} args - Arguments to create many Jackson_ttls.
     *     @example
     *     // Create many Jackson_ttls
     *     const jackson_ttl = await prisma.jackson_ttl.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends jackson_ttlCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_ttlCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Jackson_ttl.
     * @param {jackson_ttlDeleteArgs} args - Arguments to delete one Jackson_ttl.
     * @example
     * // Delete one Jackson_ttl
     * const Jackson_ttl = await prisma.jackson_ttl.delete({
     *   where: {
     *     // ... filter to delete one Jackson_ttl
     *   }
     * })
     * 
    **/
    delete<T extends jackson_ttlDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_ttlDeleteArgs<ExtArgs>>
    ): Prisma__jackson_ttlClient<$Types.GetResult<jackson_ttlPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Jackson_ttl.
     * @param {jackson_ttlUpdateArgs} args - Arguments to update one Jackson_ttl.
     * @example
     * // Update one Jackson_ttl
     * const jackson_ttl = await prisma.jackson_ttl.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends jackson_ttlUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_ttlUpdateArgs<ExtArgs>>
    ): Prisma__jackson_ttlClient<$Types.GetResult<jackson_ttlPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Jackson_ttls.
     * @param {jackson_ttlDeleteManyArgs} args - Arguments to filter Jackson_ttls to delete.
     * @example
     * // Delete a few Jackson_ttls
     * const { count } = await prisma.jackson_ttl.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends jackson_ttlDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, jackson_ttlDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jackson_ttls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_ttlUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jackson_ttls
     * const jackson_ttl = await prisma.jackson_ttl.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends jackson_ttlUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_ttlUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jackson_ttl.
     * @param {jackson_ttlUpsertArgs} args - Arguments to update or create a Jackson_ttl.
     * @example
     * // Update or create a Jackson_ttl
     * const jackson_ttl = await prisma.jackson_ttl.upsert({
     *   create: {
     *     // ... data to create a Jackson_ttl
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jackson_ttl we want to update
     *   }
     * })
    **/
    upsert<T extends jackson_ttlUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, jackson_ttlUpsertArgs<ExtArgs>>
    ): Prisma__jackson_ttlClient<$Types.GetResult<jackson_ttlPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Jackson_ttls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jackson_ttlCountArgs} args - Arguments to filter Jackson_ttls to count.
     * @example
     * // Count the number of Jackson_ttls
     * const count = await prisma.jackson_ttl.count({
     *   where: {
     *     // ... the filter for the Jackson_ttls we want to count
     *   }
     * })
    **/
    count<T extends jackson_ttlCountArgs>(
      args?: Subset<T, jackson_ttlCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Jackson_ttlCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jackson_ttl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jackson_ttlAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Jackson_ttlAggregateArgs>(args: Subset<T, Jackson_ttlAggregateArgs>): Prisma.PrismaPromise<GetJackson_ttlAggregateType<T>>

    /**
     * Group by Jackson_ttl.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jackson_ttlGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Jackson_ttlGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Jackson_ttlGroupByArgs['orderBy'] }
        : { orderBy?: Jackson_ttlGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Jackson_ttlGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJackson_ttlGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for jackson_ttl.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__jackson_ttlClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * jackson_ttl base type for findUnique actions
   */
  export type jackson_ttlFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_ttl
     */
    select?: jackson_ttlSelect<ExtArgs> | null
    /**
     * Filter, which jackson_ttl to fetch.
     */
    where: jackson_ttlWhereUniqueInput
  }

  /**
   * jackson_ttl findUnique
   */
  export interface jackson_ttlFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends jackson_ttlFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * jackson_ttl findUniqueOrThrow
   */
  export type jackson_ttlFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_ttl
     */
    select?: jackson_ttlSelect<ExtArgs> | null
    /**
     * Filter, which jackson_ttl to fetch.
     */
    where: jackson_ttlWhereUniqueInput
  }


  /**
   * jackson_ttl base type for findFirst actions
   */
  export type jackson_ttlFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_ttl
     */
    select?: jackson_ttlSelect<ExtArgs> | null
    /**
     * Filter, which jackson_ttl to fetch.
     */
    where?: jackson_ttlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jackson_ttls to fetch.
     */
    orderBy?: Enumerable<jackson_ttlOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jackson_ttls.
     */
    cursor?: jackson_ttlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jackson_ttls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jackson_ttls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jackson_ttls.
     */
    distinct?: Enumerable<Jackson_ttlScalarFieldEnum>
  }

  /**
   * jackson_ttl findFirst
   */
  export interface jackson_ttlFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends jackson_ttlFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * jackson_ttl findFirstOrThrow
   */
  export type jackson_ttlFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_ttl
     */
    select?: jackson_ttlSelect<ExtArgs> | null
    /**
     * Filter, which jackson_ttl to fetch.
     */
    where?: jackson_ttlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jackson_ttls to fetch.
     */
    orderBy?: Enumerable<jackson_ttlOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jackson_ttls.
     */
    cursor?: jackson_ttlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jackson_ttls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jackson_ttls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jackson_ttls.
     */
    distinct?: Enumerable<Jackson_ttlScalarFieldEnum>
  }


  /**
   * jackson_ttl findMany
   */
  export type jackson_ttlFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_ttl
     */
    select?: jackson_ttlSelect<ExtArgs> | null
    /**
     * Filter, which jackson_ttls to fetch.
     */
    where?: jackson_ttlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jackson_ttls to fetch.
     */
    orderBy?: Enumerable<jackson_ttlOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing jackson_ttls.
     */
    cursor?: jackson_ttlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jackson_ttls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jackson_ttls.
     */
    skip?: number
    distinct?: Enumerable<Jackson_ttlScalarFieldEnum>
  }


  /**
   * jackson_ttl create
   */
  export type jackson_ttlCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_ttl
     */
    select?: jackson_ttlSelect<ExtArgs> | null
    /**
     * The data needed to create a jackson_ttl.
     */
    data: XOR<jackson_ttlCreateInput, jackson_ttlUncheckedCreateInput>
  }


  /**
   * jackson_ttl createMany
   */
  export type jackson_ttlCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many jackson_ttls.
     */
    data: Enumerable<jackson_ttlCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * jackson_ttl update
   */
  export type jackson_ttlUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_ttl
     */
    select?: jackson_ttlSelect<ExtArgs> | null
    /**
     * The data needed to update a jackson_ttl.
     */
    data: XOR<jackson_ttlUpdateInput, jackson_ttlUncheckedUpdateInput>
    /**
     * Choose, which jackson_ttl to update.
     */
    where: jackson_ttlWhereUniqueInput
  }


  /**
   * jackson_ttl updateMany
   */
  export type jackson_ttlUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update jackson_ttls.
     */
    data: XOR<jackson_ttlUpdateManyMutationInput, jackson_ttlUncheckedUpdateManyInput>
    /**
     * Filter which jackson_ttls to update
     */
    where?: jackson_ttlWhereInput
  }


  /**
   * jackson_ttl upsert
   */
  export type jackson_ttlUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_ttl
     */
    select?: jackson_ttlSelect<ExtArgs> | null
    /**
     * The filter to search for the jackson_ttl to update in case it exists.
     */
    where: jackson_ttlWhereUniqueInput
    /**
     * In case the jackson_ttl found by the `where` argument doesn't exist, create a new jackson_ttl with this data.
     */
    create: XOR<jackson_ttlCreateInput, jackson_ttlUncheckedCreateInput>
    /**
     * In case the jackson_ttl was found with the provided `where` argument, update it with this data.
     */
    update: XOR<jackson_ttlUpdateInput, jackson_ttlUncheckedUpdateInput>
  }


  /**
   * jackson_ttl delete
   */
  export type jackson_ttlDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_ttl
     */
    select?: jackson_ttlSelect<ExtArgs> | null
    /**
     * Filter which jackson_ttl to delete.
     */
    where: jackson_ttlWhereUniqueInput
  }


  /**
   * jackson_ttl deleteMany
   */
  export type jackson_ttlDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which jackson_ttls to delete
     */
    where?: jackson_ttlWhereInput
  }


  /**
   * jackson_ttl without action
   */
  export type jackson_ttlArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jackson_ttl
     */
    select?: jackson_ttlSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AuditsScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    auditId: 'auditId',
    auditType: 'auditType',
    userId: 'userId',
    username: 'username',
    action: 'action',
    auditChanges: 'auditChanges',
    version: 'version'
  };

  export type AuditsScalarFieldEnum = (typeof AuditsScalarFieldEnum)[keyof typeof AuditsScalarFieldEnum]


  export const SiteTemplateScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted',
    name: 'name',
    template: 'template'
  };

  export type SiteTemplateScalarFieldEnum = (typeof SiteTemplateScalarFieldEnum)[keyof typeof SiteTemplateScalarFieldEnum]


  export const SiteTemplateDataDefScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted',
    siteTemplateId: 'siteTemplateId',
    defData: 'defData'
  };

  export type SiteTemplateDataDefScalarFieldEnum = (typeof SiteTemplateDataDefScalarFieldEnum)[keyof typeof SiteTemplateDataDefScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted',
    name: 'name',
    extendData: 'extendData'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const SiteScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted',
    name: 'name',
    cosUrl: 'cosUrl',
    siteTemplateId: 'siteTemplateId',
    customerId: 'customerId',
    slotData: 'slotData'
  };

  export type SiteScalarFieldEnum = (typeof SiteScalarFieldEnum)[keyof typeof SiteScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    refresh_token_expires_in: 'refresh_token_expires_in',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    logo: 'logo',
    password: 'password',
    type: 'type',
    usage: 'usage',
    usageLimit: 'usageLimit',
    plan: 'plan',
    stripeId: 'stripeId',
    billingCycleStart: 'billingCycleStart',
    region: 'region',
    endpoint: 'endpoint',
    bucket: 'bucket',
    useHost: 'useHost',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const ProjectInviteScalarFieldEnum: {
    email: 'email',
    expires: 'expires',
    projectId: 'projectId',
    createdAt: 'createdAt'
  };

  export type ProjectInviteScalarFieldEnum = (typeof ProjectInviteScalarFieldEnum)[keyof typeof ProjectInviteScalarFieldEnum]


  export const ProjectUsersScalarFieldEnum: {
    id: 'id',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    projectId: 'projectId'
  };

  export type ProjectUsersScalarFieldEnum = (typeof ProjectUsersScalarFieldEnum)[keyof typeof ProjectUsersScalarFieldEnum]


  export const SentEmailScalarFieldEnum: {
    id: 'id',
    type: 'type',
    createdAt: 'createdAt',
    projectId: 'projectId'
  };

  export type SentEmailScalarFieldEnum = (typeof SentEmailScalarFieldEnum)[keyof typeof SentEmailScalarFieldEnum]


  export const DomainScalarFieldEnum: {
    id: 'id',
    slug: 'slug',
    verified: 'verified',
    target: 'target',
    type: 'type',
    description: 'description',
    projectId: 'projectId',
    primary: 'primary',
    lastChecked: 'lastChecked',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DomainScalarFieldEnum = (typeof DomainScalarFieldEnum)[keyof typeof DomainScalarFieldEnum]


  export const LinkScalarFieldEnum: {
    id: 'id',
    domain: 'domain',
    key: 'key',
    url: 'url',
    archived: 'archived',
    expiresAt: 'expiresAt',
    password: 'password',
    proxy: 'proxy',
    title: 'title',
    description: 'description',
    image: 'image',
    utm_source: 'utm_source',
    utm_medium: 'utm_medium',
    utm_campaign: 'utm_campaign',
    utm_term: 'utm_term',
    utm_content: 'utm_content',
    rewrite: 'rewrite',
    ios: 'ios',
    android: 'android',
    userId: 'userId',
    projectId: 'projectId',
    clicks: 'clicks',
    publicStats: 'publicStats',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    tagId: 'tagId'
  };

  export type LinkScalarFieldEnum = (typeof LinkScalarFieldEnum)[keyof typeof LinkScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    color: 'color',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    projectId: 'projectId'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const Jackson_indexScalarFieldEnum: {
    id: 'id',
    key: 'key',
    storeKey: 'storeKey'
  };

  export type Jackson_indexScalarFieldEnum = (typeof Jackson_indexScalarFieldEnum)[keyof typeof Jackson_indexScalarFieldEnum]


  export const Jackson_storeScalarFieldEnum: {
    key: 'key',
    value: 'value',
    iv: 'iv',
    tag: 'tag',
    createdAt: 'createdAt',
    modifiedAt: 'modifiedAt'
  };

  export type Jackson_storeScalarFieldEnum = (typeof Jackson_storeScalarFieldEnum)[keyof typeof Jackson_storeScalarFieldEnum]


  export const Jackson_ttlScalarFieldEnum: {
    key: 'key',
    expiresAt: 'expiresAt'
  };

  export type Jackson_ttlScalarFieldEnum = (typeof Jackson_ttlScalarFieldEnum)[keyof typeof Jackson_ttlScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const AuditsOrderByRelevanceFieldEnum: {
    auditType: 'auditType',
    userId: 'userId',
    username: 'username',
    action: 'action',
    auditChanges: 'auditChanges'
  };

  export type AuditsOrderByRelevanceFieldEnum = (typeof AuditsOrderByRelevanceFieldEnum)[keyof typeof AuditsOrderByRelevanceFieldEnum]


  export const SiteTemplateOrderByRelevanceFieldEnum: {
    name: 'name',
    template: 'template'
  };

  export type SiteTemplateOrderByRelevanceFieldEnum = (typeof SiteTemplateOrderByRelevanceFieldEnum)[keyof typeof SiteTemplateOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const CustomerOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type CustomerOrderByRelevanceFieldEnum = (typeof CustomerOrderByRelevanceFieldEnum)[keyof typeof CustomerOrderByRelevanceFieldEnum]


  export const SiteOrderByRelevanceFieldEnum: {
    name: 'name',
    cosUrl: 'cosUrl'
  };

  export type SiteOrderByRelevanceFieldEnum = (typeof SiteOrderByRelevanceFieldEnum)[keyof typeof SiteOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    image: 'image'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const AccountOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountOrderByRelevanceFieldEnum = (typeof AccountOrderByRelevanceFieldEnum)[keyof typeof AccountOrderByRelevanceFieldEnum]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const VerificationTokenOrderByRelevanceFieldEnum: {
    identifier: 'identifier',
    token: 'token'
  };

  export type VerificationTokenOrderByRelevanceFieldEnum = (typeof VerificationTokenOrderByRelevanceFieldEnum)[keyof typeof VerificationTokenOrderByRelevanceFieldEnum]


  export const ProjectOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    logo: 'logo',
    password: 'password',
    type: 'type',
    plan: 'plan',
    stripeId: 'stripeId',
    region: 'region',
    endpoint: 'endpoint',
    bucket: 'bucket',
    useHost: 'useHost'
  };

  export type ProjectOrderByRelevanceFieldEnum = (typeof ProjectOrderByRelevanceFieldEnum)[keyof typeof ProjectOrderByRelevanceFieldEnum]


  export const ProjectInviteOrderByRelevanceFieldEnum: {
    email: 'email',
    projectId: 'projectId'
  };

  export type ProjectInviteOrderByRelevanceFieldEnum = (typeof ProjectInviteOrderByRelevanceFieldEnum)[keyof typeof ProjectInviteOrderByRelevanceFieldEnum]


  export const ProjectUsersOrderByRelevanceFieldEnum: {
    id: 'id',
    userId: 'userId',
    projectId: 'projectId'
  };

  export type ProjectUsersOrderByRelevanceFieldEnum = (typeof ProjectUsersOrderByRelevanceFieldEnum)[keyof typeof ProjectUsersOrderByRelevanceFieldEnum]


  export const SentEmailOrderByRelevanceFieldEnum: {
    id: 'id',
    projectId: 'projectId'
  };

  export type SentEmailOrderByRelevanceFieldEnum = (typeof SentEmailOrderByRelevanceFieldEnum)[keyof typeof SentEmailOrderByRelevanceFieldEnum]


  export const DomainOrderByRelevanceFieldEnum: {
    id: 'id',
    slug: 'slug',
    target: 'target',
    type: 'type',
    description: 'description',
    projectId: 'projectId'
  };

  export type DomainOrderByRelevanceFieldEnum = (typeof DomainOrderByRelevanceFieldEnum)[keyof typeof DomainOrderByRelevanceFieldEnum]


  export const LinkOrderByRelevanceFieldEnum: {
    id: 'id',
    domain: 'domain',
    key: 'key',
    url: 'url',
    password: 'password',
    title: 'title',
    description: 'description',
    image: 'image',
    utm_source: 'utm_source',
    utm_medium: 'utm_medium',
    utm_campaign: 'utm_campaign',
    utm_term: 'utm_term',
    utm_content: 'utm_content',
    ios: 'ios',
    android: 'android',
    userId: 'userId',
    projectId: 'projectId',
    tagId: 'tagId'
  };

  export type LinkOrderByRelevanceFieldEnum = (typeof LinkOrderByRelevanceFieldEnum)[keyof typeof LinkOrderByRelevanceFieldEnum]


  export const TagOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    color: 'color',
    projectId: 'projectId'
  };

  export type TagOrderByRelevanceFieldEnum = (typeof TagOrderByRelevanceFieldEnum)[keyof typeof TagOrderByRelevanceFieldEnum]


  export const jackson_indexOrderByRelevanceFieldEnum: {
    key: 'key',
    storeKey: 'storeKey'
  };

  export type jackson_indexOrderByRelevanceFieldEnum = (typeof jackson_indexOrderByRelevanceFieldEnum)[keyof typeof jackson_indexOrderByRelevanceFieldEnum]


  export const jackson_storeOrderByRelevanceFieldEnum: {
    key: 'key',
    value: 'value',
    iv: 'iv',
    tag: 'tag'
  };

  export type jackson_storeOrderByRelevanceFieldEnum = (typeof jackson_storeOrderByRelevanceFieldEnum)[keyof typeof jackson_storeOrderByRelevanceFieldEnum]


  export const jackson_ttlOrderByRelevanceFieldEnum: {
    key: 'key'
  };

  export type jackson_ttlOrderByRelevanceFieldEnum = (typeof jackson_ttlOrderByRelevanceFieldEnum)[keyof typeof jackson_ttlOrderByRelevanceFieldEnum]


  /**
   * Deep Input Types
   */


  export type AuditsWhereInput = {
    AND?: Enumerable<AuditsWhereInput>
    OR?: Enumerable<AuditsWhereInput>
    NOT?: Enumerable<AuditsWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    auditId?: IntFilter | number
    auditType?: StringFilter | string
    userId?: StringFilter | string
    username?: StringNullableFilter | string | null
    action?: StringFilter | string
    auditChanges?: StringFilter | string
    version?: IntFilter | number
  }

  export type AuditsOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    createdAt?: SortOrder
    auditId?: SortOrder
    auditType?: SortOrder
    userId?: SortOrder
    username?: SortOrderInput | SortOrder
    action?: SortOrder
    auditChanges?: SortOrder
    version?: SortOrder
    _relevance?: AuditsOrderByRelevanceInput
  }

  export type AuditsWhereUniqueInput = {
    id?: number
  }

  export type AuditsOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    auditId?: SortOrder
    auditType?: SortOrder
    userId?: SortOrder
    username?: SortOrderInput | SortOrder
    action?: SortOrder
    auditChanges?: SortOrder
    version?: SortOrder
    _count?: AuditsCountOrderByAggregateInput
    _avg?: AuditsAvgOrderByAggregateInput
    _max?: AuditsMaxOrderByAggregateInput
    _min?: AuditsMinOrderByAggregateInput
    _sum?: AuditsSumOrderByAggregateInput
  }

  export type AuditsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AuditsScalarWhereWithAggregatesInput>
    OR?: Enumerable<AuditsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AuditsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    auditId?: IntWithAggregatesFilter | number
    auditType?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    username?: StringNullableWithAggregatesFilter | string | null
    action?: StringWithAggregatesFilter | string
    auditChanges?: StringWithAggregatesFilter | string
    version?: IntWithAggregatesFilter | number
  }

  export type SiteTemplateWhereInput = {
    AND?: Enumerable<SiteTemplateWhereInput>
    OR?: Enumerable<SiteTemplateWhereInput>
    NOT?: Enumerable<SiteTemplateWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    name?: StringFilter | string
    template?: StringFilter | string
    site?: SiteListRelationFilter
    siteTemplateDataDef?: XOR<SiteTemplateDataDefRelationFilter, SiteTemplateDataDefWhereInput> | null
  }

  export type SiteTemplateOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    template?: SortOrder
    site?: SiteOrderByRelationAggregateInput
    siteTemplateDataDef?: SiteTemplateDataDefOrderByWithRelationAndSearchRelevanceInput
    _relevance?: SiteTemplateOrderByRelevanceInput
  }

  export type SiteTemplateWhereUniqueInput = {
    id?: number
  }

  export type SiteTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    template?: SortOrder
    _count?: SiteTemplateCountOrderByAggregateInput
    _avg?: SiteTemplateAvgOrderByAggregateInput
    _max?: SiteTemplateMaxOrderByAggregateInput
    _min?: SiteTemplateMinOrderByAggregateInput
    _sum?: SiteTemplateSumOrderByAggregateInput
  }

  export type SiteTemplateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SiteTemplateScalarWhereWithAggregatesInput>
    OR?: Enumerable<SiteTemplateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SiteTemplateScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isDeleted?: BoolWithAggregatesFilter | boolean
    name?: StringWithAggregatesFilter | string
    template?: StringWithAggregatesFilter | string
  }

  export type SiteTemplateDataDefWhereInput = {
    AND?: Enumerable<SiteTemplateDataDefWhereInput>
    OR?: Enumerable<SiteTemplateDataDefWhereInput>
    NOT?: Enumerable<SiteTemplateDataDefWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    siteTemplateId?: IntFilter | number
    defData?: JsonFilter
    siteTemplate?: XOR<SiteTemplateRelationFilter, SiteTemplateWhereInput>
  }

  export type SiteTemplateDataDefOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    siteTemplateId?: SortOrder
    defData?: SortOrder
    siteTemplate?: SiteTemplateOrderByWithRelationAndSearchRelevanceInput
  }

  export type SiteTemplateDataDefWhereUniqueInput = {
    id?: number
    siteTemplateId?: number
  }

  export type SiteTemplateDataDefOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    siteTemplateId?: SortOrder
    defData?: SortOrder
    _count?: SiteTemplateDataDefCountOrderByAggregateInput
    _avg?: SiteTemplateDataDefAvgOrderByAggregateInput
    _max?: SiteTemplateDataDefMaxOrderByAggregateInput
    _min?: SiteTemplateDataDefMinOrderByAggregateInput
    _sum?: SiteTemplateDataDefSumOrderByAggregateInput
  }

  export type SiteTemplateDataDefScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SiteTemplateDataDefScalarWhereWithAggregatesInput>
    OR?: Enumerable<SiteTemplateDataDefScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SiteTemplateDataDefScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isDeleted?: BoolWithAggregatesFilter | boolean
    siteTemplateId?: IntWithAggregatesFilter | number
    defData?: JsonWithAggregatesFilter
  }

  export type CustomerWhereInput = {
    AND?: Enumerable<CustomerWhereInput>
    OR?: Enumerable<CustomerWhereInput>
    NOT?: Enumerable<CustomerWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    name?: StringFilter | string
    extendData?: JsonNullableFilter
    site?: SiteListRelationFilter
  }

  export type CustomerOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    extendData?: SortOrderInput | SortOrder
    site?: SiteOrderByRelationAggregateInput
    _relevance?: CustomerOrderByRelevanceInput
  }

  export type CustomerWhereUniqueInput = {
    id?: number
  }

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    extendData?: SortOrderInput | SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    OR?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isDeleted?: BoolWithAggregatesFilter | boolean
    name?: StringWithAggregatesFilter | string
    extendData?: JsonNullableWithAggregatesFilter
  }

  export type SiteWhereInput = {
    AND?: Enumerable<SiteWhereInput>
    OR?: Enumerable<SiteWhereInput>
    NOT?: Enumerable<SiteWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    name?: StringFilter | string
    cosUrl?: StringFilter | string
    siteTemplateId?: IntFilter | number
    customerId?: IntFilter | number
    slotData?: JsonFilter
    siteTemplate?: XOR<SiteTemplateRelationFilter, SiteTemplateWhereInput>
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }

  export type SiteOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    cosUrl?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
    slotData?: SortOrder
    siteTemplate?: SiteTemplateOrderByWithRelationAndSearchRelevanceInput
    customer?: CustomerOrderByWithRelationAndSearchRelevanceInput
    _relevance?: SiteOrderByRelevanceInput
  }

  export type SiteWhereUniqueInput = {
    id?: number
  }

  export type SiteOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    cosUrl?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
    slotData?: SortOrder
    _count?: SiteCountOrderByAggregateInput
    _avg?: SiteAvgOrderByAggregateInput
    _max?: SiteMaxOrderByAggregateInput
    _min?: SiteMinOrderByAggregateInput
    _sum?: SiteSumOrderByAggregateInput
  }

  export type SiteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SiteScalarWhereWithAggregatesInput>
    OR?: Enumerable<SiteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SiteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isDeleted?: BoolWithAggregatesFilter | boolean
    name?: StringWithAggregatesFilter | string
    cosUrl?: StringWithAggregatesFilter | string
    siteTemplateId?: IntWithAggregatesFilter | number
    customerId?: IntWithAggregatesFilter | number
    slotData?: JsonWithAggregatesFilter
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    emailVerified?: DateTimeNullableFilter | Date | string | null
    image?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    projects?: ProjectUsersListRelationFilter
    links?: LinkListRelationFilter
  }

  export type UserOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    projects?: ProjectUsersOrderByRelationAggregateInput
    links?: LinkOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter | Date | string | null
    image?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    refresh_token_expires_in?: IntNullableFilter | number | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    refresh_token_expires_in?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationAndSearchRelevanceInput
    _relevance?: AccountOrderByRelevanceInput
  }

  export type AccountWhereUniqueInput = {
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
  }

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    refresh_token_expires_in?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccountScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccountScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccountScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    provider?: StringWithAggregatesFilter | string
    providerAccountId?: StringWithAggregatesFilter | string
    refresh_token?: StringNullableWithAggregatesFilter | string | null
    refresh_token_expires_in?: IntNullableWithAggregatesFilter | number | null
    access_token?: StringNullableWithAggregatesFilter | string | null
    expires_at?: IntNullableWithAggregatesFilter | number | null
    token_type?: StringNullableWithAggregatesFilter | string | null
    scope?: StringNullableWithAggregatesFilter | string | null
    id_token?: StringNullableWithAggregatesFilter | string | null
    session_state?: StringNullableWithAggregatesFilter | string | null
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationAndSearchRelevanceInput
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = {
    id?: string
    sessionToken?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sessionToken?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: Enumerable<VerificationTokenWhereInput>
    OR?: Enumerable<VerificationTokenWhereInput>
    NOT?: Enumerable<VerificationTokenWhereInput>
    identifier?: StringFilter | string
    token?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type VerificationTokenOrderByWithRelationAndSearchRelevanceInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _relevance?: VerificationTokenOrderByRelevanceInput
  }

  export type VerificationTokenWhereUniqueInput = {
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
  }

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    identifier?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ProjectWhereInput = {
    AND?: Enumerable<ProjectWhereInput>
    OR?: Enumerable<ProjectWhereInput>
    NOT?: Enumerable<ProjectWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    slug?: StringFilter | string
    logo?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    type?: StringFilter | string
    usage?: IntFilter | number
    usageLimit?: IntFilter | number
    plan?: StringFilter | string
    stripeId?: StringNullableFilter | string | null
    billingCycleStart?: IntNullableFilter | number | null
    region?: StringNullableFilter | string | null
    endpoint?: StringNullableFilter | string | null
    bucket?: StringNullableFilter | string | null
    useHost?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    users?: ProjectUsersListRelationFilter
    invites?: ProjectInviteListRelationFilter
    sentEmails?: SentEmailListRelationFilter
    domains?: DomainListRelationFilter
    links?: LinkListRelationFilter
    tags?: TagListRelationFilter
  }

  export type ProjectOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    type?: SortOrder
    usage?: SortOrder
    usageLimit?: SortOrder
    plan?: SortOrder
    stripeId?: SortOrderInput | SortOrder
    billingCycleStart?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    endpoint?: SortOrderInput | SortOrder
    bucket?: SortOrderInput | SortOrder
    useHost?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    users?: ProjectUsersOrderByRelationAggregateInput
    invites?: ProjectInviteOrderByRelationAggregateInput
    sentEmails?: SentEmailOrderByRelationAggregateInput
    domains?: DomainOrderByRelationAggregateInput
    links?: LinkOrderByRelationAggregateInput
    tags?: TagOrderByRelationAggregateInput
    _relevance?: ProjectOrderByRelevanceInput
  }

  export type ProjectWhereUniqueInput = {
    id?: string
    slug?: string
    stripeId?: string
  }

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    type?: SortOrder
    usage?: SortOrder
    usageLimit?: SortOrder
    plan?: SortOrder
    stripeId?: SortOrderInput | SortOrder
    billingCycleStart?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    endpoint?: SortOrderInput | SortOrder
    bucket?: SortOrderInput | SortOrder
    useHost?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProjectScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    slug?: StringWithAggregatesFilter | string
    logo?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    type?: StringWithAggregatesFilter | string
    usage?: IntWithAggregatesFilter | number
    usageLimit?: IntWithAggregatesFilter | number
    plan?: StringWithAggregatesFilter | string
    stripeId?: StringNullableWithAggregatesFilter | string | null
    billingCycleStart?: IntNullableWithAggregatesFilter | number | null
    region?: StringNullableWithAggregatesFilter | string | null
    endpoint?: StringNullableWithAggregatesFilter | string | null
    bucket?: StringNullableWithAggregatesFilter | string | null
    useHost?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isDeleted?: BoolWithAggregatesFilter | boolean
  }

  export type ProjectInviteWhereInput = {
    AND?: Enumerable<ProjectInviteWhereInput>
    OR?: Enumerable<ProjectInviteWhereInput>
    NOT?: Enumerable<ProjectInviteWhereInput>
    email?: StringFilter | string
    expires?: DateTimeFilter | Date | string
    projectId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type ProjectInviteOrderByWithRelationAndSearchRelevanceInput = {
    email?: SortOrder
    expires?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    project?: ProjectOrderByWithRelationAndSearchRelevanceInput
    _relevance?: ProjectInviteOrderByRelevanceInput
  }

  export type ProjectInviteWhereUniqueInput = {
    email_projectId?: ProjectInviteEmailProjectIdCompoundUniqueInput
  }

  export type ProjectInviteOrderByWithAggregationInput = {
    email?: SortOrder
    expires?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    _count?: ProjectInviteCountOrderByAggregateInput
    _max?: ProjectInviteMaxOrderByAggregateInput
    _min?: ProjectInviteMinOrderByAggregateInput
  }

  export type ProjectInviteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectInviteScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProjectInviteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProjectInviteScalarWhereWithAggregatesInput>
    email?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
    projectId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ProjectUsersWhereInput = {
    AND?: Enumerable<ProjectUsersWhereInput>
    OR?: Enumerable<ProjectUsersWhereInput>
    NOT?: Enumerable<ProjectUsersWhereInput>
    id?: StringFilter | string
    role?: EnumRoleFilter | Role
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    projectId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type ProjectUsersOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    user?: UserOrderByWithRelationAndSearchRelevanceInput
    project?: ProjectOrderByWithRelationAndSearchRelevanceInput
    _relevance?: ProjectUsersOrderByRelevanceInput
  }

  export type ProjectUsersWhereUniqueInput = {
    id?: string
    userId_projectId?: ProjectUsersUserIdProjectIdCompoundUniqueInput
  }

  export type ProjectUsersOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    _count?: ProjectUsersCountOrderByAggregateInput
    _max?: ProjectUsersMaxOrderByAggregateInput
    _min?: ProjectUsersMinOrderByAggregateInput
  }

  export type ProjectUsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProjectUsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProjectUsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProjectUsersScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    role?: EnumRoleWithAggregatesFilter | Role
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    userId?: StringWithAggregatesFilter | string
    projectId?: StringWithAggregatesFilter | string
  }

  export type SentEmailWhereInput = {
    AND?: Enumerable<SentEmailWhereInput>
    OR?: Enumerable<SentEmailWhereInput>
    NOT?: Enumerable<SentEmailWhereInput>
    id?: StringFilter | string
    type?: EnumEmailTypeFilter | EmailType
    createdAt?: DateTimeFilter | Date | string
    projectId?: StringNullableFilter | string | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput> | null
  }

  export type SentEmailOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrderInput | SortOrder
    project?: ProjectOrderByWithRelationAndSearchRelevanceInput
    _relevance?: SentEmailOrderByRelevanceInput
  }

  export type SentEmailWhereUniqueInput = {
    id?: string
  }

  export type SentEmailOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrderInput | SortOrder
    _count?: SentEmailCountOrderByAggregateInput
    _max?: SentEmailMaxOrderByAggregateInput
    _min?: SentEmailMinOrderByAggregateInput
  }

  export type SentEmailScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SentEmailScalarWhereWithAggregatesInput>
    OR?: Enumerable<SentEmailScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SentEmailScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    type?: EnumEmailTypeWithAggregatesFilter | EmailType
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    projectId?: StringNullableWithAggregatesFilter | string | null
  }

  export type DomainWhereInput = {
    AND?: Enumerable<DomainWhereInput>
    OR?: Enumerable<DomainWhereInput>
    NOT?: Enumerable<DomainWhereInput>
    id?: StringFilter | string
    slug?: StringFilter | string
    verified?: BoolFilter | boolean
    target?: StringNullableFilter | string | null
    type?: StringFilter | string
    description?: StringNullableFilter | string | null
    projectId?: StringNullableFilter | string | null
    primary?: BoolFilter | boolean
    lastChecked?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput> | null
    links?: LinkListRelationFilter
  }

  export type DomainOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    slug?: SortOrder
    verified?: SortOrder
    target?: SortOrderInput | SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    primary?: SortOrder
    lastChecked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    project?: ProjectOrderByWithRelationAndSearchRelevanceInput
    links?: LinkOrderByRelationAggregateInput
    _relevance?: DomainOrderByRelevanceInput
  }

  export type DomainWhereUniqueInput = {
    id?: string
    slug?: string
  }

  export type DomainOrderByWithAggregationInput = {
    id?: SortOrder
    slug?: SortOrder
    verified?: SortOrder
    target?: SortOrderInput | SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    primary?: SortOrder
    lastChecked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DomainCountOrderByAggregateInput
    _max?: DomainMaxOrderByAggregateInput
    _min?: DomainMinOrderByAggregateInput
  }

  export type DomainScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DomainScalarWhereWithAggregatesInput>
    OR?: Enumerable<DomainScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DomainScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    slug?: StringWithAggregatesFilter | string
    verified?: BoolWithAggregatesFilter | boolean
    target?: StringNullableWithAggregatesFilter | string | null
    type?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    projectId?: StringNullableWithAggregatesFilter | string | null
    primary?: BoolWithAggregatesFilter | boolean
    lastChecked?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LinkWhereInput = {
    AND?: Enumerable<LinkWhereInput>
    OR?: Enumerable<LinkWhereInput>
    NOT?: Enumerable<LinkWhereInput>
    id?: StringFilter | string
    domain?: StringFilter | string
    key?: StringFilter | string
    url?: StringFilter | string
    archived?: BoolFilter | boolean
    expiresAt?: DateTimeNullableFilter | Date | string | null
    password?: StringNullableFilter | string | null
    proxy?: BoolFilter | boolean
    title?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    utm_source?: StringNullableFilter | string | null
    utm_medium?: StringNullableFilter | string | null
    utm_campaign?: StringNullableFilter | string | null
    utm_term?: StringNullableFilter | string | null
    utm_content?: StringNullableFilter | string | null
    rewrite?: BoolFilter | boolean
    ios?: StringNullableFilter | string | null
    android?: StringNullableFilter | string | null
    userId?: StringNullableFilter | string | null
    projectId?: StringNullableFilter | string | null
    clicks?: IntFilter | number
    publicStats?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    tagId?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput> | null
    projectDomain?: XOR<DomainRelationFilter, DomainWhereInput> | null
    tag?: XOR<TagRelationFilter, TagWhereInput> | null
  }

  export type LinkOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    domain?: SortOrder
    key?: SortOrder
    url?: SortOrder
    archived?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    proxy?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    utm_source?: SortOrderInput | SortOrder
    utm_medium?: SortOrderInput | SortOrder
    utm_campaign?: SortOrderInput | SortOrder
    utm_term?: SortOrderInput | SortOrder
    utm_content?: SortOrderInput | SortOrder
    rewrite?: SortOrder
    ios?: SortOrderInput | SortOrder
    android?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    clicks?: SortOrder
    publicStats?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationAndSearchRelevanceInput
    project?: ProjectOrderByWithRelationAndSearchRelevanceInput
    projectDomain?: DomainOrderByWithRelationAndSearchRelevanceInput
    tag?: TagOrderByWithRelationAndSearchRelevanceInput
    _relevance?: LinkOrderByRelevanceInput
  }

  export type LinkWhereUniqueInput = {
    id?: string
    domain_key?: LinkDomainKeyCompoundUniqueInput
  }

  export type LinkOrderByWithAggregationInput = {
    id?: SortOrder
    domain?: SortOrder
    key?: SortOrder
    url?: SortOrder
    archived?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    proxy?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    utm_source?: SortOrderInput | SortOrder
    utm_medium?: SortOrderInput | SortOrder
    utm_campaign?: SortOrderInput | SortOrder
    utm_term?: SortOrderInput | SortOrder
    utm_content?: SortOrderInput | SortOrder
    rewrite?: SortOrder
    ios?: SortOrderInput | SortOrder
    android?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    projectId?: SortOrderInput | SortOrder
    clicks?: SortOrder
    publicStats?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagId?: SortOrderInput | SortOrder
    _count?: LinkCountOrderByAggregateInput
    _avg?: LinkAvgOrderByAggregateInput
    _max?: LinkMaxOrderByAggregateInput
    _min?: LinkMinOrderByAggregateInput
    _sum?: LinkSumOrderByAggregateInput
  }

  export type LinkScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LinkScalarWhereWithAggregatesInput>
    OR?: Enumerable<LinkScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LinkScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    domain?: StringWithAggregatesFilter | string
    key?: StringWithAggregatesFilter | string
    url?: StringWithAggregatesFilter | string
    archived?: BoolWithAggregatesFilter | boolean
    expiresAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    proxy?: BoolWithAggregatesFilter | boolean
    title?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    image?: StringNullableWithAggregatesFilter | string | null
    utm_source?: StringNullableWithAggregatesFilter | string | null
    utm_medium?: StringNullableWithAggregatesFilter | string | null
    utm_campaign?: StringNullableWithAggregatesFilter | string | null
    utm_term?: StringNullableWithAggregatesFilter | string | null
    utm_content?: StringNullableWithAggregatesFilter | string | null
    rewrite?: BoolWithAggregatesFilter | boolean
    ios?: StringNullableWithAggregatesFilter | string | null
    android?: StringNullableWithAggregatesFilter | string | null
    userId?: StringNullableWithAggregatesFilter | string | null
    projectId?: StringNullableWithAggregatesFilter | string | null
    clicks?: IntWithAggregatesFilter | number
    publicStats?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    tagId?: StringNullableWithAggregatesFilter | string | null
  }

  export type TagWhereInput = {
    AND?: Enumerable<TagWhereInput>
    OR?: Enumerable<TagWhereInput>
    NOT?: Enumerable<TagWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    color?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    projectId?: StringFilter | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    links?: LinkListRelationFilter
  }

  export type TagOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationAndSearchRelevanceInput
    links?: LinkOrderByRelationAggregateInput
    _relevance?: TagOrderByRelevanceInput
  }

  export type TagWhereUniqueInput = {
    id?: string
    name_projectId?: TagNameProjectIdCompoundUniqueInput
  }

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TagScalarWhereWithAggregatesInput>
    OR?: Enumerable<TagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TagScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    color?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    projectId?: StringWithAggregatesFilter | string
  }

  export type jackson_indexWhereInput = {
    AND?: Enumerable<jackson_indexWhereInput>
    OR?: Enumerable<jackson_indexWhereInput>
    NOT?: Enumerable<jackson_indexWhereInput>
    id?: IntFilter | number
    key?: StringFilter | string
    storeKey?: StringFilter | string
  }

  export type jackson_indexOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    key?: SortOrder
    storeKey?: SortOrder
    _relevance?: jackson_indexOrderByRelevanceInput
  }

  export type jackson_indexWhereUniqueInput = {
    id?: number
  }

  export type jackson_indexOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    storeKey?: SortOrder
    _count?: jackson_indexCountOrderByAggregateInput
    _avg?: jackson_indexAvgOrderByAggregateInput
    _max?: jackson_indexMaxOrderByAggregateInput
    _min?: jackson_indexMinOrderByAggregateInput
    _sum?: jackson_indexSumOrderByAggregateInput
  }

  export type jackson_indexScalarWhereWithAggregatesInput = {
    AND?: Enumerable<jackson_indexScalarWhereWithAggregatesInput>
    OR?: Enumerable<jackson_indexScalarWhereWithAggregatesInput>
    NOT?: Enumerable<jackson_indexScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    key?: StringWithAggregatesFilter | string
    storeKey?: StringWithAggregatesFilter | string
  }

  export type jackson_storeWhereInput = {
    AND?: Enumerable<jackson_storeWhereInput>
    OR?: Enumerable<jackson_storeWhereInput>
    NOT?: Enumerable<jackson_storeWhereInput>
    key?: StringFilter | string
    value?: StringFilter | string
    iv?: StringNullableFilter | string | null
    tag?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    modifiedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type jackson_storeOrderByWithRelationAndSearchRelevanceInput = {
    key?: SortOrder
    value?: SortOrder
    iv?: SortOrderInput | SortOrder
    tag?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrderInput | SortOrder
    _relevance?: jackson_storeOrderByRelevanceInput
  }

  export type jackson_storeWhereUniqueInput = {
    key?: string
  }

  export type jackson_storeOrderByWithAggregationInput = {
    key?: SortOrder
    value?: SortOrder
    iv?: SortOrderInput | SortOrder
    tag?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrderInput | SortOrder
    _count?: jackson_storeCountOrderByAggregateInput
    _max?: jackson_storeMaxOrderByAggregateInput
    _min?: jackson_storeMinOrderByAggregateInput
  }

  export type jackson_storeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<jackson_storeScalarWhereWithAggregatesInput>
    OR?: Enumerable<jackson_storeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<jackson_storeScalarWhereWithAggregatesInput>
    key?: StringWithAggregatesFilter | string
    value?: StringWithAggregatesFilter | string
    iv?: StringNullableWithAggregatesFilter | string | null
    tag?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    modifiedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type jackson_ttlWhereInput = {
    AND?: Enumerable<jackson_ttlWhereInput>
    OR?: Enumerable<jackson_ttlWhereInput>
    NOT?: Enumerable<jackson_ttlWhereInput>
    key?: StringFilter | string
    expiresAt?: BigIntFilter | bigint | number
  }

  export type jackson_ttlOrderByWithRelationAndSearchRelevanceInput = {
    key?: SortOrder
    expiresAt?: SortOrder
    _relevance?: jackson_ttlOrderByRelevanceInput
  }

  export type jackson_ttlWhereUniqueInput = {
    key?: string
  }

  export type jackson_ttlOrderByWithAggregationInput = {
    key?: SortOrder
    expiresAt?: SortOrder
    _count?: jackson_ttlCountOrderByAggregateInput
    _avg?: jackson_ttlAvgOrderByAggregateInput
    _max?: jackson_ttlMaxOrderByAggregateInput
    _min?: jackson_ttlMinOrderByAggregateInput
    _sum?: jackson_ttlSumOrderByAggregateInput
  }

  export type jackson_ttlScalarWhereWithAggregatesInput = {
    AND?: Enumerable<jackson_ttlScalarWhereWithAggregatesInput>
    OR?: Enumerable<jackson_ttlScalarWhereWithAggregatesInput>
    NOT?: Enumerable<jackson_ttlScalarWhereWithAggregatesInput>
    key?: StringWithAggregatesFilter | string
    expiresAt?: BigIntWithAggregatesFilter | bigint | number
  }

  export type AuditsCreateInput = {
    createdAt?: Date | string
    auditId: number
    auditType: string
    userId: string
    username?: string | null
    action: string
    auditChanges: string
    version: number
  }

  export type AuditsUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    auditId: number
    auditType: string
    userId: string
    username?: string | null
    action: string
    auditChanges: string
    version: number
  }

  export type AuditsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditId?: IntFieldUpdateOperationsInput | number
    auditType?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    auditChanges?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
  }

  export type AuditsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditId?: IntFieldUpdateOperationsInput | number
    auditType?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    auditChanges?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
  }

  export type AuditsCreateManyInput = {
    id?: number
    createdAt?: Date | string
    auditId: number
    auditType: string
    userId: string
    username?: string | null
    action: string
    auditChanges: string
    version: number
  }

  export type AuditsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditId?: IntFieldUpdateOperationsInput | number
    auditType?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    auditChanges?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
  }

  export type AuditsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditId?: IntFieldUpdateOperationsInput | number
    auditType?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    auditChanges?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
  }

  export type SiteTemplateCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
    site?: SiteCreateNestedManyWithoutSiteTemplateInput
    siteTemplateDataDef?: SiteTemplateDataDefCreateNestedOneWithoutSiteTemplateInput
  }

  export type SiteTemplateUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
    site?: SiteUncheckedCreateNestedManyWithoutSiteTemplateInput
    siteTemplateDataDef?: SiteTemplateDataDefUncheckedCreateNestedOneWithoutSiteTemplateInput
  }

  export type SiteTemplateUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    site?: SiteUpdateManyWithoutSiteTemplateNestedInput
    siteTemplateDataDef?: SiteTemplateDataDefUpdateOneWithoutSiteTemplateNestedInput
  }

  export type SiteTemplateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    site?: SiteUncheckedUpdateManyWithoutSiteTemplateNestedInput
    siteTemplateDataDef?: SiteTemplateDataDefUncheckedUpdateOneWithoutSiteTemplateNestedInput
  }

  export type SiteTemplateCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
  }

  export type SiteTemplateUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
  }

  export type SiteTemplateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
  }

  export type SiteTemplateDataDefCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    defData: JsonNullValueInput | InputJsonValue
    siteTemplate: SiteTemplateCreateNestedOneWithoutSiteTemplateDataDefInput
  }

  export type SiteTemplateDataDefUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    siteTemplateId: number
    defData: JsonNullValueInput | InputJsonValue
  }

  export type SiteTemplateDataDefUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    defData?: JsonNullValueInput | InputJsonValue
    siteTemplate?: SiteTemplateUpdateOneRequiredWithoutSiteTemplateDataDefNestedInput
  }

  export type SiteTemplateDataDefUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    siteTemplateId?: IntFieldUpdateOperationsInput | number
    defData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteTemplateDataDefCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    siteTemplateId: number
    defData: JsonNullValueInput | InputJsonValue
  }

  export type SiteTemplateDataDefUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    defData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteTemplateDataDefUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    siteTemplateId?: IntFieldUpdateOperationsInput | number
    defData?: JsonNullValueInput | InputJsonValue
  }

  export type CustomerCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    extendData?: NullableJsonNullValueInput | InputJsonValue
    site?: SiteCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    extendData?: NullableJsonNullValueInput | InputJsonValue
    site?: SiteUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    extendData?: NullableJsonNullValueInput | InputJsonValue
    site?: SiteUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    extendData?: NullableJsonNullValueInput | InputJsonValue
    site?: SiteUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    extendData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CustomerUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    extendData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    extendData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type SiteCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    cosUrl?: string
    slotData?: JsonNullValueInput | InputJsonValue
    siteTemplate: SiteTemplateCreateNestedOneWithoutSiteInput
    customer: CustomerCreateNestedOneWithoutSiteInput
  }

  export type SiteUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    cosUrl?: string
    siteTemplateId: number
    customerId: number
    slotData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    cosUrl?: StringFieldUpdateOperationsInput | string
    slotData?: JsonNullValueInput | InputJsonValue
    siteTemplate?: SiteTemplateUpdateOneRequiredWithoutSiteNestedInput
    customer?: CustomerUpdateOneRequiredWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    cosUrl?: StringFieldUpdateOperationsInput | string
    siteTemplateId?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    slotData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    cosUrl?: string
    siteTemplateId: number
    customerId: number
    slotData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    cosUrl?: StringFieldUpdateOperationsInput | string
    slotData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    cosUrl?: StringFieldUpdateOperationsInput | string
    siteTemplateId?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    slotData?: JsonNullValueInput | InputJsonValue
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    projects?: ProjectUsersCreateNestedManyWithoutUserInput
    links?: LinkCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUsersUncheckedCreateNestedManyWithoutUserInput
    links?: LinkUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    projects?: ProjectUsersUpdateManyWithoutUserNestedInput
    links?: LinkUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUsersUncheckedUpdateManyWithoutUserNestedInput
    links?: LinkUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    refresh_token_expires_in?: number | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    refresh_token_expires_in?: number | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    refresh_token_expires_in?: number | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    users?: ProjectUsersCreateNestedManyWithoutProjectInput
    invites?: ProjectInviteCreateNestedManyWithoutProjectInput
    sentEmails?: SentEmailCreateNestedManyWithoutProjectInput
    domains?: DomainCreateNestedManyWithoutProjectInput
    links?: LinkCreateNestedManyWithoutProjectInput
    tags?: TagCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    users?: ProjectUsersUncheckedCreateNestedManyWithoutProjectInput
    invites?: ProjectInviteUncheckedCreateNestedManyWithoutProjectInput
    sentEmails?: SentEmailUncheckedCreateNestedManyWithoutProjectInput
    domains?: DomainUncheckedCreateNestedManyWithoutProjectInput
    links?: LinkUncheckedCreateNestedManyWithoutProjectInput
    tags?: TagUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: ProjectUsersUpdateManyWithoutProjectNestedInput
    invites?: ProjectInviteUpdateManyWithoutProjectNestedInput
    sentEmails?: SentEmailUpdateManyWithoutProjectNestedInput
    domains?: DomainUpdateManyWithoutProjectNestedInput
    links?: LinkUpdateManyWithoutProjectNestedInput
    tags?: TagUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: ProjectUsersUncheckedUpdateManyWithoutProjectNestedInput
    invites?: ProjectInviteUncheckedUpdateManyWithoutProjectNestedInput
    sentEmails?: SentEmailUncheckedUpdateManyWithoutProjectNestedInput
    domains?: DomainUncheckedUpdateManyWithoutProjectNestedInput
    links?: LinkUncheckedUpdateManyWithoutProjectNestedInput
    tags?: TagUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProjectInviteCreateInput = {
    email: string
    expires: Date | string
    createdAt?: Date | string
    project: ProjectCreateNestedOneWithoutInvitesInput
  }

  export type ProjectInviteUncheckedCreateInput = {
    email: string
    expires: Date | string
    projectId: string
    createdAt?: Date | string
  }

  export type ProjectInviteUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutInvitesNestedInput
  }

  export type ProjectInviteUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectInviteCreateManyInput = {
    email: string
    expires: Date | string
    projectId: string
    createdAt?: Date | string
  }

  export type ProjectInviteUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectInviteUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUsersCreateInput = {
    id?: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProjectsInput
    project: ProjectCreateNestedOneWithoutUsersInput
  }

  export type ProjectUsersUncheckedCreateInput = {
    id?: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    projectId: string
  }

  export type ProjectUsersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
    project?: ProjectUpdateOneRequiredWithoutUsersNestedInput
  }

  export type ProjectUsersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectUsersCreateManyInput = {
    id?: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    projectId: string
  }

  export type ProjectUsersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUsersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type SentEmailCreateInput = {
    id?: string
    type: EmailType
    createdAt?: Date | string
    project?: ProjectCreateNestedOneWithoutSentEmailsInput
  }

  export type SentEmailUncheckedCreateInput = {
    id?: string
    type: EmailType
    createdAt?: Date | string
    projectId?: string | null
  }

  export type SentEmailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | EmailType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutSentEmailsNestedInput
  }

  export type SentEmailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | EmailType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SentEmailCreateManyInput = {
    id?: string
    type: EmailType
    createdAt?: Date | string
    projectId?: string | null
  }

  export type SentEmailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | EmailType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SentEmailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | EmailType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DomainCreateInput = {
    id?: string
    slug: string
    verified?: boolean
    target?: string | null
    type?: string
    description?: string | null
    primary?: boolean
    lastChecked?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    project?: ProjectCreateNestedOneWithoutDomainsInput
    links?: LinkCreateNestedManyWithoutProjectDomainInput
  }

  export type DomainUncheckedCreateInput = {
    id?: string
    slug: string
    verified?: boolean
    target?: string | null
    type?: string
    description?: string | null
    projectId?: string | null
    primary?: boolean
    lastChecked?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    links?: LinkUncheckedCreateNestedManyWithoutProjectDomainInput
  }

  export type DomainUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    target?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    lastChecked?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutDomainsNestedInput
    links?: LinkUpdateManyWithoutProjectDomainNestedInput
  }

  export type DomainUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    target?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    lastChecked?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUncheckedUpdateManyWithoutProjectDomainNestedInput
  }

  export type DomainCreateManyInput = {
    id?: string
    slug: string
    verified?: boolean
    target?: string | null
    type?: string
    description?: string | null
    projectId?: string | null
    primary?: boolean
    lastChecked?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DomainUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    target?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    lastChecked?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DomainUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    target?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    lastChecked?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkCreateInput = {
    id?: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutLinksInput
    project?: ProjectCreateNestedOneWithoutLinksInput
    projectDomain?: DomainCreateNestedOneWithoutLinksInput
    tag?: TagCreateNestedOneWithoutLinksInput
  }

  export type LinkUncheckedCreateInput = {
    id?: string
    domain: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    userId?: string | null
    projectId?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tagId?: string | null
  }

  export type LinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    proxy?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_term?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    rewrite?: BoolFieldUpdateOperationsInput | boolean
    ios?: NullableStringFieldUpdateOperationsInput | string | null
    android?: NullableStringFieldUpdateOperationsInput | string | null
    clicks?: IntFieldUpdateOperationsInput | number
    publicStats?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLinksNestedInput
    project?: ProjectUpdateOneWithoutLinksNestedInput
    projectDomain?: DomainUpdateOneWithoutLinksNestedInput
    tag?: TagUpdateOneWithoutLinksNestedInput
  }

  export type LinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    proxy?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_term?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    rewrite?: BoolFieldUpdateOperationsInput | boolean
    ios?: NullableStringFieldUpdateOperationsInput | string | null
    android?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    clicks?: IntFieldUpdateOperationsInput | number
    publicStats?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LinkCreateManyInput = {
    id?: string
    domain: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    userId?: string | null
    projectId?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tagId?: string | null
  }

  export type LinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    proxy?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_term?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    rewrite?: BoolFieldUpdateOperationsInput | boolean
    ios?: NullableStringFieldUpdateOperationsInput | string | null
    android?: NullableStringFieldUpdateOperationsInput | string | null
    clicks?: IntFieldUpdateOperationsInput | number
    publicStats?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    proxy?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_term?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    rewrite?: BoolFieldUpdateOperationsInput | boolean
    ios?: NullableStringFieldUpdateOperationsInput | string | null
    android?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    clicks?: IntFieldUpdateOperationsInput | number
    publicStats?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagCreateInput = {
    id?: string
    name: string
    color?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTagsInput
    links?: LinkCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    color?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
    links?: LinkUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTagsNestedInput
    links?: LinkUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
    links?: LinkUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
    color?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type TagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type jackson_indexCreateInput = {
    key: string
    storeKey: string
  }

  export type jackson_indexUncheckedCreateInput = {
    id?: number
    key: string
    storeKey: string
  }

  export type jackson_indexUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    storeKey?: StringFieldUpdateOperationsInput | string
  }

  export type jackson_indexUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    storeKey?: StringFieldUpdateOperationsInput | string
  }

  export type jackson_indexCreateManyInput = {
    id?: number
    key: string
    storeKey: string
  }

  export type jackson_indexUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    storeKey?: StringFieldUpdateOperationsInput | string
  }

  export type jackson_indexUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    storeKey?: StringFieldUpdateOperationsInput | string
  }

  export type jackson_storeCreateInput = {
    key: string
    value: string
    iv?: string | null
    tag?: string | null
    createdAt?: Date | string
    modifiedAt?: Date | string | null
  }

  export type jackson_storeUncheckedCreateInput = {
    key: string
    value: string
    iv?: string | null
    tag?: string | null
    createdAt?: Date | string
    modifiedAt?: Date | string | null
  }

  export type jackson_storeUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    iv?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jackson_storeUncheckedUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    iv?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jackson_storeCreateManyInput = {
    key: string
    value: string
    iv?: string | null
    tag?: string | null
    createdAt?: Date | string
    modifiedAt?: Date | string | null
  }

  export type jackson_storeUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    iv?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jackson_storeUncheckedUpdateManyInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    iv?: NullableStringFieldUpdateOperationsInput | string | null
    tag?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jackson_ttlCreateInput = {
    key: string
    expiresAt: bigint | number
  }

  export type jackson_ttlUncheckedCreateInput = {
    key: string
    expiresAt: bigint | number
  }

  export type jackson_ttlUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    expiresAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type jackson_ttlUncheckedUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    expiresAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type jackson_ttlCreateManyInput = {
    key: string
    expiresAt: bigint | number
  }

  export type jackson_ttlUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    expiresAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type jackson_ttlUncheckedUpdateManyInput = {
    key?: StringFieldUpdateOperationsInput | string
    expiresAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AuditsOrderByRelevanceInput = {
    fields: Enumerable<AuditsOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type AuditsCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    auditId?: SortOrder
    auditType?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    action?: SortOrder
    auditChanges?: SortOrder
    version?: SortOrder
  }

  export type AuditsAvgOrderByAggregateInput = {
    id?: SortOrder
    auditId?: SortOrder
    version?: SortOrder
  }

  export type AuditsMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    auditId?: SortOrder
    auditType?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    action?: SortOrder
    auditChanges?: SortOrder
    version?: SortOrder
  }

  export type AuditsMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    auditId?: SortOrder
    auditType?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    action?: SortOrder
    auditChanges?: SortOrder
    version?: SortOrder
  }

  export type AuditsSumOrderByAggregateInput = {
    id?: SortOrder
    auditId?: SortOrder
    version?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type SiteListRelationFilter = {
    every?: SiteWhereInput
    some?: SiteWhereInput
    none?: SiteWhereInput
  }

  export type SiteTemplateDataDefRelationFilter = {
    is?: SiteTemplateDataDefWhereInput | null
    isNot?: SiteTemplateDataDefWhereInput | null
  }

  export type SiteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SiteTemplateOrderByRelevanceInput = {
    fields: Enumerable<SiteTemplateOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type SiteTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    template?: SortOrder
  }

  export type SiteTemplateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SiteTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    template?: SortOrder
  }

  export type SiteTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    template?: SortOrder
  }

  export type SiteTemplateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type SiteTemplateRelationFilter = {
    is?: SiteTemplateWhereInput | null
    isNot?: SiteTemplateWhereInput | null
  }

  export type SiteTemplateDataDefCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    siteTemplateId?: SortOrder
    defData?: SortOrder
  }

  export type SiteTemplateDataDefAvgOrderByAggregateInput = {
    id?: SortOrder
    siteTemplateId?: SortOrder
  }

  export type SiteTemplateDataDefMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    siteTemplateId?: SortOrder
  }

  export type SiteTemplateDataDefMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    siteTemplateId?: SortOrder
  }

  export type SiteTemplateDataDefSumOrderByAggregateInput = {
    id?: SortOrder
    siteTemplateId?: SortOrder
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type CustomerOrderByRelevanceInput = {
    fields: Enumerable<CustomerOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    extendData?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type SiteOrderByRelevanceInput = {
    fields: Enumerable<SiteOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type SiteCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    cosUrl?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
    slotData?: SortOrder
  }

  export type SiteAvgOrderByAggregateInput = {
    id?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
  }

  export type SiteMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    cosUrl?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
  }

  export type SiteMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    cosUrl?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
  }

  export type SiteSumOrderByAggregateInput = {
    id?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type ProjectUsersListRelationFilter = {
    every?: ProjectUsersWhereInput
    some?: ProjectUsersWhereInput
    none?: ProjectUsersWhereInput
  }

  export type LinkListRelationFilter = {
    every?: LinkWhereInput
    some?: LinkWhereInput
    none?: LinkWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectUsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: Enumerable<UserOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AccountOrderByRelevanceInput = {
    fields: Enumerable<AccountOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    refresh_token_expires_in?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    refresh_token_expires_in?: SortOrder
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    refresh_token_expires_in?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    refresh_token_expires_in?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    refresh_token_expires_in?: SortOrder
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type SessionOrderByRelevanceInput = {
    fields: Enumerable<SessionOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenOrderByRelevanceInput = {
    fields: Enumerable<VerificationTokenOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type ProjectInviteListRelationFilter = {
    every?: ProjectInviteWhereInput
    some?: ProjectInviteWhereInput
    none?: ProjectInviteWhereInput
  }

  export type SentEmailListRelationFilter = {
    every?: SentEmailWhereInput
    some?: SentEmailWhereInput
    none?: SentEmailWhereInput
  }

  export type DomainListRelationFilter = {
    every?: DomainWhereInput
    some?: DomainWhereInput
    none?: DomainWhereInput
  }

  export type TagListRelationFilter = {
    every?: TagWhereInput
    some?: TagWhereInput
    none?: TagWhereInput
  }

  export type ProjectInviteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SentEmailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DomainOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelevanceInput = {
    fields: Enumerable<ProjectOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    password?: SortOrder
    type?: SortOrder
    usage?: SortOrder
    usageLimit?: SortOrder
    plan?: SortOrder
    stripeId?: SortOrder
    billingCycleStart?: SortOrder
    region?: SortOrder
    endpoint?: SortOrder
    bucket?: SortOrder
    useHost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    usage?: SortOrder
    usageLimit?: SortOrder
    billingCycleStart?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    password?: SortOrder
    type?: SortOrder
    usage?: SortOrder
    usageLimit?: SortOrder
    plan?: SortOrder
    stripeId?: SortOrder
    billingCycleStart?: SortOrder
    region?: SortOrder
    endpoint?: SortOrder
    bucket?: SortOrder
    useHost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logo?: SortOrder
    password?: SortOrder
    type?: SortOrder
    usage?: SortOrder
    usageLimit?: SortOrder
    plan?: SortOrder
    stripeId?: SortOrder
    billingCycleStart?: SortOrder
    region?: SortOrder
    endpoint?: SortOrder
    bucket?: SortOrder
    useHost?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    usage?: SortOrder
    usageLimit?: SortOrder
    billingCycleStart?: SortOrder
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type ProjectInviteOrderByRelevanceInput = {
    fields: Enumerable<ProjectInviteOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type ProjectInviteEmailProjectIdCompoundUniqueInput = {
    email: string
    projectId: string
  }

  export type ProjectInviteCountOrderByAggregateInput = {
    email?: SortOrder
    expires?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectInviteMaxOrderByAggregateInput = {
    email?: SortOrder
    expires?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectInviteMinOrderByAggregateInput = {
    email?: SortOrder
    expires?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type ProjectUsersOrderByRelevanceInput = {
    fields: Enumerable<ProjectUsersOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type ProjectUsersUserIdProjectIdCompoundUniqueInput = {
    userId: string
    projectId: string
  }

  export type ProjectUsersCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectUsersMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type ProjectUsersMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type EnumEmailTypeFilter = {
    equals?: EmailType
    in?: Enumerable<EmailType>
    notIn?: Enumerable<EmailType>
    not?: NestedEnumEmailTypeFilter | EmailType
  }

  export type SentEmailOrderByRelevanceInput = {
    fields: Enumerable<SentEmailOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type SentEmailCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
  }

  export type SentEmailMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
  }

  export type SentEmailMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
  }

  export type EnumEmailTypeWithAggregatesFilter = {
    equals?: EmailType
    in?: Enumerable<EmailType>
    notIn?: Enumerable<EmailType>
    not?: NestedEnumEmailTypeWithAggregatesFilter | EmailType
    _count?: NestedIntFilter
    _min?: NestedEnumEmailTypeFilter
    _max?: NestedEnumEmailTypeFilter
  }

  export type DomainOrderByRelevanceInput = {
    fields: Enumerable<DomainOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type DomainCountOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    verified?: SortOrder
    target?: SortOrder
    type?: SortOrder
    description?: SortOrder
    projectId?: SortOrder
    primary?: SortOrder
    lastChecked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DomainMaxOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    verified?: SortOrder
    target?: SortOrder
    type?: SortOrder
    description?: SortOrder
    projectId?: SortOrder
    primary?: SortOrder
    lastChecked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DomainMinOrderByAggregateInput = {
    id?: SortOrder
    slug?: SortOrder
    verified?: SortOrder
    target?: SortOrder
    type?: SortOrder
    description?: SortOrder
    projectId?: SortOrder
    primary?: SortOrder
    lastChecked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DomainRelationFilter = {
    is?: DomainWhereInput | null
    isNot?: DomainWhereInput | null
  }

  export type TagRelationFilter = {
    is?: TagWhereInput | null
    isNot?: TagWhereInput | null
  }

  export type LinkOrderByRelevanceInput = {
    fields: Enumerable<LinkOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type LinkDomainKeyCompoundUniqueInput = {
    domain: string
    key: string
  }

  export type LinkCountOrderByAggregateInput = {
    id?: SortOrder
    domain?: SortOrder
    key?: SortOrder
    url?: SortOrder
    archived?: SortOrder
    expiresAt?: SortOrder
    password?: SortOrder
    proxy?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    utm_source?: SortOrder
    utm_medium?: SortOrder
    utm_campaign?: SortOrder
    utm_term?: SortOrder
    utm_content?: SortOrder
    rewrite?: SortOrder
    ios?: SortOrder
    android?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    clicks?: SortOrder
    publicStats?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagId?: SortOrder
  }

  export type LinkAvgOrderByAggregateInput = {
    clicks?: SortOrder
  }

  export type LinkMaxOrderByAggregateInput = {
    id?: SortOrder
    domain?: SortOrder
    key?: SortOrder
    url?: SortOrder
    archived?: SortOrder
    expiresAt?: SortOrder
    password?: SortOrder
    proxy?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    utm_source?: SortOrder
    utm_medium?: SortOrder
    utm_campaign?: SortOrder
    utm_term?: SortOrder
    utm_content?: SortOrder
    rewrite?: SortOrder
    ios?: SortOrder
    android?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    clicks?: SortOrder
    publicStats?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagId?: SortOrder
  }

  export type LinkMinOrderByAggregateInput = {
    id?: SortOrder
    domain?: SortOrder
    key?: SortOrder
    url?: SortOrder
    archived?: SortOrder
    expiresAt?: SortOrder
    password?: SortOrder
    proxy?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    utm_source?: SortOrder
    utm_medium?: SortOrder
    utm_campaign?: SortOrder
    utm_term?: SortOrder
    utm_content?: SortOrder
    rewrite?: SortOrder
    ios?: SortOrder
    android?: SortOrder
    userId?: SortOrder
    projectId?: SortOrder
    clicks?: SortOrder
    publicStats?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tagId?: SortOrder
  }

  export type LinkSumOrderByAggregateInput = {
    clicks?: SortOrder
  }

  export type TagOrderByRelevanceInput = {
    fields: Enumerable<TagOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type TagNameProjectIdCompoundUniqueInput = {
    name: string
    projectId: string
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    projectId?: SortOrder
  }

  export type jackson_indexOrderByRelevanceInput = {
    fields: Enumerable<jackson_indexOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type jackson_indexCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    storeKey?: SortOrder
  }

  export type jackson_indexAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type jackson_indexMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    storeKey?: SortOrder
  }

  export type jackson_indexMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    storeKey?: SortOrder
  }

  export type jackson_indexSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type jackson_storeOrderByRelevanceInput = {
    fields: Enumerable<jackson_storeOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type jackson_storeCountOrderByAggregateInput = {
    key?: SortOrder
    value?: SortOrder
    iv?: SortOrder
    tag?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
  }

  export type jackson_storeMaxOrderByAggregateInput = {
    key?: SortOrder
    value?: SortOrder
    iv?: SortOrder
    tag?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
  }

  export type jackson_storeMinOrderByAggregateInput = {
    key?: SortOrder
    value?: SortOrder
    iv?: SortOrder
    tag?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
  }

  export type BigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number> | bigint | number
    notIn?: Enumerable<bigint> | Enumerable<number> | bigint | number
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type jackson_ttlOrderByRelevanceInput = {
    fields: Enumerable<jackson_ttlOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type jackson_ttlCountOrderByAggregateInput = {
    key?: SortOrder
    expiresAt?: SortOrder
  }

  export type jackson_ttlAvgOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type jackson_ttlMaxOrderByAggregateInput = {
    key?: SortOrder
    expiresAt?: SortOrder
  }

  export type jackson_ttlMinOrderByAggregateInput = {
    key?: SortOrder
    expiresAt?: SortOrder
  }

  export type jackson_ttlSumOrderByAggregateInput = {
    expiresAt?: SortOrder
  }

  export type BigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number> | bigint | number
    notIn?: Enumerable<bigint> | Enumerable<number> | bigint | number
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SiteCreateNestedManyWithoutSiteTemplateInput = {
    create?: XOR<Enumerable<SiteCreateWithoutSiteTemplateInput>, Enumerable<SiteUncheckedCreateWithoutSiteTemplateInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutSiteTemplateInput>
    createMany?: SiteCreateManySiteTemplateInputEnvelope
    connect?: Enumerable<SiteWhereUniqueInput>
  }

  export type SiteTemplateDataDefCreateNestedOneWithoutSiteTemplateInput = {
    create?: XOR<SiteTemplateDataDefCreateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput>
    connectOrCreate?: SiteTemplateDataDefCreateOrConnectWithoutSiteTemplateInput
    connect?: SiteTemplateDataDefWhereUniqueInput
  }

  export type SiteUncheckedCreateNestedManyWithoutSiteTemplateInput = {
    create?: XOR<Enumerable<SiteCreateWithoutSiteTemplateInput>, Enumerable<SiteUncheckedCreateWithoutSiteTemplateInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutSiteTemplateInput>
    createMany?: SiteCreateManySiteTemplateInputEnvelope
    connect?: Enumerable<SiteWhereUniqueInput>
  }

  export type SiteTemplateDataDefUncheckedCreateNestedOneWithoutSiteTemplateInput = {
    create?: XOR<SiteTemplateDataDefCreateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput>
    connectOrCreate?: SiteTemplateDataDefCreateOrConnectWithoutSiteTemplateInput
    connect?: SiteTemplateDataDefWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type SiteUpdateManyWithoutSiteTemplateNestedInput = {
    create?: XOR<Enumerable<SiteCreateWithoutSiteTemplateInput>, Enumerable<SiteUncheckedCreateWithoutSiteTemplateInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutSiteTemplateInput>
    upsert?: Enumerable<SiteUpsertWithWhereUniqueWithoutSiteTemplateInput>
    createMany?: SiteCreateManySiteTemplateInputEnvelope
    set?: Enumerable<SiteWhereUniqueInput>
    disconnect?: Enumerable<SiteWhereUniqueInput>
    delete?: Enumerable<SiteWhereUniqueInput>
    connect?: Enumerable<SiteWhereUniqueInput>
    update?: Enumerable<SiteUpdateWithWhereUniqueWithoutSiteTemplateInput>
    updateMany?: Enumerable<SiteUpdateManyWithWhereWithoutSiteTemplateInput>
    deleteMany?: Enumerable<SiteScalarWhereInput>
  }

  export type SiteTemplateDataDefUpdateOneWithoutSiteTemplateNestedInput = {
    create?: XOR<SiteTemplateDataDefCreateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput>
    connectOrCreate?: SiteTemplateDataDefCreateOrConnectWithoutSiteTemplateInput
    upsert?: SiteTemplateDataDefUpsertWithoutSiteTemplateInput
    disconnect?: boolean
    delete?: boolean
    connect?: SiteTemplateDataDefWhereUniqueInput
    update?: XOR<SiteTemplateDataDefUpdateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedUpdateWithoutSiteTemplateInput>
  }

  export type SiteUncheckedUpdateManyWithoutSiteTemplateNestedInput = {
    create?: XOR<Enumerable<SiteCreateWithoutSiteTemplateInput>, Enumerable<SiteUncheckedCreateWithoutSiteTemplateInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutSiteTemplateInput>
    upsert?: Enumerable<SiteUpsertWithWhereUniqueWithoutSiteTemplateInput>
    createMany?: SiteCreateManySiteTemplateInputEnvelope
    set?: Enumerable<SiteWhereUniqueInput>
    disconnect?: Enumerable<SiteWhereUniqueInput>
    delete?: Enumerable<SiteWhereUniqueInput>
    connect?: Enumerable<SiteWhereUniqueInput>
    update?: Enumerable<SiteUpdateWithWhereUniqueWithoutSiteTemplateInput>
    updateMany?: Enumerable<SiteUpdateManyWithWhereWithoutSiteTemplateInput>
    deleteMany?: Enumerable<SiteScalarWhereInput>
  }

  export type SiteTemplateDataDefUncheckedUpdateOneWithoutSiteTemplateNestedInput = {
    create?: XOR<SiteTemplateDataDefCreateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput>
    connectOrCreate?: SiteTemplateDataDefCreateOrConnectWithoutSiteTemplateInput
    upsert?: SiteTemplateDataDefUpsertWithoutSiteTemplateInput
    disconnect?: boolean
    delete?: boolean
    connect?: SiteTemplateDataDefWhereUniqueInput
    update?: XOR<SiteTemplateDataDefUpdateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedUpdateWithoutSiteTemplateInput>
  }

  export type SiteTemplateCreateNestedOneWithoutSiteTemplateDataDefInput = {
    create?: XOR<SiteTemplateCreateWithoutSiteTemplateDataDefInput, SiteTemplateUncheckedCreateWithoutSiteTemplateDataDefInput>
    connectOrCreate?: SiteTemplateCreateOrConnectWithoutSiteTemplateDataDefInput
    connect?: SiteTemplateWhereUniqueInput
  }

  export type SiteTemplateUpdateOneRequiredWithoutSiteTemplateDataDefNestedInput = {
    create?: XOR<SiteTemplateCreateWithoutSiteTemplateDataDefInput, SiteTemplateUncheckedCreateWithoutSiteTemplateDataDefInput>
    connectOrCreate?: SiteTemplateCreateOrConnectWithoutSiteTemplateDataDefInput
    upsert?: SiteTemplateUpsertWithoutSiteTemplateDataDefInput
    connect?: SiteTemplateWhereUniqueInput
    update?: XOR<SiteTemplateUpdateWithoutSiteTemplateDataDefInput, SiteTemplateUncheckedUpdateWithoutSiteTemplateDataDefInput>
  }

  export type SiteCreateNestedManyWithoutCustomerInput = {
    create?: XOR<Enumerable<SiteCreateWithoutCustomerInput>, Enumerable<SiteUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutCustomerInput>
    createMany?: SiteCreateManyCustomerInputEnvelope
    connect?: Enumerable<SiteWhereUniqueInput>
  }

  export type SiteUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<Enumerable<SiteCreateWithoutCustomerInput>, Enumerable<SiteUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutCustomerInput>
    createMany?: SiteCreateManyCustomerInputEnvelope
    connect?: Enumerable<SiteWhereUniqueInput>
  }

  export type SiteUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<Enumerable<SiteCreateWithoutCustomerInput>, Enumerable<SiteUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutCustomerInput>
    upsert?: Enumerable<SiteUpsertWithWhereUniqueWithoutCustomerInput>
    createMany?: SiteCreateManyCustomerInputEnvelope
    set?: Enumerable<SiteWhereUniqueInput>
    disconnect?: Enumerable<SiteWhereUniqueInput>
    delete?: Enumerable<SiteWhereUniqueInput>
    connect?: Enumerable<SiteWhereUniqueInput>
    update?: Enumerable<SiteUpdateWithWhereUniqueWithoutCustomerInput>
    updateMany?: Enumerable<SiteUpdateManyWithWhereWithoutCustomerInput>
    deleteMany?: Enumerable<SiteScalarWhereInput>
  }

  export type SiteUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<Enumerable<SiteCreateWithoutCustomerInput>, Enumerable<SiteUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutCustomerInput>
    upsert?: Enumerable<SiteUpsertWithWhereUniqueWithoutCustomerInput>
    createMany?: SiteCreateManyCustomerInputEnvelope
    set?: Enumerable<SiteWhereUniqueInput>
    disconnect?: Enumerable<SiteWhereUniqueInput>
    delete?: Enumerable<SiteWhereUniqueInput>
    connect?: Enumerable<SiteWhereUniqueInput>
    update?: Enumerable<SiteUpdateWithWhereUniqueWithoutCustomerInput>
    updateMany?: Enumerable<SiteUpdateManyWithWhereWithoutCustomerInput>
    deleteMany?: Enumerable<SiteScalarWhereInput>
  }

  export type SiteTemplateCreateNestedOneWithoutSiteInput = {
    create?: XOR<SiteTemplateCreateWithoutSiteInput, SiteTemplateUncheckedCreateWithoutSiteInput>
    connectOrCreate?: SiteTemplateCreateOrConnectWithoutSiteInput
    connect?: SiteTemplateWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutSiteInput = {
    create?: XOR<CustomerCreateWithoutSiteInput, CustomerUncheckedCreateWithoutSiteInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSiteInput
    connect?: CustomerWhereUniqueInput
  }

  export type SiteTemplateUpdateOneRequiredWithoutSiteNestedInput = {
    create?: XOR<SiteTemplateCreateWithoutSiteInput, SiteTemplateUncheckedCreateWithoutSiteInput>
    connectOrCreate?: SiteTemplateCreateOrConnectWithoutSiteInput
    upsert?: SiteTemplateUpsertWithoutSiteInput
    connect?: SiteTemplateWhereUniqueInput
    update?: XOR<SiteTemplateUpdateWithoutSiteInput, SiteTemplateUncheckedUpdateWithoutSiteInput>
  }

  export type CustomerUpdateOneRequiredWithoutSiteNestedInput = {
    create?: XOR<CustomerCreateWithoutSiteInput, CustomerUncheckedCreateWithoutSiteInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSiteInput
    upsert?: CustomerUpsertWithoutSiteInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<CustomerUpdateWithoutSiteInput, CustomerUncheckedUpdateWithoutSiteInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type ProjectUsersCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProjectUsersCreateWithoutUserInput>, Enumerable<ProjectUsersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProjectUsersCreateOrConnectWithoutUserInput>
    createMany?: ProjectUsersCreateManyUserInputEnvelope
    connect?: Enumerable<ProjectUsersWhereUniqueInput>
  }

  export type LinkCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<LinkCreateWithoutUserInput>, Enumerable<LinkUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutUserInput>
    createMany?: LinkCreateManyUserInputEnvelope
    connect?: Enumerable<LinkWhereUniqueInput>
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: Enumerable<AccountWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type ProjectUsersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProjectUsersCreateWithoutUserInput>, Enumerable<ProjectUsersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProjectUsersCreateOrConnectWithoutUserInput>
    createMany?: ProjectUsersCreateManyUserInputEnvelope
    connect?: Enumerable<ProjectUsersWhereUniqueInput>
  }

  export type LinkUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<LinkCreateWithoutUserInput>, Enumerable<LinkUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutUserInput>
    createMany?: LinkCreateManyUserInputEnvelope
    connect?: Enumerable<LinkWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type ProjectUsersUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProjectUsersCreateWithoutUserInput>, Enumerable<ProjectUsersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProjectUsersCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProjectUsersUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProjectUsersCreateManyUserInputEnvelope
    set?: Enumerable<ProjectUsersWhereUniqueInput>
    disconnect?: Enumerable<ProjectUsersWhereUniqueInput>
    delete?: Enumerable<ProjectUsersWhereUniqueInput>
    connect?: Enumerable<ProjectUsersWhereUniqueInput>
    update?: Enumerable<ProjectUsersUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProjectUsersUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProjectUsersScalarWhereInput>
  }

  export type LinkUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<LinkCreateWithoutUserInput>, Enumerable<LinkUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<LinkUpsertWithWhereUniqueWithoutUserInput>
    createMany?: LinkCreateManyUserInputEnvelope
    set?: Enumerable<LinkWhereUniqueInput>
    disconnect?: Enumerable<LinkWhereUniqueInput>
    delete?: Enumerable<LinkWhereUniqueInput>
    connect?: Enumerable<LinkWhereUniqueInput>
    update?: Enumerable<LinkUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LinkUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LinkScalarWhereInput>
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<AccountCreateWithoutUserInput>, Enumerable<AccountUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutUserInput>
    createMany?: AccountCreateManyUserInputEnvelope
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type ProjectUsersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProjectUsersCreateWithoutUserInput>, Enumerable<ProjectUsersUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProjectUsersCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProjectUsersUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProjectUsersCreateManyUserInputEnvelope
    set?: Enumerable<ProjectUsersWhereUniqueInput>
    disconnect?: Enumerable<ProjectUsersWhereUniqueInput>
    delete?: Enumerable<ProjectUsersWhereUniqueInput>
    connect?: Enumerable<ProjectUsersWhereUniqueInput>
    update?: Enumerable<ProjectUsersUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProjectUsersUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProjectUsersScalarWhereInput>
  }

  export type LinkUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<LinkCreateWithoutUserInput>, Enumerable<LinkUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<LinkUpsertWithWhereUniqueWithoutUserInput>
    createMany?: LinkCreateManyUserInputEnvelope
    set?: Enumerable<LinkWhereUniqueInput>
    disconnect?: Enumerable<LinkWhereUniqueInput>
    delete?: Enumerable<LinkWhereUniqueInput>
    connect?: Enumerable<LinkWhereUniqueInput>
    update?: Enumerable<LinkUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LinkUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LinkScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type ProjectUsersCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<ProjectUsersCreateWithoutProjectInput>, Enumerable<ProjectUsersUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ProjectUsersCreateOrConnectWithoutProjectInput>
    createMany?: ProjectUsersCreateManyProjectInputEnvelope
    connect?: Enumerable<ProjectUsersWhereUniqueInput>
  }

  export type ProjectInviteCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<ProjectInviteCreateWithoutProjectInput>, Enumerable<ProjectInviteUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ProjectInviteCreateOrConnectWithoutProjectInput>
    createMany?: ProjectInviteCreateManyProjectInputEnvelope
    connect?: Enumerable<ProjectInviteWhereUniqueInput>
  }

  export type SentEmailCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<SentEmailCreateWithoutProjectInput>, Enumerable<SentEmailUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<SentEmailCreateOrConnectWithoutProjectInput>
    createMany?: SentEmailCreateManyProjectInputEnvelope
    connect?: Enumerable<SentEmailWhereUniqueInput>
  }

  export type DomainCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<DomainCreateWithoutProjectInput>, Enumerable<DomainUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<DomainCreateOrConnectWithoutProjectInput>
    createMany?: DomainCreateManyProjectInputEnvelope
    connect?: Enumerable<DomainWhereUniqueInput>
  }

  export type LinkCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<LinkCreateWithoutProjectInput>, Enumerable<LinkUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutProjectInput>
    createMany?: LinkCreateManyProjectInputEnvelope
    connect?: Enumerable<LinkWhereUniqueInput>
  }

  export type TagCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<TagCreateWithoutProjectInput>, Enumerable<TagUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutProjectInput>
    createMany?: TagCreateManyProjectInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type ProjectUsersUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<ProjectUsersCreateWithoutProjectInput>, Enumerable<ProjectUsersUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ProjectUsersCreateOrConnectWithoutProjectInput>
    createMany?: ProjectUsersCreateManyProjectInputEnvelope
    connect?: Enumerable<ProjectUsersWhereUniqueInput>
  }

  export type ProjectInviteUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<ProjectInviteCreateWithoutProjectInput>, Enumerable<ProjectInviteUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ProjectInviteCreateOrConnectWithoutProjectInput>
    createMany?: ProjectInviteCreateManyProjectInputEnvelope
    connect?: Enumerable<ProjectInviteWhereUniqueInput>
  }

  export type SentEmailUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<SentEmailCreateWithoutProjectInput>, Enumerable<SentEmailUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<SentEmailCreateOrConnectWithoutProjectInput>
    createMany?: SentEmailCreateManyProjectInputEnvelope
    connect?: Enumerable<SentEmailWhereUniqueInput>
  }

  export type DomainUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<DomainCreateWithoutProjectInput>, Enumerable<DomainUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<DomainCreateOrConnectWithoutProjectInput>
    createMany?: DomainCreateManyProjectInputEnvelope
    connect?: Enumerable<DomainWhereUniqueInput>
  }

  export type LinkUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<LinkCreateWithoutProjectInput>, Enumerable<LinkUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutProjectInput>
    createMany?: LinkCreateManyProjectInputEnvelope
    connect?: Enumerable<LinkWhereUniqueInput>
  }

  export type TagUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<Enumerable<TagCreateWithoutProjectInput>, Enumerable<TagUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutProjectInput>
    createMany?: TagCreateManyProjectInputEnvelope
    connect?: Enumerable<TagWhereUniqueInput>
  }

  export type ProjectUsersUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<ProjectUsersCreateWithoutProjectInput>, Enumerable<ProjectUsersUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ProjectUsersCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<ProjectUsersUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: ProjectUsersCreateManyProjectInputEnvelope
    set?: Enumerable<ProjectUsersWhereUniqueInput>
    disconnect?: Enumerable<ProjectUsersWhereUniqueInput>
    delete?: Enumerable<ProjectUsersWhereUniqueInput>
    connect?: Enumerable<ProjectUsersWhereUniqueInput>
    update?: Enumerable<ProjectUsersUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<ProjectUsersUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<ProjectUsersScalarWhereInput>
  }

  export type ProjectInviteUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<ProjectInviteCreateWithoutProjectInput>, Enumerable<ProjectInviteUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ProjectInviteCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<ProjectInviteUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: ProjectInviteCreateManyProjectInputEnvelope
    set?: Enumerable<ProjectInviteWhereUniqueInput>
    disconnect?: Enumerable<ProjectInviteWhereUniqueInput>
    delete?: Enumerable<ProjectInviteWhereUniqueInput>
    connect?: Enumerable<ProjectInviteWhereUniqueInput>
    update?: Enumerable<ProjectInviteUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<ProjectInviteUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<ProjectInviteScalarWhereInput>
  }

  export type SentEmailUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<SentEmailCreateWithoutProjectInput>, Enumerable<SentEmailUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<SentEmailCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<SentEmailUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: SentEmailCreateManyProjectInputEnvelope
    set?: Enumerable<SentEmailWhereUniqueInput>
    disconnect?: Enumerable<SentEmailWhereUniqueInput>
    delete?: Enumerable<SentEmailWhereUniqueInput>
    connect?: Enumerable<SentEmailWhereUniqueInput>
    update?: Enumerable<SentEmailUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<SentEmailUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<SentEmailScalarWhereInput>
  }

  export type DomainUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<DomainCreateWithoutProjectInput>, Enumerable<DomainUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<DomainCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<DomainUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: DomainCreateManyProjectInputEnvelope
    set?: Enumerable<DomainWhereUniqueInput>
    disconnect?: Enumerable<DomainWhereUniqueInput>
    delete?: Enumerable<DomainWhereUniqueInput>
    connect?: Enumerable<DomainWhereUniqueInput>
    update?: Enumerable<DomainUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<DomainUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<DomainScalarWhereInput>
  }

  export type LinkUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<LinkCreateWithoutProjectInput>, Enumerable<LinkUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<LinkUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: LinkCreateManyProjectInputEnvelope
    set?: Enumerable<LinkWhereUniqueInput>
    disconnect?: Enumerable<LinkWhereUniqueInput>
    delete?: Enumerable<LinkWhereUniqueInput>
    connect?: Enumerable<LinkWhereUniqueInput>
    update?: Enumerable<LinkUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<LinkUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<LinkScalarWhereInput>
  }

  export type TagUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<TagCreateWithoutProjectInput>, Enumerable<TagUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: TagCreateManyProjectInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type ProjectUsersUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<ProjectUsersCreateWithoutProjectInput>, Enumerable<ProjectUsersUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ProjectUsersCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<ProjectUsersUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: ProjectUsersCreateManyProjectInputEnvelope
    set?: Enumerable<ProjectUsersWhereUniqueInput>
    disconnect?: Enumerable<ProjectUsersWhereUniqueInput>
    delete?: Enumerable<ProjectUsersWhereUniqueInput>
    connect?: Enumerable<ProjectUsersWhereUniqueInput>
    update?: Enumerable<ProjectUsersUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<ProjectUsersUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<ProjectUsersScalarWhereInput>
  }

  export type ProjectInviteUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<ProjectInviteCreateWithoutProjectInput>, Enumerable<ProjectInviteUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<ProjectInviteCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<ProjectInviteUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: ProjectInviteCreateManyProjectInputEnvelope
    set?: Enumerable<ProjectInviteWhereUniqueInput>
    disconnect?: Enumerable<ProjectInviteWhereUniqueInput>
    delete?: Enumerable<ProjectInviteWhereUniqueInput>
    connect?: Enumerable<ProjectInviteWhereUniqueInput>
    update?: Enumerable<ProjectInviteUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<ProjectInviteUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<ProjectInviteScalarWhereInput>
  }

  export type SentEmailUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<SentEmailCreateWithoutProjectInput>, Enumerable<SentEmailUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<SentEmailCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<SentEmailUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: SentEmailCreateManyProjectInputEnvelope
    set?: Enumerable<SentEmailWhereUniqueInput>
    disconnect?: Enumerable<SentEmailWhereUniqueInput>
    delete?: Enumerable<SentEmailWhereUniqueInput>
    connect?: Enumerable<SentEmailWhereUniqueInput>
    update?: Enumerable<SentEmailUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<SentEmailUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<SentEmailScalarWhereInput>
  }

  export type DomainUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<DomainCreateWithoutProjectInput>, Enumerable<DomainUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<DomainCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<DomainUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: DomainCreateManyProjectInputEnvelope
    set?: Enumerable<DomainWhereUniqueInput>
    disconnect?: Enumerable<DomainWhereUniqueInput>
    delete?: Enumerable<DomainWhereUniqueInput>
    connect?: Enumerable<DomainWhereUniqueInput>
    update?: Enumerable<DomainUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<DomainUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<DomainScalarWhereInput>
  }

  export type LinkUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<LinkCreateWithoutProjectInput>, Enumerable<LinkUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<LinkUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: LinkCreateManyProjectInputEnvelope
    set?: Enumerable<LinkWhereUniqueInput>
    disconnect?: Enumerable<LinkWhereUniqueInput>
    delete?: Enumerable<LinkWhereUniqueInput>
    connect?: Enumerable<LinkWhereUniqueInput>
    update?: Enumerable<LinkUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<LinkUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<LinkScalarWhereInput>
  }

  export type TagUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<Enumerable<TagCreateWithoutProjectInput>, Enumerable<TagUncheckedCreateWithoutProjectInput>>
    connectOrCreate?: Enumerable<TagCreateOrConnectWithoutProjectInput>
    upsert?: Enumerable<TagUpsertWithWhereUniqueWithoutProjectInput>
    createMany?: TagCreateManyProjectInputEnvelope
    set?: Enumerable<TagWhereUniqueInput>
    disconnect?: Enumerable<TagWhereUniqueInput>
    delete?: Enumerable<TagWhereUniqueInput>
    connect?: Enumerable<TagWhereUniqueInput>
    update?: Enumerable<TagUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<TagUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<TagScalarWhereInput>
  }

  export type ProjectCreateNestedOneWithoutInvitesInput = {
    create?: XOR<ProjectCreateWithoutInvitesInput, ProjectUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutInvitesInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutInvitesNestedInput = {
    create?: XOR<ProjectCreateWithoutInvitesInput, ProjectUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutInvitesInput
    upsert?: ProjectUpsertWithoutInvitesInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutInvitesInput, ProjectUncheckedUpdateWithoutInvitesInput>
  }

  export type UserCreateNestedOneWithoutProjectsInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutUsersInput = {
    create?: XOR<ProjectCreateWithoutUsersInput, ProjectUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUsersInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type UserUpdateOneRequiredWithoutProjectsNestedInput = {
    create?: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectsInput
    upsert?: UserUpsertWithoutProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
  }

  export type ProjectUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<ProjectCreateWithoutUsersInput, ProjectUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutUsersInput
    upsert?: ProjectUpsertWithoutUsersInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutUsersInput, ProjectUncheckedUpdateWithoutUsersInput>
  }

  export type ProjectCreateNestedOneWithoutSentEmailsInput = {
    create?: XOR<ProjectCreateWithoutSentEmailsInput, ProjectUncheckedCreateWithoutSentEmailsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSentEmailsInput
    connect?: ProjectWhereUniqueInput
  }

  export type EnumEmailTypeFieldUpdateOperationsInput = {
    set?: EmailType
  }

  export type ProjectUpdateOneWithoutSentEmailsNestedInput = {
    create?: XOR<ProjectCreateWithoutSentEmailsInput, ProjectUncheckedCreateWithoutSentEmailsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutSentEmailsInput
    upsert?: ProjectUpsertWithoutSentEmailsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutSentEmailsInput, ProjectUncheckedUpdateWithoutSentEmailsInput>
  }

  export type ProjectCreateNestedOneWithoutDomainsInput = {
    create?: XOR<ProjectCreateWithoutDomainsInput, ProjectUncheckedCreateWithoutDomainsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDomainsInput
    connect?: ProjectWhereUniqueInput
  }

  export type LinkCreateNestedManyWithoutProjectDomainInput = {
    create?: XOR<Enumerable<LinkCreateWithoutProjectDomainInput>, Enumerable<LinkUncheckedCreateWithoutProjectDomainInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutProjectDomainInput>
    createMany?: LinkCreateManyProjectDomainInputEnvelope
    connect?: Enumerable<LinkWhereUniqueInput>
  }

  export type LinkUncheckedCreateNestedManyWithoutProjectDomainInput = {
    create?: XOR<Enumerable<LinkCreateWithoutProjectDomainInput>, Enumerable<LinkUncheckedCreateWithoutProjectDomainInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutProjectDomainInput>
    createMany?: LinkCreateManyProjectDomainInputEnvelope
    connect?: Enumerable<LinkWhereUniqueInput>
  }

  export type ProjectUpdateOneWithoutDomainsNestedInput = {
    create?: XOR<ProjectCreateWithoutDomainsInput, ProjectUncheckedCreateWithoutDomainsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDomainsInput
    upsert?: ProjectUpsertWithoutDomainsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutDomainsInput, ProjectUncheckedUpdateWithoutDomainsInput>
  }

  export type LinkUpdateManyWithoutProjectDomainNestedInput = {
    create?: XOR<Enumerable<LinkCreateWithoutProjectDomainInput>, Enumerable<LinkUncheckedCreateWithoutProjectDomainInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutProjectDomainInput>
    upsert?: Enumerable<LinkUpsertWithWhereUniqueWithoutProjectDomainInput>
    createMany?: LinkCreateManyProjectDomainInputEnvelope
    set?: Enumerable<LinkWhereUniqueInput>
    disconnect?: Enumerable<LinkWhereUniqueInput>
    delete?: Enumerable<LinkWhereUniqueInput>
    connect?: Enumerable<LinkWhereUniqueInput>
    update?: Enumerable<LinkUpdateWithWhereUniqueWithoutProjectDomainInput>
    updateMany?: Enumerable<LinkUpdateManyWithWhereWithoutProjectDomainInput>
    deleteMany?: Enumerable<LinkScalarWhereInput>
  }

  export type LinkUncheckedUpdateManyWithoutProjectDomainNestedInput = {
    create?: XOR<Enumerable<LinkCreateWithoutProjectDomainInput>, Enumerable<LinkUncheckedCreateWithoutProjectDomainInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutProjectDomainInput>
    upsert?: Enumerable<LinkUpsertWithWhereUniqueWithoutProjectDomainInput>
    createMany?: LinkCreateManyProjectDomainInputEnvelope
    set?: Enumerable<LinkWhereUniqueInput>
    disconnect?: Enumerable<LinkWhereUniqueInput>
    delete?: Enumerable<LinkWhereUniqueInput>
    connect?: Enumerable<LinkWhereUniqueInput>
    update?: Enumerable<LinkUpdateWithWhereUniqueWithoutProjectDomainInput>
    updateMany?: Enumerable<LinkUpdateManyWithWhereWithoutProjectDomainInput>
    deleteMany?: Enumerable<LinkScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutLinksInput = {
    create?: XOR<UserCreateWithoutLinksInput, UserUncheckedCreateWithoutLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutLinksInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutLinksInput = {
    create?: XOR<ProjectCreateWithoutLinksInput, ProjectUncheckedCreateWithoutLinksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutLinksInput
    connect?: ProjectWhereUniqueInput
  }

  export type DomainCreateNestedOneWithoutLinksInput = {
    create?: XOR<DomainCreateWithoutLinksInput, DomainUncheckedCreateWithoutLinksInput>
    connectOrCreate?: DomainCreateOrConnectWithoutLinksInput
    connect?: DomainWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutLinksInput = {
    create?: XOR<TagCreateWithoutLinksInput, TagUncheckedCreateWithoutLinksInput>
    connectOrCreate?: TagCreateOrConnectWithoutLinksInput
    connect?: TagWhereUniqueInput
  }

  export type UserUpdateOneWithoutLinksNestedInput = {
    create?: XOR<UserCreateWithoutLinksInput, UserUncheckedCreateWithoutLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutLinksInput
    upsert?: UserUpsertWithoutLinksInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutLinksInput, UserUncheckedUpdateWithoutLinksInput>
  }

  export type ProjectUpdateOneWithoutLinksNestedInput = {
    create?: XOR<ProjectCreateWithoutLinksInput, ProjectUncheckedCreateWithoutLinksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutLinksInput
    upsert?: ProjectUpsertWithoutLinksInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutLinksInput, ProjectUncheckedUpdateWithoutLinksInput>
  }

  export type DomainUpdateOneWithoutLinksNestedInput = {
    create?: XOR<DomainCreateWithoutLinksInput, DomainUncheckedCreateWithoutLinksInput>
    connectOrCreate?: DomainCreateOrConnectWithoutLinksInput
    upsert?: DomainUpsertWithoutLinksInput
    disconnect?: boolean
    delete?: boolean
    connect?: DomainWhereUniqueInput
    update?: XOR<DomainUpdateWithoutLinksInput, DomainUncheckedUpdateWithoutLinksInput>
  }

  export type TagUpdateOneWithoutLinksNestedInput = {
    create?: XOR<TagCreateWithoutLinksInput, TagUncheckedCreateWithoutLinksInput>
    connectOrCreate?: TagCreateOrConnectWithoutLinksInput
    upsert?: TagUpsertWithoutLinksInput
    disconnect?: boolean
    delete?: boolean
    connect?: TagWhereUniqueInput
    update?: XOR<TagUpdateWithoutLinksInput, TagUncheckedUpdateWithoutLinksInput>
  }

  export type ProjectCreateNestedOneWithoutTagsInput = {
    create?: XOR<ProjectCreateWithoutTagsInput, ProjectUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTagsInput
    connect?: ProjectWhereUniqueInput
  }

  export type LinkCreateNestedManyWithoutTagInput = {
    create?: XOR<Enumerable<LinkCreateWithoutTagInput>, Enumerable<LinkUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutTagInput>
    createMany?: LinkCreateManyTagInputEnvelope
    connect?: Enumerable<LinkWhereUniqueInput>
  }

  export type LinkUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<Enumerable<LinkCreateWithoutTagInput>, Enumerable<LinkUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutTagInput>
    createMany?: LinkCreateManyTagInputEnvelope
    connect?: Enumerable<LinkWhereUniqueInput>
  }

  export type ProjectUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<ProjectCreateWithoutTagsInput, ProjectUncheckedCreateWithoutTagsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTagsInput
    upsert?: ProjectUpsertWithoutTagsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<ProjectUpdateWithoutTagsInput, ProjectUncheckedUpdateWithoutTagsInput>
  }

  export type LinkUpdateManyWithoutTagNestedInput = {
    create?: XOR<Enumerable<LinkCreateWithoutTagInput>, Enumerable<LinkUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutTagInput>
    upsert?: Enumerable<LinkUpsertWithWhereUniqueWithoutTagInput>
    createMany?: LinkCreateManyTagInputEnvelope
    set?: Enumerable<LinkWhereUniqueInput>
    disconnect?: Enumerable<LinkWhereUniqueInput>
    delete?: Enumerable<LinkWhereUniqueInput>
    connect?: Enumerable<LinkWhereUniqueInput>
    update?: Enumerable<LinkUpdateWithWhereUniqueWithoutTagInput>
    updateMany?: Enumerable<LinkUpdateManyWithWhereWithoutTagInput>
    deleteMany?: Enumerable<LinkScalarWhereInput>
  }

  export type LinkUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<Enumerable<LinkCreateWithoutTagInput>, Enumerable<LinkUncheckedCreateWithoutTagInput>>
    connectOrCreate?: Enumerable<LinkCreateOrConnectWithoutTagInput>
    upsert?: Enumerable<LinkUpsertWithWhereUniqueWithoutTagInput>
    createMany?: LinkCreateManyTagInputEnvelope
    set?: Enumerable<LinkWhereUniqueInput>
    disconnect?: Enumerable<LinkWhereUniqueInput>
    delete?: Enumerable<LinkWhereUniqueInput>
    connect?: Enumerable<LinkWhereUniqueInput>
    update?: Enumerable<LinkUpdateWithWhereUniqueWithoutTagInput>
    updateMany?: Enumerable<LinkUpdateManyWithWhereWithoutTagInput>
    deleteMany?: Enumerable<LinkScalarWhereInput>
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedEnumEmailTypeFilter = {
    equals?: EmailType
    in?: Enumerable<EmailType>
    notIn?: Enumerable<EmailType>
    not?: NestedEnumEmailTypeFilter | EmailType
  }

  export type NestedEnumEmailTypeWithAggregatesFilter = {
    equals?: EmailType
    in?: Enumerable<EmailType>
    notIn?: Enumerable<EmailType>
    not?: NestedEnumEmailTypeWithAggregatesFilter | EmailType
    _count?: NestedIntFilter
    _min?: NestedEnumEmailTypeFilter
    _max?: NestedEnumEmailTypeFilter
  }

  export type NestedBigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number> | bigint | number
    notIn?: Enumerable<bigint> | Enumerable<number> | bigint | number
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number> | bigint | number
    notIn?: Enumerable<bigint> | Enumerable<number> | bigint | number
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type SiteCreateWithoutSiteTemplateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    cosUrl?: string
    slotData?: JsonNullValueInput | InputJsonValue
    customer: CustomerCreateNestedOneWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutSiteTemplateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    cosUrl?: string
    customerId: number
    slotData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteCreateOrConnectWithoutSiteTemplateInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutSiteTemplateInput, SiteUncheckedCreateWithoutSiteTemplateInput>
  }

  export type SiteCreateManySiteTemplateInputEnvelope = {
    data: Enumerable<SiteCreateManySiteTemplateInput>
    skipDuplicates?: boolean
  }

  export type SiteTemplateDataDefCreateWithoutSiteTemplateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    defData: JsonNullValueInput | InputJsonValue
  }

  export type SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    defData: JsonNullValueInput | InputJsonValue
  }

  export type SiteTemplateDataDefCreateOrConnectWithoutSiteTemplateInput = {
    where: SiteTemplateDataDefWhereUniqueInput
    create: XOR<SiteTemplateDataDefCreateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput>
  }

  export type SiteUpsertWithWhereUniqueWithoutSiteTemplateInput = {
    where: SiteWhereUniqueInput
    update: XOR<SiteUpdateWithoutSiteTemplateInput, SiteUncheckedUpdateWithoutSiteTemplateInput>
    create: XOR<SiteCreateWithoutSiteTemplateInput, SiteUncheckedCreateWithoutSiteTemplateInput>
  }

  export type SiteUpdateWithWhereUniqueWithoutSiteTemplateInput = {
    where: SiteWhereUniqueInput
    data: XOR<SiteUpdateWithoutSiteTemplateInput, SiteUncheckedUpdateWithoutSiteTemplateInput>
  }

  export type SiteUpdateManyWithWhereWithoutSiteTemplateInput = {
    where: SiteScalarWhereInput
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyWithoutSiteInput>
  }

  export type SiteScalarWhereInput = {
    AND?: Enumerable<SiteScalarWhereInput>
    OR?: Enumerable<SiteScalarWhereInput>
    NOT?: Enumerable<SiteScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    name?: StringFilter | string
    cosUrl?: StringFilter | string
    siteTemplateId?: IntFilter | number
    customerId?: IntFilter | number
    slotData?: JsonFilter
  }

  export type SiteTemplateDataDefUpsertWithoutSiteTemplateInput = {
    update: XOR<SiteTemplateDataDefUpdateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedUpdateWithoutSiteTemplateInput>
    create: XOR<SiteTemplateDataDefCreateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput>
  }

  export type SiteTemplateDataDefUpdateWithoutSiteTemplateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    defData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteTemplateDataDefUncheckedUpdateWithoutSiteTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    defData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteTemplateCreateWithoutSiteTemplateDataDefInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
    site?: SiteCreateNestedManyWithoutSiteTemplateInput
  }

  export type SiteTemplateUncheckedCreateWithoutSiteTemplateDataDefInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
    site?: SiteUncheckedCreateNestedManyWithoutSiteTemplateInput
  }

  export type SiteTemplateCreateOrConnectWithoutSiteTemplateDataDefInput = {
    where: SiteTemplateWhereUniqueInput
    create: XOR<SiteTemplateCreateWithoutSiteTemplateDataDefInput, SiteTemplateUncheckedCreateWithoutSiteTemplateDataDefInput>
  }

  export type SiteTemplateUpsertWithoutSiteTemplateDataDefInput = {
    update: XOR<SiteTemplateUpdateWithoutSiteTemplateDataDefInput, SiteTemplateUncheckedUpdateWithoutSiteTemplateDataDefInput>
    create: XOR<SiteTemplateCreateWithoutSiteTemplateDataDefInput, SiteTemplateUncheckedCreateWithoutSiteTemplateDataDefInput>
  }

  export type SiteTemplateUpdateWithoutSiteTemplateDataDefInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    site?: SiteUpdateManyWithoutSiteTemplateNestedInput
  }

  export type SiteTemplateUncheckedUpdateWithoutSiteTemplateDataDefInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    site?: SiteUncheckedUpdateManyWithoutSiteTemplateNestedInput
  }

  export type SiteCreateWithoutCustomerInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    cosUrl?: string
    slotData?: JsonNullValueInput | InputJsonValue
    siteTemplate: SiteTemplateCreateNestedOneWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutCustomerInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    cosUrl?: string
    siteTemplateId: number
    slotData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteCreateOrConnectWithoutCustomerInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutCustomerInput, SiteUncheckedCreateWithoutCustomerInput>
  }

  export type SiteCreateManyCustomerInputEnvelope = {
    data: Enumerable<SiteCreateManyCustomerInput>
    skipDuplicates?: boolean
  }

  export type SiteUpsertWithWhereUniqueWithoutCustomerInput = {
    where: SiteWhereUniqueInput
    update: XOR<SiteUpdateWithoutCustomerInput, SiteUncheckedUpdateWithoutCustomerInput>
    create: XOR<SiteCreateWithoutCustomerInput, SiteUncheckedCreateWithoutCustomerInput>
  }

  export type SiteUpdateWithWhereUniqueWithoutCustomerInput = {
    where: SiteWhereUniqueInput
    data: XOR<SiteUpdateWithoutCustomerInput, SiteUncheckedUpdateWithoutCustomerInput>
  }

  export type SiteUpdateManyWithWhereWithoutCustomerInput = {
    where: SiteScalarWhereInput
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyWithoutSiteInput>
  }

  export type SiteTemplateCreateWithoutSiteInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
    siteTemplateDataDef?: SiteTemplateDataDefCreateNestedOneWithoutSiteTemplateInput
  }

  export type SiteTemplateUncheckedCreateWithoutSiteInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
    siteTemplateDataDef?: SiteTemplateDataDefUncheckedCreateNestedOneWithoutSiteTemplateInput
  }

  export type SiteTemplateCreateOrConnectWithoutSiteInput = {
    where: SiteTemplateWhereUniqueInput
    create: XOR<SiteTemplateCreateWithoutSiteInput, SiteTemplateUncheckedCreateWithoutSiteInput>
  }

  export type CustomerCreateWithoutSiteInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    extendData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CustomerUncheckedCreateWithoutSiteInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    extendData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CustomerCreateOrConnectWithoutSiteInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutSiteInput, CustomerUncheckedCreateWithoutSiteInput>
  }

  export type SiteTemplateUpsertWithoutSiteInput = {
    update: XOR<SiteTemplateUpdateWithoutSiteInput, SiteTemplateUncheckedUpdateWithoutSiteInput>
    create: XOR<SiteTemplateCreateWithoutSiteInput, SiteTemplateUncheckedCreateWithoutSiteInput>
  }

  export type SiteTemplateUpdateWithoutSiteInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    siteTemplateDataDef?: SiteTemplateDataDefUpdateOneWithoutSiteTemplateNestedInput
  }

  export type SiteTemplateUncheckedUpdateWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    siteTemplateDataDef?: SiteTemplateDataDefUncheckedUpdateOneWithoutSiteTemplateNestedInput
  }

  export type CustomerUpsertWithoutSiteInput = {
    update: XOR<CustomerUpdateWithoutSiteInput, CustomerUncheckedUpdateWithoutSiteInput>
    create: XOR<CustomerCreateWithoutSiteInput, CustomerUncheckedCreateWithoutSiteInput>
  }

  export type CustomerUpdateWithoutSiteInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    extendData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CustomerUncheckedUpdateWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    extendData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    refresh_token_expires_in?: number | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    refresh_token_expires_in?: number | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: Enumerable<AccountCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ProjectUsersCreateWithoutUserInput = {
    id?: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutUsersInput
  }

  export type ProjectUsersUncheckedCreateWithoutUserInput = {
    id?: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type ProjectUsersCreateOrConnectWithoutUserInput = {
    where: ProjectUsersWhereUniqueInput
    create: XOR<ProjectUsersCreateWithoutUserInput, ProjectUsersUncheckedCreateWithoutUserInput>
  }

  export type ProjectUsersCreateManyUserInputEnvelope = {
    data: Enumerable<ProjectUsersCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type LinkCreateWithoutUserInput = {
    id?: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    project?: ProjectCreateNestedOneWithoutLinksInput
    projectDomain?: DomainCreateNestedOneWithoutLinksInput
    tag?: TagCreateNestedOneWithoutLinksInput
  }

  export type LinkUncheckedCreateWithoutUserInput = {
    id?: string
    domain: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    projectId?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tagId?: string | null
  }

  export type LinkCreateOrConnectWithoutUserInput = {
    where: LinkWhereUniqueInput
    create: XOR<LinkCreateWithoutUserInput, LinkUncheckedCreateWithoutUserInput>
  }

  export type LinkCreateManyUserInputEnvelope = {
    data: Enumerable<LinkCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutAccountsInput>
  }

  export type AccountScalarWhereInput = {
    AND?: Enumerable<AccountScalarWhereInput>
    OR?: Enumerable<AccountScalarWhereInput>
    NOT?: Enumerable<AccountScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    type?: StringFilter | string
    provider?: StringFilter | string
    providerAccountId?: StringFilter | string
    refresh_token?: StringNullableFilter | string | null
    refresh_token_expires_in?: IntNullableFilter | number | null
    access_token?: StringNullableFilter | string | null
    expires_at?: IntNullableFilter | number | null
    token_type?: StringNullableFilter | string | null
    scope?: StringNullableFilter | string | null
    id_token?: StringNullableFilter | string | null
    session_state?: StringNullableFilter | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type ProjectUsersUpsertWithWhereUniqueWithoutUserInput = {
    where: ProjectUsersWhereUniqueInput
    update: XOR<ProjectUsersUpdateWithoutUserInput, ProjectUsersUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectUsersCreateWithoutUserInput, ProjectUsersUncheckedCreateWithoutUserInput>
  }

  export type ProjectUsersUpdateWithWhereUniqueWithoutUserInput = {
    where: ProjectUsersWhereUniqueInput
    data: XOR<ProjectUsersUpdateWithoutUserInput, ProjectUsersUncheckedUpdateWithoutUserInput>
  }

  export type ProjectUsersUpdateManyWithWhereWithoutUserInput = {
    where: ProjectUsersScalarWhereInput
    data: XOR<ProjectUsersUpdateManyMutationInput, ProjectUsersUncheckedUpdateManyWithoutProjectsInput>
  }

  export type ProjectUsersScalarWhereInput = {
    AND?: Enumerable<ProjectUsersScalarWhereInput>
    OR?: Enumerable<ProjectUsersScalarWhereInput>
    NOT?: Enumerable<ProjectUsersScalarWhereInput>
    id?: StringFilter | string
    role?: EnumRoleFilter | Role
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userId?: StringFilter | string
    projectId?: StringFilter | string
  }

  export type LinkUpsertWithWhereUniqueWithoutUserInput = {
    where: LinkWhereUniqueInput
    update: XOR<LinkUpdateWithoutUserInput, LinkUncheckedUpdateWithoutUserInput>
    create: XOR<LinkCreateWithoutUserInput, LinkUncheckedCreateWithoutUserInput>
  }

  export type LinkUpdateWithWhereUniqueWithoutUserInput = {
    where: LinkWhereUniqueInput
    data: XOR<LinkUpdateWithoutUserInput, LinkUncheckedUpdateWithoutUserInput>
  }

  export type LinkUpdateManyWithWhereWithoutUserInput = {
    where: LinkScalarWhereInput
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyWithoutLinksInput>
  }

  export type LinkScalarWhereInput = {
    AND?: Enumerable<LinkScalarWhereInput>
    OR?: Enumerable<LinkScalarWhereInput>
    NOT?: Enumerable<LinkScalarWhereInput>
    id?: StringFilter | string
    domain?: StringFilter | string
    key?: StringFilter | string
    url?: StringFilter | string
    archived?: BoolFilter | boolean
    expiresAt?: DateTimeNullableFilter | Date | string | null
    password?: StringNullableFilter | string | null
    proxy?: BoolFilter | boolean
    title?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    utm_source?: StringNullableFilter | string | null
    utm_medium?: StringNullableFilter | string | null
    utm_campaign?: StringNullableFilter | string | null
    utm_term?: StringNullableFilter | string | null
    utm_content?: StringNullableFilter | string | null
    rewrite?: BoolFilter | boolean
    ios?: StringNullableFilter | string | null
    android?: StringNullableFilter | string | null
    userId?: StringNullableFilter | string | null
    projectId?: StringNullableFilter | string | null
    clicks?: IntFilter | number
    publicStats?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    tagId?: StringNullableFilter | string | null
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    projects?: ProjectUsersCreateNestedManyWithoutUserInput
    links?: LinkCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUsersUncheckedCreateNestedManyWithoutUserInput
    links?: LinkUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    projects?: ProjectUsersUpdateManyWithoutUserNestedInput
    links?: LinkUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUsersUncheckedUpdateManyWithoutUserNestedInput
    links?: LinkUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    projects?: ProjectUsersCreateNestedManyWithoutUserInput
    links?: LinkCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUsersUncheckedCreateNestedManyWithoutUserInput
    links?: LinkUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    projects?: ProjectUsersUpdateManyWithoutUserNestedInput
    links?: LinkUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUsersUncheckedUpdateManyWithoutUserNestedInput
    links?: LinkUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUsersCreateWithoutProjectInput = {
    id?: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProjectsInput
  }

  export type ProjectUsersUncheckedCreateWithoutProjectInput = {
    id?: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type ProjectUsersCreateOrConnectWithoutProjectInput = {
    where: ProjectUsersWhereUniqueInput
    create: XOR<ProjectUsersCreateWithoutProjectInput, ProjectUsersUncheckedCreateWithoutProjectInput>
  }

  export type ProjectUsersCreateManyProjectInputEnvelope = {
    data: Enumerable<ProjectUsersCreateManyProjectInput>
    skipDuplicates?: boolean
  }

  export type ProjectInviteCreateWithoutProjectInput = {
    email: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type ProjectInviteUncheckedCreateWithoutProjectInput = {
    email: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type ProjectInviteCreateOrConnectWithoutProjectInput = {
    where: ProjectInviteWhereUniqueInput
    create: XOR<ProjectInviteCreateWithoutProjectInput, ProjectInviteUncheckedCreateWithoutProjectInput>
  }

  export type ProjectInviteCreateManyProjectInputEnvelope = {
    data: Enumerable<ProjectInviteCreateManyProjectInput>
    skipDuplicates?: boolean
  }

  export type SentEmailCreateWithoutProjectInput = {
    id?: string
    type: EmailType
    createdAt?: Date | string
  }

  export type SentEmailUncheckedCreateWithoutProjectInput = {
    id?: string
    type: EmailType
    createdAt?: Date | string
  }

  export type SentEmailCreateOrConnectWithoutProjectInput = {
    where: SentEmailWhereUniqueInput
    create: XOR<SentEmailCreateWithoutProjectInput, SentEmailUncheckedCreateWithoutProjectInput>
  }

  export type SentEmailCreateManyProjectInputEnvelope = {
    data: Enumerable<SentEmailCreateManyProjectInput>
    skipDuplicates?: boolean
  }

  export type DomainCreateWithoutProjectInput = {
    id?: string
    slug: string
    verified?: boolean
    target?: string | null
    type?: string
    description?: string | null
    primary?: boolean
    lastChecked?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    links?: LinkCreateNestedManyWithoutProjectDomainInput
  }

  export type DomainUncheckedCreateWithoutProjectInput = {
    id?: string
    slug: string
    verified?: boolean
    target?: string | null
    type?: string
    description?: string | null
    primary?: boolean
    lastChecked?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    links?: LinkUncheckedCreateNestedManyWithoutProjectDomainInput
  }

  export type DomainCreateOrConnectWithoutProjectInput = {
    where: DomainWhereUniqueInput
    create: XOR<DomainCreateWithoutProjectInput, DomainUncheckedCreateWithoutProjectInput>
  }

  export type DomainCreateManyProjectInputEnvelope = {
    data: Enumerable<DomainCreateManyProjectInput>
    skipDuplicates?: boolean
  }

  export type LinkCreateWithoutProjectInput = {
    id?: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutLinksInput
    projectDomain?: DomainCreateNestedOneWithoutLinksInput
    tag?: TagCreateNestedOneWithoutLinksInput
  }

  export type LinkUncheckedCreateWithoutProjectInput = {
    id?: string
    domain: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    userId?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tagId?: string | null
  }

  export type LinkCreateOrConnectWithoutProjectInput = {
    where: LinkWhereUniqueInput
    create: XOR<LinkCreateWithoutProjectInput, LinkUncheckedCreateWithoutProjectInput>
  }

  export type LinkCreateManyProjectInputEnvelope = {
    data: Enumerable<LinkCreateManyProjectInput>
    skipDuplicates?: boolean
  }

  export type TagCreateWithoutProjectInput = {
    id?: string
    name: string
    color?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    links?: LinkCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    color?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    links?: LinkUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagCreateOrConnectWithoutProjectInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutProjectInput, TagUncheckedCreateWithoutProjectInput>
  }

  export type TagCreateManyProjectInputEnvelope = {
    data: Enumerable<TagCreateManyProjectInput>
    skipDuplicates?: boolean
  }

  export type ProjectUsersUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectUsersWhereUniqueInput
    update: XOR<ProjectUsersUpdateWithoutProjectInput, ProjectUsersUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectUsersCreateWithoutProjectInput, ProjectUsersUncheckedCreateWithoutProjectInput>
  }

  export type ProjectUsersUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectUsersWhereUniqueInput
    data: XOR<ProjectUsersUpdateWithoutProjectInput, ProjectUsersUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectUsersUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectUsersScalarWhereInput
    data: XOR<ProjectUsersUpdateManyMutationInput, ProjectUsersUncheckedUpdateManyWithoutUsersInput>
  }

  export type ProjectInviteUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectInviteWhereUniqueInput
    update: XOR<ProjectInviteUpdateWithoutProjectInput, ProjectInviteUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectInviteCreateWithoutProjectInput, ProjectInviteUncheckedCreateWithoutProjectInput>
  }

  export type ProjectInviteUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectInviteWhereUniqueInput
    data: XOR<ProjectInviteUpdateWithoutProjectInput, ProjectInviteUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectInviteUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectInviteScalarWhereInput
    data: XOR<ProjectInviteUpdateManyMutationInput, ProjectInviteUncheckedUpdateManyWithoutInvitesInput>
  }

  export type ProjectInviteScalarWhereInput = {
    AND?: Enumerable<ProjectInviteScalarWhereInput>
    OR?: Enumerable<ProjectInviteScalarWhereInput>
    NOT?: Enumerable<ProjectInviteScalarWhereInput>
    email?: StringFilter | string
    expires?: DateTimeFilter | Date | string
    projectId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type SentEmailUpsertWithWhereUniqueWithoutProjectInput = {
    where: SentEmailWhereUniqueInput
    update: XOR<SentEmailUpdateWithoutProjectInput, SentEmailUncheckedUpdateWithoutProjectInput>
    create: XOR<SentEmailCreateWithoutProjectInput, SentEmailUncheckedCreateWithoutProjectInput>
  }

  export type SentEmailUpdateWithWhereUniqueWithoutProjectInput = {
    where: SentEmailWhereUniqueInput
    data: XOR<SentEmailUpdateWithoutProjectInput, SentEmailUncheckedUpdateWithoutProjectInput>
  }

  export type SentEmailUpdateManyWithWhereWithoutProjectInput = {
    where: SentEmailScalarWhereInput
    data: XOR<SentEmailUpdateManyMutationInput, SentEmailUncheckedUpdateManyWithoutSentEmailsInput>
  }

  export type SentEmailScalarWhereInput = {
    AND?: Enumerable<SentEmailScalarWhereInput>
    OR?: Enumerable<SentEmailScalarWhereInput>
    NOT?: Enumerable<SentEmailScalarWhereInput>
    id?: StringFilter | string
    type?: EnumEmailTypeFilter | EmailType
    createdAt?: DateTimeFilter | Date | string
    projectId?: StringNullableFilter | string | null
  }

  export type DomainUpsertWithWhereUniqueWithoutProjectInput = {
    where: DomainWhereUniqueInput
    update: XOR<DomainUpdateWithoutProjectInput, DomainUncheckedUpdateWithoutProjectInput>
    create: XOR<DomainCreateWithoutProjectInput, DomainUncheckedCreateWithoutProjectInput>
  }

  export type DomainUpdateWithWhereUniqueWithoutProjectInput = {
    where: DomainWhereUniqueInput
    data: XOR<DomainUpdateWithoutProjectInput, DomainUncheckedUpdateWithoutProjectInput>
  }

  export type DomainUpdateManyWithWhereWithoutProjectInput = {
    where: DomainScalarWhereInput
    data: XOR<DomainUpdateManyMutationInput, DomainUncheckedUpdateManyWithoutDomainsInput>
  }

  export type DomainScalarWhereInput = {
    AND?: Enumerable<DomainScalarWhereInput>
    OR?: Enumerable<DomainScalarWhereInput>
    NOT?: Enumerable<DomainScalarWhereInput>
    id?: StringFilter | string
    slug?: StringFilter | string
    verified?: BoolFilter | boolean
    target?: StringNullableFilter | string | null
    type?: StringFilter | string
    description?: StringNullableFilter | string | null
    projectId?: StringNullableFilter | string | null
    primary?: BoolFilter | boolean
    lastChecked?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LinkUpsertWithWhereUniqueWithoutProjectInput = {
    where: LinkWhereUniqueInput
    update: XOR<LinkUpdateWithoutProjectInput, LinkUncheckedUpdateWithoutProjectInput>
    create: XOR<LinkCreateWithoutProjectInput, LinkUncheckedCreateWithoutProjectInput>
  }

  export type LinkUpdateWithWhereUniqueWithoutProjectInput = {
    where: LinkWhereUniqueInput
    data: XOR<LinkUpdateWithoutProjectInput, LinkUncheckedUpdateWithoutProjectInput>
  }

  export type LinkUpdateManyWithWhereWithoutProjectInput = {
    where: LinkScalarWhereInput
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyWithoutLinksInput>
  }

  export type TagUpsertWithWhereUniqueWithoutProjectInput = {
    where: TagWhereUniqueInput
    update: XOR<TagUpdateWithoutProjectInput, TagUncheckedUpdateWithoutProjectInput>
    create: XOR<TagCreateWithoutProjectInput, TagUncheckedCreateWithoutProjectInput>
  }

  export type TagUpdateWithWhereUniqueWithoutProjectInput = {
    where: TagWhereUniqueInput
    data: XOR<TagUpdateWithoutProjectInput, TagUncheckedUpdateWithoutProjectInput>
  }

  export type TagUpdateManyWithWhereWithoutProjectInput = {
    where: TagScalarWhereInput
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyWithoutTagsInput>
  }

  export type TagScalarWhereInput = {
    AND?: Enumerable<TagScalarWhereInput>
    OR?: Enumerable<TagScalarWhereInput>
    NOT?: Enumerable<TagScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    color?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    projectId?: StringFilter | string
  }

  export type ProjectCreateWithoutInvitesInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    users?: ProjectUsersCreateNestedManyWithoutProjectInput
    sentEmails?: SentEmailCreateNestedManyWithoutProjectInput
    domains?: DomainCreateNestedManyWithoutProjectInput
    links?: LinkCreateNestedManyWithoutProjectInput
    tags?: TagCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutInvitesInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    users?: ProjectUsersUncheckedCreateNestedManyWithoutProjectInput
    sentEmails?: SentEmailUncheckedCreateNestedManyWithoutProjectInput
    domains?: DomainUncheckedCreateNestedManyWithoutProjectInput
    links?: LinkUncheckedCreateNestedManyWithoutProjectInput
    tags?: TagUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutInvitesInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutInvitesInput, ProjectUncheckedCreateWithoutInvitesInput>
  }

  export type ProjectUpsertWithoutInvitesInput = {
    update: XOR<ProjectUpdateWithoutInvitesInput, ProjectUncheckedUpdateWithoutInvitesInput>
    create: XOR<ProjectCreateWithoutInvitesInput, ProjectUncheckedCreateWithoutInvitesInput>
  }

  export type ProjectUpdateWithoutInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: ProjectUsersUpdateManyWithoutProjectNestedInput
    sentEmails?: SentEmailUpdateManyWithoutProjectNestedInput
    domains?: DomainUpdateManyWithoutProjectNestedInput
    links?: LinkUpdateManyWithoutProjectNestedInput
    tags?: TagUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: ProjectUsersUncheckedUpdateManyWithoutProjectNestedInput
    sentEmails?: SentEmailUncheckedUpdateManyWithoutProjectNestedInput
    domains?: DomainUncheckedUpdateManyWithoutProjectNestedInput
    links?: LinkUncheckedUpdateManyWithoutProjectNestedInput
    tags?: TagUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserCreateWithoutProjectsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    links?: LinkCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProjectsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    links?: LinkUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type ProjectCreateWithoutUsersInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    invites?: ProjectInviteCreateNestedManyWithoutProjectInput
    sentEmails?: SentEmailCreateNestedManyWithoutProjectInput
    domains?: DomainCreateNestedManyWithoutProjectInput
    links?: LinkCreateNestedManyWithoutProjectInput
    tags?: TagCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    invites?: ProjectInviteUncheckedCreateNestedManyWithoutProjectInput
    sentEmails?: SentEmailUncheckedCreateNestedManyWithoutProjectInput
    domains?: DomainUncheckedCreateNestedManyWithoutProjectInput
    links?: LinkUncheckedCreateNestedManyWithoutProjectInput
    tags?: TagUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutUsersInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutUsersInput, ProjectUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutProjectsInput = {
    update: XOR<UserUpdateWithoutProjectsInput, UserUncheckedUpdateWithoutProjectsInput>
    create: XOR<UserCreateWithoutProjectsInput, UserUncheckedCreateWithoutProjectsInput>
  }

  export type UserUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    links?: LinkUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    links?: LinkUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithoutUsersInput = {
    update: XOR<ProjectUpdateWithoutUsersInput, ProjectUncheckedUpdateWithoutUsersInput>
    create: XOR<ProjectCreateWithoutUsersInput, ProjectUncheckedCreateWithoutUsersInput>
  }

  export type ProjectUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    invites?: ProjectInviteUpdateManyWithoutProjectNestedInput
    sentEmails?: SentEmailUpdateManyWithoutProjectNestedInput
    domains?: DomainUpdateManyWithoutProjectNestedInput
    links?: LinkUpdateManyWithoutProjectNestedInput
    tags?: TagUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    invites?: ProjectInviteUncheckedUpdateManyWithoutProjectNestedInput
    sentEmails?: SentEmailUncheckedUpdateManyWithoutProjectNestedInput
    domains?: DomainUncheckedUpdateManyWithoutProjectNestedInput
    links?: LinkUncheckedUpdateManyWithoutProjectNestedInput
    tags?: TagUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutSentEmailsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    users?: ProjectUsersCreateNestedManyWithoutProjectInput
    invites?: ProjectInviteCreateNestedManyWithoutProjectInput
    domains?: DomainCreateNestedManyWithoutProjectInput
    links?: LinkCreateNestedManyWithoutProjectInput
    tags?: TagCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutSentEmailsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    users?: ProjectUsersUncheckedCreateNestedManyWithoutProjectInput
    invites?: ProjectInviteUncheckedCreateNestedManyWithoutProjectInput
    domains?: DomainUncheckedCreateNestedManyWithoutProjectInput
    links?: LinkUncheckedCreateNestedManyWithoutProjectInput
    tags?: TagUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutSentEmailsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutSentEmailsInput, ProjectUncheckedCreateWithoutSentEmailsInput>
  }

  export type ProjectUpsertWithoutSentEmailsInput = {
    update: XOR<ProjectUpdateWithoutSentEmailsInput, ProjectUncheckedUpdateWithoutSentEmailsInput>
    create: XOR<ProjectCreateWithoutSentEmailsInput, ProjectUncheckedCreateWithoutSentEmailsInput>
  }

  export type ProjectUpdateWithoutSentEmailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: ProjectUsersUpdateManyWithoutProjectNestedInput
    invites?: ProjectInviteUpdateManyWithoutProjectNestedInput
    domains?: DomainUpdateManyWithoutProjectNestedInput
    links?: LinkUpdateManyWithoutProjectNestedInput
    tags?: TagUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutSentEmailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: ProjectUsersUncheckedUpdateManyWithoutProjectNestedInput
    invites?: ProjectInviteUncheckedUpdateManyWithoutProjectNestedInput
    domains?: DomainUncheckedUpdateManyWithoutProjectNestedInput
    links?: LinkUncheckedUpdateManyWithoutProjectNestedInput
    tags?: TagUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateWithoutDomainsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    users?: ProjectUsersCreateNestedManyWithoutProjectInput
    invites?: ProjectInviteCreateNestedManyWithoutProjectInput
    sentEmails?: SentEmailCreateNestedManyWithoutProjectInput
    links?: LinkCreateNestedManyWithoutProjectInput
    tags?: TagCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutDomainsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    users?: ProjectUsersUncheckedCreateNestedManyWithoutProjectInput
    invites?: ProjectInviteUncheckedCreateNestedManyWithoutProjectInput
    sentEmails?: SentEmailUncheckedCreateNestedManyWithoutProjectInput
    links?: LinkUncheckedCreateNestedManyWithoutProjectInput
    tags?: TagUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutDomainsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDomainsInput, ProjectUncheckedCreateWithoutDomainsInput>
  }

  export type LinkCreateWithoutProjectDomainInput = {
    id?: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutLinksInput
    project?: ProjectCreateNestedOneWithoutLinksInput
    tag?: TagCreateNestedOneWithoutLinksInput
  }

  export type LinkUncheckedCreateWithoutProjectDomainInput = {
    id?: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    userId?: string | null
    projectId?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tagId?: string | null
  }

  export type LinkCreateOrConnectWithoutProjectDomainInput = {
    where: LinkWhereUniqueInput
    create: XOR<LinkCreateWithoutProjectDomainInput, LinkUncheckedCreateWithoutProjectDomainInput>
  }

  export type LinkCreateManyProjectDomainInputEnvelope = {
    data: Enumerable<LinkCreateManyProjectDomainInput>
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutDomainsInput = {
    update: XOR<ProjectUpdateWithoutDomainsInput, ProjectUncheckedUpdateWithoutDomainsInput>
    create: XOR<ProjectCreateWithoutDomainsInput, ProjectUncheckedCreateWithoutDomainsInput>
  }

  export type ProjectUpdateWithoutDomainsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: ProjectUsersUpdateManyWithoutProjectNestedInput
    invites?: ProjectInviteUpdateManyWithoutProjectNestedInput
    sentEmails?: SentEmailUpdateManyWithoutProjectNestedInput
    links?: LinkUpdateManyWithoutProjectNestedInput
    tags?: TagUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDomainsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: ProjectUsersUncheckedUpdateManyWithoutProjectNestedInput
    invites?: ProjectInviteUncheckedUpdateManyWithoutProjectNestedInput
    sentEmails?: SentEmailUncheckedUpdateManyWithoutProjectNestedInput
    links?: LinkUncheckedUpdateManyWithoutProjectNestedInput
    tags?: TagUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type LinkUpsertWithWhereUniqueWithoutProjectDomainInput = {
    where: LinkWhereUniqueInput
    update: XOR<LinkUpdateWithoutProjectDomainInput, LinkUncheckedUpdateWithoutProjectDomainInput>
    create: XOR<LinkCreateWithoutProjectDomainInput, LinkUncheckedCreateWithoutProjectDomainInput>
  }

  export type LinkUpdateWithWhereUniqueWithoutProjectDomainInput = {
    where: LinkWhereUniqueInput
    data: XOR<LinkUpdateWithoutProjectDomainInput, LinkUncheckedUpdateWithoutProjectDomainInput>
  }

  export type LinkUpdateManyWithWhereWithoutProjectDomainInput = {
    where: LinkScalarWhereInput
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyWithoutLinksInput>
  }

  export type UserCreateWithoutLinksInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    projects?: ProjectUsersCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLinksInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    createdAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    projects?: ProjectUsersUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLinksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLinksInput, UserUncheckedCreateWithoutLinksInput>
  }

  export type ProjectCreateWithoutLinksInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    users?: ProjectUsersCreateNestedManyWithoutProjectInput
    invites?: ProjectInviteCreateNestedManyWithoutProjectInput
    sentEmails?: SentEmailCreateNestedManyWithoutProjectInput
    domains?: DomainCreateNestedManyWithoutProjectInput
    tags?: TagCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutLinksInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    users?: ProjectUsersUncheckedCreateNestedManyWithoutProjectInput
    invites?: ProjectInviteUncheckedCreateNestedManyWithoutProjectInput
    sentEmails?: SentEmailUncheckedCreateNestedManyWithoutProjectInput
    domains?: DomainUncheckedCreateNestedManyWithoutProjectInput
    tags?: TagUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutLinksInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutLinksInput, ProjectUncheckedCreateWithoutLinksInput>
  }

  export type DomainCreateWithoutLinksInput = {
    id?: string
    slug: string
    verified?: boolean
    target?: string | null
    type?: string
    description?: string | null
    primary?: boolean
    lastChecked?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    project?: ProjectCreateNestedOneWithoutDomainsInput
  }

  export type DomainUncheckedCreateWithoutLinksInput = {
    id?: string
    slug: string
    verified?: boolean
    target?: string | null
    type?: string
    description?: string | null
    projectId?: string | null
    primary?: boolean
    lastChecked?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DomainCreateOrConnectWithoutLinksInput = {
    where: DomainWhereUniqueInput
    create: XOR<DomainCreateWithoutLinksInput, DomainUncheckedCreateWithoutLinksInput>
  }

  export type TagCreateWithoutLinksInput = {
    id?: string
    name: string
    color?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    project: ProjectCreateNestedOneWithoutTagsInput
  }

  export type TagUncheckedCreateWithoutLinksInput = {
    id?: string
    name: string
    color?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type TagCreateOrConnectWithoutLinksInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutLinksInput, TagUncheckedCreateWithoutLinksInput>
  }

  export type UserUpsertWithoutLinksInput = {
    update: XOR<UserUpdateWithoutLinksInput, UserUncheckedUpdateWithoutLinksInput>
    create: XOR<UserCreateWithoutLinksInput, UserUncheckedCreateWithoutLinksInput>
  }

  export type UserUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    projects?: ProjectUsersUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    projects?: ProjectUsersUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProjectUpsertWithoutLinksInput = {
    update: XOR<ProjectUpdateWithoutLinksInput, ProjectUncheckedUpdateWithoutLinksInput>
    create: XOR<ProjectCreateWithoutLinksInput, ProjectUncheckedCreateWithoutLinksInput>
  }

  export type ProjectUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: ProjectUsersUpdateManyWithoutProjectNestedInput
    invites?: ProjectInviteUpdateManyWithoutProjectNestedInput
    sentEmails?: SentEmailUpdateManyWithoutProjectNestedInput
    domains?: DomainUpdateManyWithoutProjectNestedInput
    tags?: TagUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: ProjectUsersUncheckedUpdateManyWithoutProjectNestedInput
    invites?: ProjectInviteUncheckedUpdateManyWithoutProjectNestedInput
    sentEmails?: SentEmailUncheckedUpdateManyWithoutProjectNestedInput
    domains?: DomainUncheckedUpdateManyWithoutProjectNestedInput
    tags?: TagUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type DomainUpsertWithoutLinksInput = {
    update: XOR<DomainUpdateWithoutLinksInput, DomainUncheckedUpdateWithoutLinksInput>
    create: XOR<DomainCreateWithoutLinksInput, DomainUncheckedCreateWithoutLinksInput>
  }

  export type DomainUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    target?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    lastChecked?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutDomainsNestedInput
  }

  export type DomainUncheckedUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    target?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    lastChecked?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUpsertWithoutLinksInput = {
    update: XOR<TagUpdateWithoutLinksInput, TagUncheckedUpdateWithoutLinksInput>
    create: XOR<TagCreateWithoutLinksInput, TagUncheckedCreateWithoutLinksInput>
  }

  export type TagUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutTagsNestedInput
  }

  export type TagUncheckedUpdateWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectCreateWithoutTagsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    users?: ProjectUsersCreateNestedManyWithoutProjectInput
    invites?: ProjectInviteCreateNestedManyWithoutProjectInput
    sentEmails?: SentEmailCreateNestedManyWithoutProjectInput
    domains?: DomainCreateNestedManyWithoutProjectInput
    links?: LinkCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutTagsInput = {
    id?: string
    name: string
    slug: string
    logo?: string | null
    password?: string | null
    type?: string
    usage?: number
    usageLimit?: number
    plan?: string
    stripeId?: string | null
    billingCycleStart?: number | null
    region?: string | null
    endpoint?: string | null
    bucket?: string | null
    useHost?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    users?: ProjectUsersUncheckedCreateNestedManyWithoutProjectInput
    invites?: ProjectInviteUncheckedCreateNestedManyWithoutProjectInput
    sentEmails?: SentEmailUncheckedCreateNestedManyWithoutProjectInput
    domains?: DomainUncheckedCreateNestedManyWithoutProjectInput
    links?: LinkUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutTagsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTagsInput, ProjectUncheckedCreateWithoutTagsInput>
  }

  export type LinkCreateWithoutTagInput = {
    id?: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutLinksInput
    project?: ProjectCreateNestedOneWithoutLinksInput
    projectDomain?: DomainCreateNestedOneWithoutLinksInput
  }

  export type LinkUncheckedCreateWithoutTagInput = {
    id?: string
    domain: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    userId?: string | null
    projectId?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LinkCreateOrConnectWithoutTagInput = {
    where: LinkWhereUniqueInput
    create: XOR<LinkCreateWithoutTagInput, LinkUncheckedCreateWithoutTagInput>
  }

  export type LinkCreateManyTagInputEnvelope = {
    data: Enumerable<LinkCreateManyTagInput>
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithoutTagsInput = {
    update: XOR<ProjectUpdateWithoutTagsInput, ProjectUncheckedUpdateWithoutTagsInput>
    create: XOR<ProjectCreateWithoutTagsInput, ProjectUncheckedCreateWithoutTagsInput>
  }

  export type ProjectUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: ProjectUsersUpdateManyWithoutProjectNestedInput
    invites?: ProjectInviteUpdateManyWithoutProjectNestedInput
    sentEmails?: SentEmailUpdateManyWithoutProjectNestedInput
    domains?: DomainUpdateManyWithoutProjectNestedInput
    links?: LinkUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    usage?: IntFieldUpdateOperationsInput | number
    usageLimit?: IntFieldUpdateOperationsInput | number
    plan?: StringFieldUpdateOperationsInput | string
    stripeId?: NullableStringFieldUpdateOperationsInput | string | null
    billingCycleStart?: NullableIntFieldUpdateOperationsInput | number | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    endpoint?: NullableStringFieldUpdateOperationsInput | string | null
    bucket?: NullableStringFieldUpdateOperationsInput | string | null
    useHost?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    users?: ProjectUsersUncheckedUpdateManyWithoutProjectNestedInput
    invites?: ProjectInviteUncheckedUpdateManyWithoutProjectNestedInput
    sentEmails?: SentEmailUncheckedUpdateManyWithoutProjectNestedInput
    domains?: DomainUncheckedUpdateManyWithoutProjectNestedInput
    links?: LinkUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type LinkUpsertWithWhereUniqueWithoutTagInput = {
    where: LinkWhereUniqueInput
    update: XOR<LinkUpdateWithoutTagInput, LinkUncheckedUpdateWithoutTagInput>
    create: XOR<LinkCreateWithoutTagInput, LinkUncheckedCreateWithoutTagInput>
  }

  export type LinkUpdateWithWhereUniqueWithoutTagInput = {
    where: LinkWhereUniqueInput
    data: XOR<LinkUpdateWithoutTagInput, LinkUncheckedUpdateWithoutTagInput>
  }

  export type LinkUpdateManyWithWhereWithoutTagInput = {
    where: LinkScalarWhereInput
    data: XOR<LinkUpdateManyMutationInput, LinkUncheckedUpdateManyWithoutLinksInput>
  }

  export type SiteCreateManySiteTemplateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    cosUrl?: string
    customerId: number
    slotData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteUpdateWithoutSiteTemplateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    cosUrl?: StringFieldUpdateOperationsInput | string
    slotData?: JsonNullValueInput | InputJsonValue
    customer?: CustomerUpdateOneRequiredWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutSiteTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    cosUrl?: StringFieldUpdateOperationsInput | string
    customerId?: IntFieldUpdateOperationsInput | number
    slotData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteUncheckedUpdateManyWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    cosUrl?: StringFieldUpdateOperationsInput | string
    customerId?: IntFieldUpdateOperationsInput | number
    slotData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteCreateManyCustomerInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    cosUrl?: string
    siteTemplateId: number
    slotData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteUpdateWithoutCustomerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    cosUrl?: StringFieldUpdateOperationsInput | string
    slotData?: JsonNullValueInput | InputJsonValue
    siteTemplate?: SiteTemplateUpdateOneRequiredWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    cosUrl?: StringFieldUpdateOperationsInput | string
    siteTemplateId?: IntFieldUpdateOperationsInput | number
    slotData?: JsonNullValueInput | InputJsonValue
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    refresh_token_expires_in?: number | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type ProjectUsersCreateManyUserInput = {
    id?: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
    projectId: string
  }

  export type LinkCreateManyUserInput = {
    id?: string
    domain: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    projectId?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tagId?: string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUsersUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneRequiredWithoutUsersNestedInput
  }

  export type ProjectUsersUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectUsersUncheckedUpdateManyWithoutProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type LinkUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    proxy?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_term?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    rewrite?: BoolFieldUpdateOperationsInput | boolean
    ios?: NullableStringFieldUpdateOperationsInput | string | null
    android?: NullableStringFieldUpdateOperationsInput | string | null
    clicks?: IntFieldUpdateOperationsInput | number
    publicStats?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutLinksNestedInput
    projectDomain?: DomainUpdateOneWithoutLinksNestedInput
    tag?: TagUpdateOneWithoutLinksNestedInput
  }

  export type LinkUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    proxy?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_term?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    rewrite?: BoolFieldUpdateOperationsInput | boolean
    ios?: NullableStringFieldUpdateOperationsInput | string | null
    android?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    clicks?: IntFieldUpdateOperationsInput | number
    publicStats?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LinkUncheckedUpdateManyWithoutLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    proxy?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_term?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    rewrite?: BoolFieldUpdateOperationsInput | boolean
    ios?: NullableStringFieldUpdateOperationsInput | string | null
    android?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    clicks?: IntFieldUpdateOperationsInput | number
    publicStats?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectUsersCreateManyProjectInput = {
    id?: string
    role?: Role
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type ProjectInviteCreateManyProjectInput = {
    email: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type SentEmailCreateManyProjectInput = {
    id?: string
    type: EmailType
    createdAt?: Date | string
  }

  export type DomainCreateManyProjectInput = {
    id?: string
    slug: string
    verified?: boolean
    target?: string | null
    type?: string
    description?: string | null
    primary?: boolean
    lastChecked?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LinkCreateManyProjectInput = {
    id?: string
    domain: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    userId?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tagId?: string | null
  }

  export type TagCreateManyProjectInput = {
    id?: string
    name: string
    color?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUsersUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProjectsNestedInput
  }

  export type ProjectUsersUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectUsersUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectInviteUpdateWithoutProjectInput = {
    email?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectInviteUncheckedUpdateWithoutProjectInput = {
    email?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectInviteUncheckedUpdateManyWithoutInvitesInput = {
    email?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SentEmailUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | EmailType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SentEmailUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | EmailType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SentEmailUncheckedUpdateManyWithoutSentEmailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumEmailTypeFieldUpdateOperationsInput | EmailType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DomainUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    target?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    lastChecked?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUpdateManyWithoutProjectDomainNestedInput
  }

  export type DomainUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    target?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    lastChecked?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUncheckedUpdateManyWithoutProjectDomainNestedInput
  }

  export type DomainUncheckedUpdateManyWithoutDomainsInput = {
    id?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    verified?: BoolFieldUpdateOperationsInput | boolean
    target?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    lastChecked?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    proxy?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_term?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    rewrite?: BoolFieldUpdateOperationsInput | boolean
    ios?: NullableStringFieldUpdateOperationsInput | string | null
    android?: NullableStringFieldUpdateOperationsInput | string | null
    clicks?: IntFieldUpdateOperationsInput | number
    publicStats?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLinksNestedInput
    projectDomain?: DomainUpdateOneWithoutLinksNestedInput
    tag?: TagUpdateOneWithoutLinksNestedInput
  }

  export type LinkUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    proxy?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_term?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    rewrite?: BoolFieldUpdateOperationsInput | boolean
    ios?: NullableStringFieldUpdateOperationsInput | string | null
    android?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    clicks?: IntFieldUpdateOperationsInput | number
    publicStats?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TagUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    links?: LinkUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateManyWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LinkCreateManyProjectDomainInput = {
    id?: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    userId?: string | null
    projectId?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    tagId?: string | null
  }

  export type LinkUpdateWithoutProjectDomainInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    proxy?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_term?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    rewrite?: BoolFieldUpdateOperationsInput | boolean
    ios?: NullableStringFieldUpdateOperationsInput | string | null
    android?: NullableStringFieldUpdateOperationsInput | string | null
    clicks?: IntFieldUpdateOperationsInput | number
    publicStats?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLinksNestedInput
    project?: ProjectUpdateOneWithoutLinksNestedInput
    tag?: TagUpdateOneWithoutLinksNestedInput
  }

  export type LinkUncheckedUpdateWithoutProjectDomainInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    proxy?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_term?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    rewrite?: BoolFieldUpdateOperationsInput | boolean
    ios?: NullableStringFieldUpdateOperationsInput | string | null
    android?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    clicks?: IntFieldUpdateOperationsInput | number
    publicStats?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tagId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LinkCreateManyTagInput = {
    id?: string
    domain: string
    key: string
    url: string
    archived?: boolean
    expiresAt?: Date | string | null
    password?: string | null
    proxy?: boolean
    title?: string | null
    description?: string | null
    image?: string | null
    utm_source?: string | null
    utm_medium?: string | null
    utm_campaign?: string | null
    utm_term?: string | null
    utm_content?: string | null
    rewrite?: boolean
    ios?: string | null
    android?: string | null
    userId?: string | null
    projectId?: string | null
    clicks?: number
    publicStats?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LinkUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    proxy?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_term?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    rewrite?: BoolFieldUpdateOperationsInput | boolean
    ios?: NullableStringFieldUpdateOperationsInput | string | null
    android?: NullableStringFieldUpdateOperationsInput | string | null
    clicks?: IntFieldUpdateOperationsInput | number
    publicStats?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLinksNestedInput
    project?: ProjectUpdateOneWithoutLinksNestedInput
    projectDomain?: DomainUpdateOneWithoutLinksNestedInput
  }

  export type LinkUncheckedUpdateWithoutTagInput = {
    id?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    archived?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    proxy?: BoolFieldUpdateOperationsInput | boolean
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    utm_source?: NullableStringFieldUpdateOperationsInput | string | null
    utm_medium?: NullableStringFieldUpdateOperationsInput | string | null
    utm_campaign?: NullableStringFieldUpdateOperationsInput | string | null
    utm_term?: NullableStringFieldUpdateOperationsInput | string | null
    utm_content?: NullableStringFieldUpdateOperationsInput | string | null
    rewrite?: BoolFieldUpdateOperationsInput | boolean
    ios?: NullableStringFieldUpdateOperationsInput | string | null
    android?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    clicks?: IntFieldUpdateOperationsInput | number
    publicStats?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}