
/**
 * Client
**/

import * as runtime from './runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model Audits
 * @schema.display_name 审计日志
 */
export type Audits = {
  id: number
  createdAt: Date
  /**
   * @schema.title 关联 id
   */
  auditId: number
  /**
   * @schema.title 审计类型(关联 schema)
   */
  auditType: string
  /**
   * @schema.title 用户 id
   */
  userId: string
  /**
   * @schema.title 用户名
   */
  username: string | null
  /**
   * @schema.title 动作(e.g. update)
   */
  action: string
  /**
   * @schema.title 变化
   */
  auditChanges: string
  /**
   * @schema.title 版本
   */
  version: number
}

/**
 * Model SiteTemplate
 * @schema.display_name 网站模板
 * @schema.display_column name
 */
export type SiteTemplate = {
  id: number
  createdAt: Date
  updatedAt: Date
  isDeleted: boolean
  /**
   * @schema.title 模板名称
   */
  name: string
  /**
   * @schema.title 模板内容
   * @schema.column_type textarea
   */
  template: string
}

/**
 * Model SiteTemplateDataDef
 * @schema.display_name 模板数据定义
 * @schema.display_column name
 */
export type SiteTemplateDataDef = {
  id: number
  createdAt: Date
  updatedAt: Date
  isDeleted: boolean
  /**
   * @schema.title 名称
   */
  name: string
  /**
   * @schema.title 结构定义
   */
  defData: Prisma.JsonValue
  /**
   * @schema.reference SiteTemplate
   * @schema.x-unique true
   */
  siteTemplateId: number
}

/**
 * Model Customer
 * @schema.primary_key id
 * @schema.display_name 客户信息
 * @schema.display_column name
 * @schema.display_primary_key false
 * @schema.searchable_columns name
 */
export type Customer = {
  id: number
  createdAt: Date
  updatedAt: Date
  isDeleted: boolean
  /**
   * @schema.title 客户名称
   */
  name: string
}

/**
 * Model Site
 * @schema.primary_key id
 * @schema.display_name 网站
 * @schema.display_column name
 * @schema.display_primary_key false
 * @schema.searchable_columns name
 */
export type Site = {
  id: number
  createdAt: Date
  updatedAt: Date
  isDeleted: boolean
  /**
   * @schema.title 网站名称
   */
  name: string
  /**
   * @schema.reference SiteTemplate
   */
  siteTemplateId: number
  /**
   * @schema.reference Customer
   */
  customerId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Audits
 * const audits = await prisma.audits.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Audits
   * const audits = await prisma.audits.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.audits`: Exposes CRUD operations for the **Audits** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Audits
    * const audits = await prisma.audits.findMany()
    * ```
    */
  get audits(): Prisma.AuditsDelegate<GlobalReject>;

  /**
   * `prisma.siteTemplate`: Exposes CRUD operations for the **SiteTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SiteTemplates
    * const siteTemplates = await prisma.siteTemplate.findMany()
    * ```
    */
  get siteTemplate(): Prisma.SiteTemplateDelegate<GlobalReject>;

  /**
   * `prisma.siteTemplateDataDef`: Exposes CRUD operations for the **SiteTemplateDataDef** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SiteTemplateDataDefs
    * const siteTemplateDataDefs = await prisma.siteTemplateDataDef.findMany()
    * ```
    */
  get siteTemplateDataDef(): Prisma.SiteTemplateDataDefDelegate<GlobalReject>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<GlobalReject>;

  /**
   * `prisma.site`: Exposes CRUD operations for the **Site** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sites
    * const sites = await prisma.site.findMany()
    * ```
    */
  get site(): Prisma.SiteDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.0
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Audits: 'Audits',
    SiteTemplate: 'SiteTemplate',
    SiteTemplateDataDef: 'SiteTemplateDataDef',
    Customer: 'Customer',
    Site: 'Site'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SiteTemplateCountOutputType
   */


  export type SiteTemplateCountOutputType = {
    site: number
  }

  export type SiteTemplateCountOutputTypeSelect = {
    site?: boolean
  }

  export type SiteTemplateCountOutputTypeGetPayload<S extends boolean | null | undefined | SiteTemplateCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SiteTemplateCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SiteTemplateCountOutputTypeArgs)
    ? SiteTemplateCountOutputType 
    : S extends { select: any } & (SiteTemplateCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SiteTemplateCountOutputType ? SiteTemplateCountOutputType[P] : never
  } 
      : SiteTemplateCountOutputType




  // Custom InputTypes

  /**
   * SiteTemplateCountOutputType without action
   */
  export type SiteTemplateCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplateCountOutputType
     */
    select?: SiteTemplateCountOutputTypeSelect | null
  }



  /**
   * Count Type CustomerCountOutputType
   */


  export type CustomerCountOutputType = {
    site: number
  }

  export type CustomerCountOutputTypeSelect = {
    site?: boolean
  }

  export type CustomerCountOutputTypeGetPayload<S extends boolean | null | undefined | CustomerCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CustomerCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CustomerCountOutputTypeArgs)
    ? CustomerCountOutputType 
    : S extends { select: any } & (CustomerCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CustomerCountOutputType ? CustomerCountOutputType[P] : never
  } 
      : CustomerCountOutputType




  // Custom InputTypes

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Audits
   */


  export type AggregateAudits = {
    _count: AuditsCountAggregateOutputType | null
    _avg: AuditsAvgAggregateOutputType | null
    _sum: AuditsSumAggregateOutputType | null
    _min: AuditsMinAggregateOutputType | null
    _max: AuditsMaxAggregateOutputType | null
  }

  export type AuditsAvgAggregateOutputType = {
    id: number | null
    auditId: number | null
    version: number | null
  }

  export type AuditsSumAggregateOutputType = {
    id: number | null
    auditId: number | null
    version: number | null
  }

  export type AuditsMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    auditId: number | null
    auditType: string | null
    userId: string | null
    username: string | null
    action: string | null
    auditChanges: string | null
    version: number | null
  }

  export type AuditsMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    auditId: number | null
    auditType: string | null
    userId: string | null
    username: string | null
    action: string | null
    auditChanges: string | null
    version: number | null
  }

  export type AuditsCountAggregateOutputType = {
    id: number
    createdAt: number
    auditId: number
    auditType: number
    userId: number
    username: number
    action: number
    auditChanges: number
    version: number
    _all: number
  }


  export type AuditsAvgAggregateInputType = {
    id?: true
    auditId?: true
    version?: true
  }

  export type AuditsSumAggregateInputType = {
    id?: true
    auditId?: true
    version?: true
  }

  export type AuditsMinAggregateInputType = {
    id?: true
    createdAt?: true
    auditId?: true
    auditType?: true
    userId?: true
    username?: true
    action?: true
    auditChanges?: true
    version?: true
  }

  export type AuditsMaxAggregateInputType = {
    id?: true
    createdAt?: true
    auditId?: true
    auditType?: true
    userId?: true
    username?: true
    action?: true
    auditChanges?: true
    version?: true
  }

  export type AuditsCountAggregateInputType = {
    id?: true
    createdAt?: true
    auditId?: true
    auditType?: true
    userId?: true
    username?: true
    action?: true
    auditChanges?: true
    version?: true
    _all?: true
  }

  export type AuditsAggregateArgs = {
    /**
     * Filter which Audits to aggregate.
     */
    where?: AuditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audits to fetch.
     */
    orderBy?: Enumerable<AuditsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Audits
    **/
    _count?: true | AuditsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditsMaxAggregateInputType
  }

  export type GetAuditsAggregateType<T extends AuditsAggregateArgs> = {
        [P in keyof T & keyof AggregateAudits]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAudits[P]>
      : GetScalarType<T[P], AggregateAudits[P]>
  }




  export type AuditsGroupByArgs = {
    where?: AuditsWhereInput
    orderBy?: Enumerable<AuditsOrderByWithAggregationInput>
    by: AuditsScalarFieldEnum[]
    having?: AuditsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditsCountAggregateInputType | true
    _avg?: AuditsAvgAggregateInputType
    _sum?: AuditsSumAggregateInputType
    _min?: AuditsMinAggregateInputType
    _max?: AuditsMaxAggregateInputType
  }


  export type AuditsGroupByOutputType = {
    id: number
    createdAt: Date
    auditId: number
    auditType: string
    userId: string
    username: string | null
    action: string
    auditChanges: string
    version: number
    _count: AuditsCountAggregateOutputType | null
    _avg: AuditsAvgAggregateOutputType | null
    _sum: AuditsSumAggregateOutputType | null
    _min: AuditsMinAggregateOutputType | null
    _max: AuditsMaxAggregateOutputType | null
  }

  type GetAuditsGroupByPayload<T extends AuditsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AuditsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditsGroupByOutputType[P]>
            : GetScalarType<T[P], AuditsGroupByOutputType[P]>
        }
      >
    >


  export type AuditsSelect = {
    id?: boolean
    createdAt?: boolean
    auditId?: boolean
    auditType?: boolean
    userId?: boolean
    username?: boolean
    action?: boolean
    auditChanges?: boolean
    version?: boolean
  }


  export type AuditsGetPayload<S extends boolean | null | undefined | AuditsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Audits :
    S extends undefined ? never :
    S extends { include: any } & (AuditsArgs | AuditsFindManyArgs)
    ? Audits 
    : S extends { select: any } & (AuditsArgs | AuditsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Audits ? Audits[P] : never
  } 
      : Audits


  type AuditsCountArgs = 
    Omit<AuditsFindManyArgs, 'select' | 'include'> & {
      select?: AuditsCountAggregateInputType | true
    }

  export interface AuditsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Audits that matches the filter.
     * @param {AuditsFindUniqueArgs} args - Arguments to find a Audits
     * @example
     * // Get one Audits
     * const audits = await prisma.audits.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuditsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AuditsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Audits'> extends True ? Prisma__AuditsClient<AuditsGetPayload<T>> : Prisma__AuditsClient<AuditsGetPayload<T> | null, null>

    /**
     * Find one Audits that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AuditsFindUniqueOrThrowArgs} args - Arguments to find a Audits
     * @example
     * // Get one Audits
     * const audits = await prisma.audits.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AuditsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AuditsFindUniqueOrThrowArgs>
    ): Prisma__AuditsClient<AuditsGetPayload<T>>

    /**
     * Find the first Audits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsFindFirstArgs} args - Arguments to find a Audits
     * @example
     * // Get one Audits
     * const audits = await prisma.audits.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuditsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AuditsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Audits'> extends True ? Prisma__AuditsClient<AuditsGetPayload<T>> : Prisma__AuditsClient<AuditsGetPayload<T> | null, null>

    /**
     * Find the first Audits that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsFindFirstOrThrowArgs} args - Arguments to find a Audits
     * @example
     * // Get one Audits
     * const audits = await prisma.audits.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AuditsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AuditsFindFirstOrThrowArgs>
    ): Prisma__AuditsClient<AuditsGetPayload<T>>

    /**
     * Find zero or more Audits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Audits
     * const audits = await prisma.audits.findMany()
     * 
     * // Get first 10 Audits
     * const audits = await prisma.audits.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditsWithIdOnly = await prisma.audits.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AuditsFindManyArgs>(
      args?: SelectSubset<T, AuditsFindManyArgs>
    ): Prisma.PrismaPromise<Array<AuditsGetPayload<T>>>

    /**
     * Create a Audits.
     * @param {AuditsCreateArgs} args - Arguments to create a Audits.
     * @example
     * // Create one Audits
     * const Audits = await prisma.audits.create({
     *   data: {
     *     // ... data to create a Audits
     *   }
     * })
     * 
    **/
    create<T extends AuditsCreateArgs>(
      args: SelectSubset<T, AuditsCreateArgs>
    ): Prisma__AuditsClient<AuditsGetPayload<T>>

    /**
     * Create many Audits.
     *     @param {AuditsCreateManyArgs} args - Arguments to create many Audits.
     *     @example
     *     // Create many Audits
     *     const audits = await prisma.audits.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AuditsCreateManyArgs>(
      args?: SelectSubset<T, AuditsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Audits.
     * @param {AuditsDeleteArgs} args - Arguments to delete one Audits.
     * @example
     * // Delete one Audits
     * const Audits = await prisma.audits.delete({
     *   where: {
     *     // ... filter to delete one Audits
     *   }
     * })
     * 
    **/
    delete<T extends AuditsDeleteArgs>(
      args: SelectSubset<T, AuditsDeleteArgs>
    ): Prisma__AuditsClient<AuditsGetPayload<T>>

    /**
     * Update one Audits.
     * @param {AuditsUpdateArgs} args - Arguments to update one Audits.
     * @example
     * // Update one Audits
     * const audits = await prisma.audits.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuditsUpdateArgs>(
      args: SelectSubset<T, AuditsUpdateArgs>
    ): Prisma__AuditsClient<AuditsGetPayload<T>>

    /**
     * Delete zero or more Audits.
     * @param {AuditsDeleteManyArgs} args - Arguments to filter Audits to delete.
     * @example
     * // Delete a few Audits
     * const { count } = await prisma.audits.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuditsDeleteManyArgs>(
      args?: SelectSubset<T, AuditsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Audits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Audits
     * const audits = await prisma.audits.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuditsUpdateManyArgs>(
      args: SelectSubset<T, AuditsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Audits.
     * @param {AuditsUpsertArgs} args - Arguments to update or create a Audits.
     * @example
     * // Update or create a Audits
     * const audits = await prisma.audits.upsert({
     *   create: {
     *     // ... data to create a Audits
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Audits we want to update
     *   }
     * })
    **/
    upsert<T extends AuditsUpsertArgs>(
      args: SelectSubset<T, AuditsUpsertArgs>
    ): Prisma__AuditsClient<AuditsGetPayload<T>>

    /**
     * Count the number of Audits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsCountArgs} args - Arguments to filter Audits to count.
     * @example
     * // Count the number of Audits
     * const count = await prisma.audits.count({
     *   where: {
     *     // ... the filter for the Audits we want to count
     *   }
     * })
    **/
    count<T extends AuditsCountArgs>(
      args?: Subset<T, AuditsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Audits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditsAggregateArgs>(args: Subset<T, AuditsAggregateArgs>): Prisma.PrismaPromise<GetAuditsAggregateType<T>>

    /**
     * Group by Audits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditsGroupByArgs['orderBy'] }
        : { orderBy?: AuditsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Audits.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AuditsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Audits base type for findUnique actions
   */
  export type AuditsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect | null
    /**
     * Filter, which Audits to fetch.
     */
    where: AuditsWhereUniqueInput
  }

  /**
   * Audits findUnique
   */
  export interface AuditsFindUniqueArgs extends AuditsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Audits findUniqueOrThrow
   */
  export type AuditsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect | null
    /**
     * Filter, which Audits to fetch.
     */
    where: AuditsWhereUniqueInput
  }


  /**
   * Audits base type for findFirst actions
   */
  export type AuditsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect | null
    /**
     * Filter, which Audits to fetch.
     */
    where?: AuditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audits to fetch.
     */
    orderBy?: Enumerable<AuditsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Audits.
     */
    cursor?: AuditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Audits.
     */
    distinct?: Enumerable<AuditsScalarFieldEnum>
  }

  /**
   * Audits findFirst
   */
  export interface AuditsFindFirstArgs extends AuditsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Audits findFirstOrThrow
   */
  export type AuditsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect | null
    /**
     * Filter, which Audits to fetch.
     */
    where?: AuditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audits to fetch.
     */
    orderBy?: Enumerable<AuditsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Audits.
     */
    cursor?: AuditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Audits.
     */
    distinct?: Enumerable<AuditsScalarFieldEnum>
  }


  /**
   * Audits findMany
   */
  export type AuditsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect | null
    /**
     * Filter, which Audits to fetch.
     */
    where?: AuditsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audits to fetch.
     */
    orderBy?: Enumerable<AuditsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Audits.
     */
    cursor?: AuditsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audits.
     */
    skip?: number
    distinct?: Enumerable<AuditsScalarFieldEnum>
  }


  /**
   * Audits create
   */
  export type AuditsCreateArgs = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect | null
    /**
     * The data needed to create a Audits.
     */
    data: XOR<AuditsCreateInput, AuditsUncheckedCreateInput>
  }


  /**
   * Audits createMany
   */
  export type AuditsCreateManyArgs = {
    /**
     * The data used to create many Audits.
     */
    data: Enumerable<AuditsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Audits update
   */
  export type AuditsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect | null
    /**
     * The data needed to update a Audits.
     */
    data: XOR<AuditsUpdateInput, AuditsUncheckedUpdateInput>
    /**
     * Choose, which Audits to update.
     */
    where: AuditsWhereUniqueInput
  }


  /**
   * Audits updateMany
   */
  export type AuditsUpdateManyArgs = {
    /**
     * The data used to update Audits.
     */
    data: XOR<AuditsUpdateManyMutationInput, AuditsUncheckedUpdateManyInput>
    /**
     * Filter which Audits to update
     */
    where?: AuditsWhereInput
  }


  /**
   * Audits upsert
   */
  export type AuditsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect | null
    /**
     * The filter to search for the Audits to update in case it exists.
     */
    where: AuditsWhereUniqueInput
    /**
     * In case the Audits found by the `where` argument doesn't exist, create a new Audits with this data.
     */
    create: XOR<AuditsCreateInput, AuditsUncheckedCreateInput>
    /**
     * In case the Audits was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditsUpdateInput, AuditsUncheckedUpdateInput>
  }


  /**
   * Audits delete
   */
  export type AuditsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect | null
    /**
     * Filter which Audits to delete.
     */
    where: AuditsWhereUniqueInput
  }


  /**
   * Audits deleteMany
   */
  export type AuditsDeleteManyArgs = {
    /**
     * Filter which Audits to delete
     */
    where?: AuditsWhereInput
  }


  /**
   * Audits without action
   */
  export type AuditsArgs = {
    /**
     * Select specific fields to fetch from the Audits
     */
    select?: AuditsSelect | null
  }



  /**
   * Model SiteTemplate
   */


  export type AggregateSiteTemplate = {
    _count: SiteTemplateCountAggregateOutputType | null
    _avg: SiteTemplateAvgAggregateOutputType | null
    _sum: SiteTemplateSumAggregateOutputType | null
    _min: SiteTemplateMinAggregateOutputType | null
    _max: SiteTemplateMaxAggregateOutputType | null
  }

  export type SiteTemplateAvgAggregateOutputType = {
    id: number | null
  }

  export type SiteTemplateSumAggregateOutputType = {
    id: number | null
  }

  export type SiteTemplateMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
    template: string | null
  }

  export type SiteTemplateMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
    template: string | null
  }

  export type SiteTemplateCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    name: number
    template: number
    _all: number
  }


  export type SiteTemplateAvgAggregateInputType = {
    id?: true
  }

  export type SiteTemplateSumAggregateInputType = {
    id?: true
  }

  export type SiteTemplateMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    template?: true
  }

  export type SiteTemplateMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    template?: true
  }

  export type SiteTemplateCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    template?: true
    _all?: true
  }

  export type SiteTemplateAggregateArgs = {
    /**
     * Filter which SiteTemplate to aggregate.
     */
    where?: SiteTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplates to fetch.
     */
    orderBy?: Enumerable<SiteTemplateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SiteTemplates
    **/
    _count?: true | SiteTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteTemplateMaxAggregateInputType
  }

  export type GetSiteTemplateAggregateType<T extends SiteTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateSiteTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSiteTemplate[P]>
      : GetScalarType<T[P], AggregateSiteTemplate[P]>
  }




  export type SiteTemplateGroupByArgs = {
    where?: SiteTemplateWhereInput
    orderBy?: Enumerable<SiteTemplateOrderByWithAggregationInput>
    by: SiteTemplateScalarFieldEnum[]
    having?: SiteTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteTemplateCountAggregateInputType | true
    _avg?: SiteTemplateAvgAggregateInputType
    _sum?: SiteTemplateSumAggregateInputType
    _min?: SiteTemplateMinAggregateInputType
    _max?: SiteTemplateMaxAggregateInputType
  }


  export type SiteTemplateGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    name: string
    template: string
    _count: SiteTemplateCountAggregateOutputType | null
    _avg: SiteTemplateAvgAggregateOutputType | null
    _sum: SiteTemplateSumAggregateOutputType | null
    _min: SiteTemplateMinAggregateOutputType | null
    _max: SiteTemplateMaxAggregateOutputType | null
  }

  type GetSiteTemplateGroupByPayload<T extends SiteTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SiteTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], SiteTemplateGroupByOutputType[P]>
        }
      >
    >


  export type SiteTemplateSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    name?: boolean
    template?: boolean
    site?: boolean | SiteTemplate$siteArgs
    siteTemplateDataDef?: boolean | SiteTemplateDataDefArgs
    _count?: boolean | SiteTemplateCountOutputTypeArgs
  }


  export type SiteTemplateInclude = {
    site?: boolean | SiteTemplate$siteArgs
    siteTemplateDataDef?: boolean | SiteTemplateDataDefArgs
    _count?: boolean | SiteTemplateCountOutputTypeArgs
  }

  export type SiteTemplateGetPayload<S extends boolean | null | undefined | SiteTemplateArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SiteTemplate :
    S extends undefined ? never :
    S extends { include: any } & (SiteTemplateArgs | SiteTemplateFindManyArgs)
    ? SiteTemplate  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'site' ? Array < SiteGetPayload<S['include'][P]>>  :
        P extends 'siteTemplateDataDef' ? SiteTemplateDataDefGetPayload<S['include'][P]> | null :
        P extends '_count' ? SiteTemplateCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SiteTemplateArgs | SiteTemplateFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'site' ? Array < SiteGetPayload<S['select'][P]>>  :
        P extends 'siteTemplateDataDef' ? SiteTemplateDataDefGetPayload<S['select'][P]> | null :
        P extends '_count' ? SiteTemplateCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof SiteTemplate ? SiteTemplate[P] : never
  } 
      : SiteTemplate


  type SiteTemplateCountArgs = 
    Omit<SiteTemplateFindManyArgs, 'select' | 'include'> & {
      select?: SiteTemplateCountAggregateInputType | true
    }

  export interface SiteTemplateDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one SiteTemplate that matches the filter.
     * @param {SiteTemplateFindUniqueArgs} args - Arguments to find a SiteTemplate
     * @example
     * // Get one SiteTemplate
     * const siteTemplate = await prisma.siteTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SiteTemplateFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SiteTemplateFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SiteTemplate'> extends True ? Prisma__SiteTemplateClient<SiteTemplateGetPayload<T>> : Prisma__SiteTemplateClient<SiteTemplateGetPayload<T> | null, null>

    /**
     * Find one SiteTemplate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SiteTemplateFindUniqueOrThrowArgs} args - Arguments to find a SiteTemplate
     * @example
     * // Get one SiteTemplate
     * const siteTemplate = await prisma.siteTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SiteTemplateFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SiteTemplateFindUniqueOrThrowArgs>
    ): Prisma__SiteTemplateClient<SiteTemplateGetPayload<T>>

    /**
     * Find the first SiteTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateFindFirstArgs} args - Arguments to find a SiteTemplate
     * @example
     * // Get one SiteTemplate
     * const siteTemplate = await prisma.siteTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SiteTemplateFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SiteTemplateFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SiteTemplate'> extends True ? Prisma__SiteTemplateClient<SiteTemplateGetPayload<T>> : Prisma__SiteTemplateClient<SiteTemplateGetPayload<T> | null, null>

    /**
     * Find the first SiteTemplate that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateFindFirstOrThrowArgs} args - Arguments to find a SiteTemplate
     * @example
     * // Get one SiteTemplate
     * const siteTemplate = await prisma.siteTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SiteTemplateFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SiteTemplateFindFirstOrThrowArgs>
    ): Prisma__SiteTemplateClient<SiteTemplateGetPayload<T>>

    /**
     * Find zero or more SiteTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SiteTemplates
     * const siteTemplates = await prisma.siteTemplate.findMany()
     * 
     * // Get first 10 SiteTemplates
     * const siteTemplates = await prisma.siteTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteTemplateWithIdOnly = await prisma.siteTemplate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SiteTemplateFindManyArgs>(
      args?: SelectSubset<T, SiteTemplateFindManyArgs>
    ): Prisma.PrismaPromise<Array<SiteTemplateGetPayload<T>>>

    /**
     * Create a SiteTemplate.
     * @param {SiteTemplateCreateArgs} args - Arguments to create a SiteTemplate.
     * @example
     * // Create one SiteTemplate
     * const SiteTemplate = await prisma.siteTemplate.create({
     *   data: {
     *     // ... data to create a SiteTemplate
     *   }
     * })
     * 
    **/
    create<T extends SiteTemplateCreateArgs>(
      args: SelectSubset<T, SiteTemplateCreateArgs>
    ): Prisma__SiteTemplateClient<SiteTemplateGetPayload<T>>

    /**
     * Create many SiteTemplates.
     *     @param {SiteTemplateCreateManyArgs} args - Arguments to create many SiteTemplates.
     *     @example
     *     // Create many SiteTemplates
     *     const siteTemplate = await prisma.siteTemplate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SiteTemplateCreateManyArgs>(
      args?: SelectSubset<T, SiteTemplateCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SiteTemplate.
     * @param {SiteTemplateDeleteArgs} args - Arguments to delete one SiteTemplate.
     * @example
     * // Delete one SiteTemplate
     * const SiteTemplate = await prisma.siteTemplate.delete({
     *   where: {
     *     // ... filter to delete one SiteTemplate
     *   }
     * })
     * 
    **/
    delete<T extends SiteTemplateDeleteArgs>(
      args: SelectSubset<T, SiteTemplateDeleteArgs>
    ): Prisma__SiteTemplateClient<SiteTemplateGetPayload<T>>

    /**
     * Update one SiteTemplate.
     * @param {SiteTemplateUpdateArgs} args - Arguments to update one SiteTemplate.
     * @example
     * // Update one SiteTemplate
     * const siteTemplate = await prisma.siteTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SiteTemplateUpdateArgs>(
      args: SelectSubset<T, SiteTemplateUpdateArgs>
    ): Prisma__SiteTemplateClient<SiteTemplateGetPayload<T>>

    /**
     * Delete zero or more SiteTemplates.
     * @param {SiteTemplateDeleteManyArgs} args - Arguments to filter SiteTemplates to delete.
     * @example
     * // Delete a few SiteTemplates
     * const { count } = await prisma.siteTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SiteTemplateDeleteManyArgs>(
      args?: SelectSubset<T, SiteTemplateDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SiteTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SiteTemplates
     * const siteTemplate = await prisma.siteTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SiteTemplateUpdateManyArgs>(
      args: SelectSubset<T, SiteTemplateUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SiteTemplate.
     * @param {SiteTemplateUpsertArgs} args - Arguments to update or create a SiteTemplate.
     * @example
     * // Update or create a SiteTemplate
     * const siteTemplate = await prisma.siteTemplate.upsert({
     *   create: {
     *     // ... data to create a SiteTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SiteTemplate we want to update
     *   }
     * })
    **/
    upsert<T extends SiteTemplateUpsertArgs>(
      args: SelectSubset<T, SiteTemplateUpsertArgs>
    ): Prisma__SiteTemplateClient<SiteTemplateGetPayload<T>>

    /**
     * Count the number of SiteTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateCountArgs} args - Arguments to filter SiteTemplates to count.
     * @example
     * // Count the number of SiteTemplates
     * const count = await prisma.siteTemplate.count({
     *   where: {
     *     // ... the filter for the SiteTemplates we want to count
     *   }
     * })
    **/
    count<T extends SiteTemplateCountArgs>(
      args?: Subset<T, SiteTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SiteTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteTemplateAggregateArgs>(args: Subset<T, SiteTemplateAggregateArgs>): Prisma.PrismaPromise<GetSiteTemplateAggregateType<T>>

    /**
     * Group by SiteTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteTemplateGroupByArgs['orderBy'] }
        : { orderBy?: SiteTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SiteTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SiteTemplateClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    site<T extends SiteTemplate$siteArgs= {}>(args?: Subset<T, SiteTemplate$siteArgs>): Prisma.PrismaPromise<Array<SiteGetPayload<T>>| Null>;

    siteTemplateDataDef<T extends SiteTemplateDataDefArgs= {}>(args?: Subset<T, SiteTemplateDataDefArgs>): Prisma__SiteTemplateDataDefClient<SiteTemplateDataDefGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SiteTemplate base type for findUnique actions
   */
  export type SiteTemplateFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude | null
    /**
     * Filter, which SiteTemplate to fetch.
     */
    where: SiteTemplateWhereUniqueInput
  }

  /**
   * SiteTemplate findUnique
   */
  export interface SiteTemplateFindUniqueArgs extends SiteTemplateFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SiteTemplate findUniqueOrThrow
   */
  export type SiteTemplateFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude | null
    /**
     * Filter, which SiteTemplate to fetch.
     */
    where: SiteTemplateWhereUniqueInput
  }


  /**
   * SiteTemplate base type for findFirst actions
   */
  export type SiteTemplateFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude | null
    /**
     * Filter, which SiteTemplate to fetch.
     */
    where?: SiteTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplates to fetch.
     */
    orderBy?: Enumerable<SiteTemplateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteTemplates.
     */
    cursor?: SiteTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteTemplates.
     */
    distinct?: Enumerable<SiteTemplateScalarFieldEnum>
  }

  /**
   * SiteTemplate findFirst
   */
  export interface SiteTemplateFindFirstArgs extends SiteTemplateFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SiteTemplate findFirstOrThrow
   */
  export type SiteTemplateFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude | null
    /**
     * Filter, which SiteTemplate to fetch.
     */
    where?: SiteTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplates to fetch.
     */
    orderBy?: Enumerable<SiteTemplateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteTemplates.
     */
    cursor?: SiteTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteTemplates.
     */
    distinct?: Enumerable<SiteTemplateScalarFieldEnum>
  }


  /**
   * SiteTemplate findMany
   */
  export type SiteTemplateFindManyArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude | null
    /**
     * Filter, which SiteTemplates to fetch.
     */
    where?: SiteTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplates to fetch.
     */
    orderBy?: Enumerable<SiteTemplateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SiteTemplates.
     */
    cursor?: SiteTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplates.
     */
    skip?: number
    distinct?: Enumerable<SiteTemplateScalarFieldEnum>
  }


  /**
   * SiteTemplate create
   */
  export type SiteTemplateCreateArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude | null
    /**
     * The data needed to create a SiteTemplate.
     */
    data: XOR<SiteTemplateCreateInput, SiteTemplateUncheckedCreateInput>
  }


  /**
   * SiteTemplate createMany
   */
  export type SiteTemplateCreateManyArgs = {
    /**
     * The data used to create many SiteTemplates.
     */
    data: Enumerable<SiteTemplateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SiteTemplate update
   */
  export type SiteTemplateUpdateArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude | null
    /**
     * The data needed to update a SiteTemplate.
     */
    data: XOR<SiteTemplateUpdateInput, SiteTemplateUncheckedUpdateInput>
    /**
     * Choose, which SiteTemplate to update.
     */
    where: SiteTemplateWhereUniqueInput
  }


  /**
   * SiteTemplate updateMany
   */
  export type SiteTemplateUpdateManyArgs = {
    /**
     * The data used to update SiteTemplates.
     */
    data: XOR<SiteTemplateUpdateManyMutationInput, SiteTemplateUncheckedUpdateManyInput>
    /**
     * Filter which SiteTemplates to update
     */
    where?: SiteTemplateWhereInput
  }


  /**
   * SiteTemplate upsert
   */
  export type SiteTemplateUpsertArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude | null
    /**
     * The filter to search for the SiteTemplate to update in case it exists.
     */
    where: SiteTemplateWhereUniqueInput
    /**
     * In case the SiteTemplate found by the `where` argument doesn't exist, create a new SiteTemplate with this data.
     */
    create: XOR<SiteTemplateCreateInput, SiteTemplateUncheckedCreateInput>
    /**
     * In case the SiteTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteTemplateUpdateInput, SiteTemplateUncheckedUpdateInput>
  }


  /**
   * SiteTemplate delete
   */
  export type SiteTemplateDeleteArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude | null
    /**
     * Filter which SiteTemplate to delete.
     */
    where: SiteTemplateWhereUniqueInput
  }


  /**
   * SiteTemplate deleteMany
   */
  export type SiteTemplateDeleteManyArgs = {
    /**
     * Filter which SiteTemplates to delete
     */
    where?: SiteTemplateWhereInput
  }


  /**
   * SiteTemplate.site
   */
  export type SiteTemplate$siteArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    where?: SiteWhereInput
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    cursor?: SiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SiteScalarFieldEnum>
  }


  /**
   * SiteTemplate without action
   */
  export type SiteTemplateArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplate
     */
    select?: SiteTemplateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateInclude | null
  }



  /**
   * Model SiteTemplateDataDef
   */


  export type AggregateSiteTemplateDataDef = {
    _count: SiteTemplateDataDefCountAggregateOutputType | null
    _avg: SiteTemplateDataDefAvgAggregateOutputType | null
    _sum: SiteTemplateDataDefSumAggregateOutputType | null
    _min: SiteTemplateDataDefMinAggregateOutputType | null
    _max: SiteTemplateDataDefMaxAggregateOutputType | null
  }

  export type SiteTemplateDataDefAvgAggregateOutputType = {
    id: number | null
    siteTemplateId: number | null
  }

  export type SiteTemplateDataDefSumAggregateOutputType = {
    id: number | null
    siteTemplateId: number | null
  }

  export type SiteTemplateDataDefMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
    siteTemplateId: number | null
  }

  export type SiteTemplateDataDefMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
    siteTemplateId: number | null
  }

  export type SiteTemplateDataDefCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    name: number
    defData: number
    siteTemplateId: number
    _all: number
  }


  export type SiteTemplateDataDefAvgAggregateInputType = {
    id?: true
    siteTemplateId?: true
  }

  export type SiteTemplateDataDefSumAggregateInputType = {
    id?: true
    siteTemplateId?: true
  }

  export type SiteTemplateDataDefMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    siteTemplateId?: true
  }

  export type SiteTemplateDataDefMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    siteTemplateId?: true
  }

  export type SiteTemplateDataDefCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    defData?: true
    siteTemplateId?: true
    _all?: true
  }

  export type SiteTemplateDataDefAggregateArgs = {
    /**
     * Filter which SiteTemplateDataDef to aggregate.
     */
    where?: SiteTemplateDataDefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplateDataDefs to fetch.
     */
    orderBy?: Enumerable<SiteTemplateDataDefOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteTemplateDataDefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplateDataDefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplateDataDefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SiteTemplateDataDefs
    **/
    _count?: true | SiteTemplateDataDefCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteTemplateDataDefAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteTemplateDataDefSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteTemplateDataDefMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteTemplateDataDefMaxAggregateInputType
  }

  export type GetSiteTemplateDataDefAggregateType<T extends SiteTemplateDataDefAggregateArgs> = {
        [P in keyof T & keyof AggregateSiteTemplateDataDef]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSiteTemplateDataDef[P]>
      : GetScalarType<T[P], AggregateSiteTemplateDataDef[P]>
  }




  export type SiteTemplateDataDefGroupByArgs = {
    where?: SiteTemplateDataDefWhereInput
    orderBy?: Enumerable<SiteTemplateDataDefOrderByWithAggregationInput>
    by: SiteTemplateDataDefScalarFieldEnum[]
    having?: SiteTemplateDataDefScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteTemplateDataDefCountAggregateInputType | true
    _avg?: SiteTemplateDataDefAvgAggregateInputType
    _sum?: SiteTemplateDataDefSumAggregateInputType
    _min?: SiteTemplateDataDefMinAggregateInputType
    _max?: SiteTemplateDataDefMaxAggregateInputType
  }


  export type SiteTemplateDataDefGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    name: string
    defData: JsonValue
    siteTemplateId: number
    _count: SiteTemplateDataDefCountAggregateOutputType | null
    _avg: SiteTemplateDataDefAvgAggregateOutputType | null
    _sum: SiteTemplateDataDefSumAggregateOutputType | null
    _min: SiteTemplateDataDefMinAggregateOutputType | null
    _max: SiteTemplateDataDefMaxAggregateOutputType | null
  }

  type GetSiteTemplateDataDefGroupByPayload<T extends SiteTemplateDataDefGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SiteTemplateDataDefGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteTemplateDataDefGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteTemplateDataDefGroupByOutputType[P]>
            : GetScalarType<T[P], SiteTemplateDataDefGroupByOutputType[P]>
        }
      >
    >


  export type SiteTemplateDataDefSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    name?: boolean
    defData?: boolean
    siteTemplateId?: boolean
    siteTemplate?: boolean | SiteTemplateArgs
  }


  export type SiteTemplateDataDefInclude = {
    siteTemplate?: boolean | SiteTemplateArgs
  }

  export type SiteTemplateDataDefGetPayload<S extends boolean | null | undefined | SiteTemplateDataDefArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SiteTemplateDataDef :
    S extends undefined ? never :
    S extends { include: any } & (SiteTemplateDataDefArgs | SiteTemplateDataDefFindManyArgs)
    ? SiteTemplateDataDef  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'siteTemplate' ? SiteTemplateGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SiteTemplateDataDefArgs | SiteTemplateDataDefFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'siteTemplate' ? SiteTemplateGetPayload<S['select'][P]> :  P extends keyof SiteTemplateDataDef ? SiteTemplateDataDef[P] : never
  } 
      : SiteTemplateDataDef


  type SiteTemplateDataDefCountArgs = 
    Omit<SiteTemplateDataDefFindManyArgs, 'select' | 'include'> & {
      select?: SiteTemplateDataDefCountAggregateInputType | true
    }

  export interface SiteTemplateDataDefDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one SiteTemplateDataDef that matches the filter.
     * @param {SiteTemplateDataDefFindUniqueArgs} args - Arguments to find a SiteTemplateDataDef
     * @example
     * // Get one SiteTemplateDataDef
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SiteTemplateDataDefFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SiteTemplateDataDefFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SiteTemplateDataDef'> extends True ? Prisma__SiteTemplateDataDefClient<SiteTemplateDataDefGetPayload<T>> : Prisma__SiteTemplateDataDefClient<SiteTemplateDataDefGetPayload<T> | null, null>

    /**
     * Find one SiteTemplateDataDef that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SiteTemplateDataDefFindUniqueOrThrowArgs} args - Arguments to find a SiteTemplateDataDef
     * @example
     * // Get one SiteTemplateDataDef
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SiteTemplateDataDefFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SiteTemplateDataDefFindUniqueOrThrowArgs>
    ): Prisma__SiteTemplateDataDefClient<SiteTemplateDataDefGetPayload<T>>

    /**
     * Find the first SiteTemplateDataDef that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefFindFirstArgs} args - Arguments to find a SiteTemplateDataDef
     * @example
     * // Get one SiteTemplateDataDef
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SiteTemplateDataDefFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SiteTemplateDataDefFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SiteTemplateDataDef'> extends True ? Prisma__SiteTemplateDataDefClient<SiteTemplateDataDefGetPayload<T>> : Prisma__SiteTemplateDataDefClient<SiteTemplateDataDefGetPayload<T> | null, null>

    /**
     * Find the first SiteTemplateDataDef that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefFindFirstOrThrowArgs} args - Arguments to find a SiteTemplateDataDef
     * @example
     * // Get one SiteTemplateDataDef
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SiteTemplateDataDefFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SiteTemplateDataDefFindFirstOrThrowArgs>
    ): Prisma__SiteTemplateDataDefClient<SiteTemplateDataDefGetPayload<T>>

    /**
     * Find zero or more SiteTemplateDataDefs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SiteTemplateDataDefs
     * const siteTemplateDataDefs = await prisma.siteTemplateDataDef.findMany()
     * 
     * // Get first 10 SiteTemplateDataDefs
     * const siteTemplateDataDefs = await prisma.siteTemplateDataDef.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteTemplateDataDefWithIdOnly = await prisma.siteTemplateDataDef.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SiteTemplateDataDefFindManyArgs>(
      args?: SelectSubset<T, SiteTemplateDataDefFindManyArgs>
    ): Prisma.PrismaPromise<Array<SiteTemplateDataDefGetPayload<T>>>

    /**
     * Create a SiteTemplateDataDef.
     * @param {SiteTemplateDataDefCreateArgs} args - Arguments to create a SiteTemplateDataDef.
     * @example
     * // Create one SiteTemplateDataDef
     * const SiteTemplateDataDef = await prisma.siteTemplateDataDef.create({
     *   data: {
     *     // ... data to create a SiteTemplateDataDef
     *   }
     * })
     * 
    **/
    create<T extends SiteTemplateDataDefCreateArgs>(
      args: SelectSubset<T, SiteTemplateDataDefCreateArgs>
    ): Prisma__SiteTemplateDataDefClient<SiteTemplateDataDefGetPayload<T>>

    /**
     * Create many SiteTemplateDataDefs.
     *     @param {SiteTemplateDataDefCreateManyArgs} args - Arguments to create many SiteTemplateDataDefs.
     *     @example
     *     // Create many SiteTemplateDataDefs
     *     const siteTemplateDataDef = await prisma.siteTemplateDataDef.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SiteTemplateDataDefCreateManyArgs>(
      args?: SelectSubset<T, SiteTemplateDataDefCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SiteTemplateDataDef.
     * @param {SiteTemplateDataDefDeleteArgs} args - Arguments to delete one SiteTemplateDataDef.
     * @example
     * // Delete one SiteTemplateDataDef
     * const SiteTemplateDataDef = await prisma.siteTemplateDataDef.delete({
     *   where: {
     *     // ... filter to delete one SiteTemplateDataDef
     *   }
     * })
     * 
    **/
    delete<T extends SiteTemplateDataDefDeleteArgs>(
      args: SelectSubset<T, SiteTemplateDataDefDeleteArgs>
    ): Prisma__SiteTemplateDataDefClient<SiteTemplateDataDefGetPayload<T>>

    /**
     * Update one SiteTemplateDataDef.
     * @param {SiteTemplateDataDefUpdateArgs} args - Arguments to update one SiteTemplateDataDef.
     * @example
     * // Update one SiteTemplateDataDef
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SiteTemplateDataDefUpdateArgs>(
      args: SelectSubset<T, SiteTemplateDataDefUpdateArgs>
    ): Prisma__SiteTemplateDataDefClient<SiteTemplateDataDefGetPayload<T>>

    /**
     * Delete zero or more SiteTemplateDataDefs.
     * @param {SiteTemplateDataDefDeleteManyArgs} args - Arguments to filter SiteTemplateDataDefs to delete.
     * @example
     * // Delete a few SiteTemplateDataDefs
     * const { count } = await prisma.siteTemplateDataDef.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SiteTemplateDataDefDeleteManyArgs>(
      args?: SelectSubset<T, SiteTemplateDataDefDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SiteTemplateDataDefs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SiteTemplateDataDefs
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SiteTemplateDataDefUpdateManyArgs>(
      args: SelectSubset<T, SiteTemplateDataDefUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SiteTemplateDataDef.
     * @param {SiteTemplateDataDefUpsertArgs} args - Arguments to update or create a SiteTemplateDataDef.
     * @example
     * // Update or create a SiteTemplateDataDef
     * const siteTemplateDataDef = await prisma.siteTemplateDataDef.upsert({
     *   create: {
     *     // ... data to create a SiteTemplateDataDef
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SiteTemplateDataDef we want to update
     *   }
     * })
    **/
    upsert<T extends SiteTemplateDataDefUpsertArgs>(
      args: SelectSubset<T, SiteTemplateDataDefUpsertArgs>
    ): Prisma__SiteTemplateDataDefClient<SiteTemplateDataDefGetPayload<T>>

    /**
     * Count the number of SiteTemplateDataDefs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefCountArgs} args - Arguments to filter SiteTemplateDataDefs to count.
     * @example
     * // Count the number of SiteTemplateDataDefs
     * const count = await prisma.siteTemplateDataDef.count({
     *   where: {
     *     // ... the filter for the SiteTemplateDataDefs we want to count
     *   }
     * })
    **/
    count<T extends SiteTemplateDataDefCountArgs>(
      args?: Subset<T, SiteTemplateDataDefCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteTemplateDataDefCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SiteTemplateDataDef.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteTemplateDataDefAggregateArgs>(args: Subset<T, SiteTemplateDataDefAggregateArgs>): Prisma.PrismaPromise<GetSiteTemplateDataDefAggregateType<T>>

    /**
     * Group by SiteTemplateDataDef.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteTemplateDataDefGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteTemplateDataDefGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteTemplateDataDefGroupByArgs['orderBy'] }
        : { orderBy?: SiteTemplateDataDefGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteTemplateDataDefGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteTemplateDataDefGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SiteTemplateDataDef.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SiteTemplateDataDefClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    siteTemplate<T extends SiteTemplateArgs= {}>(args?: Subset<T, SiteTemplateArgs>): Prisma__SiteTemplateClient<SiteTemplateGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SiteTemplateDataDef base type for findUnique actions
   */
  export type SiteTemplateDataDefFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude | null
    /**
     * Filter, which SiteTemplateDataDef to fetch.
     */
    where: SiteTemplateDataDefWhereUniqueInput
  }

  /**
   * SiteTemplateDataDef findUnique
   */
  export interface SiteTemplateDataDefFindUniqueArgs extends SiteTemplateDataDefFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SiteTemplateDataDef findUniqueOrThrow
   */
  export type SiteTemplateDataDefFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude | null
    /**
     * Filter, which SiteTemplateDataDef to fetch.
     */
    where: SiteTemplateDataDefWhereUniqueInput
  }


  /**
   * SiteTemplateDataDef base type for findFirst actions
   */
  export type SiteTemplateDataDefFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude | null
    /**
     * Filter, which SiteTemplateDataDef to fetch.
     */
    where?: SiteTemplateDataDefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplateDataDefs to fetch.
     */
    orderBy?: Enumerable<SiteTemplateDataDefOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteTemplateDataDefs.
     */
    cursor?: SiteTemplateDataDefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplateDataDefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplateDataDefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteTemplateDataDefs.
     */
    distinct?: Enumerable<SiteTemplateDataDefScalarFieldEnum>
  }

  /**
   * SiteTemplateDataDef findFirst
   */
  export interface SiteTemplateDataDefFindFirstArgs extends SiteTemplateDataDefFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SiteTemplateDataDef findFirstOrThrow
   */
  export type SiteTemplateDataDefFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude | null
    /**
     * Filter, which SiteTemplateDataDef to fetch.
     */
    where?: SiteTemplateDataDefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplateDataDefs to fetch.
     */
    orderBy?: Enumerable<SiteTemplateDataDefOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SiteTemplateDataDefs.
     */
    cursor?: SiteTemplateDataDefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplateDataDefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplateDataDefs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SiteTemplateDataDefs.
     */
    distinct?: Enumerable<SiteTemplateDataDefScalarFieldEnum>
  }


  /**
   * SiteTemplateDataDef findMany
   */
  export type SiteTemplateDataDefFindManyArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude | null
    /**
     * Filter, which SiteTemplateDataDefs to fetch.
     */
    where?: SiteTemplateDataDefWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SiteTemplateDataDefs to fetch.
     */
    orderBy?: Enumerable<SiteTemplateDataDefOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SiteTemplateDataDefs.
     */
    cursor?: SiteTemplateDataDefWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SiteTemplateDataDefs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SiteTemplateDataDefs.
     */
    skip?: number
    distinct?: Enumerable<SiteTemplateDataDefScalarFieldEnum>
  }


  /**
   * SiteTemplateDataDef create
   */
  export type SiteTemplateDataDefCreateArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude | null
    /**
     * The data needed to create a SiteTemplateDataDef.
     */
    data: XOR<SiteTemplateDataDefCreateInput, SiteTemplateDataDefUncheckedCreateInput>
  }


  /**
   * SiteTemplateDataDef createMany
   */
  export type SiteTemplateDataDefCreateManyArgs = {
    /**
     * The data used to create many SiteTemplateDataDefs.
     */
    data: Enumerable<SiteTemplateDataDefCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SiteTemplateDataDef update
   */
  export type SiteTemplateDataDefUpdateArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude | null
    /**
     * The data needed to update a SiteTemplateDataDef.
     */
    data: XOR<SiteTemplateDataDefUpdateInput, SiteTemplateDataDefUncheckedUpdateInput>
    /**
     * Choose, which SiteTemplateDataDef to update.
     */
    where: SiteTemplateDataDefWhereUniqueInput
  }


  /**
   * SiteTemplateDataDef updateMany
   */
  export type SiteTemplateDataDefUpdateManyArgs = {
    /**
     * The data used to update SiteTemplateDataDefs.
     */
    data: XOR<SiteTemplateDataDefUpdateManyMutationInput, SiteTemplateDataDefUncheckedUpdateManyInput>
    /**
     * Filter which SiteTemplateDataDefs to update
     */
    where?: SiteTemplateDataDefWhereInput
  }


  /**
   * SiteTemplateDataDef upsert
   */
  export type SiteTemplateDataDefUpsertArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude | null
    /**
     * The filter to search for the SiteTemplateDataDef to update in case it exists.
     */
    where: SiteTemplateDataDefWhereUniqueInput
    /**
     * In case the SiteTemplateDataDef found by the `where` argument doesn't exist, create a new SiteTemplateDataDef with this data.
     */
    create: XOR<SiteTemplateDataDefCreateInput, SiteTemplateDataDefUncheckedCreateInput>
    /**
     * In case the SiteTemplateDataDef was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteTemplateDataDefUpdateInput, SiteTemplateDataDefUncheckedUpdateInput>
  }


  /**
   * SiteTemplateDataDef delete
   */
  export type SiteTemplateDataDefDeleteArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude | null
    /**
     * Filter which SiteTemplateDataDef to delete.
     */
    where: SiteTemplateDataDefWhereUniqueInput
  }


  /**
   * SiteTemplateDataDef deleteMany
   */
  export type SiteTemplateDataDefDeleteManyArgs = {
    /**
     * Filter which SiteTemplateDataDefs to delete
     */
    where?: SiteTemplateDataDefWhereInput
  }


  /**
   * SiteTemplateDataDef without action
   */
  export type SiteTemplateDataDefArgs = {
    /**
     * Select specific fields to fetch from the SiteTemplateDataDef
     */
    select?: SiteTemplateDataDefSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteTemplateDataDefInclude | null
  }



  /**
   * Model Customer
   */


  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    name: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    _all?: true
  }

  export type CustomerAggregateArgs = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs = {
    where?: CustomerWhereInput
    orderBy?: Enumerable<CustomerOrderByWithAggregationInput>
    by: CustomerScalarFieldEnum[]
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }


  export type CustomerGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    name: string
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    name?: boolean
    site?: boolean | Customer$siteArgs
    _count?: boolean | CustomerCountOutputTypeArgs
  }


  export type CustomerInclude = {
    site?: boolean | Customer$siteArgs
    _count?: boolean | CustomerCountOutputTypeArgs
  }

  export type CustomerGetPayload<S extends boolean | null | undefined | CustomerArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Customer :
    S extends undefined ? never :
    S extends { include: any } & (CustomerArgs | CustomerFindManyArgs)
    ? Customer  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'site' ? Array < SiteGetPayload<S['include'][P]>>  :
        P extends '_count' ? CustomerCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CustomerArgs | CustomerFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'site' ? Array < SiteGetPayload<S['select'][P]>>  :
        P extends '_count' ? CustomerCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Customer ? Customer[P] : never
  } 
      : Customer


  type CustomerCountArgs = 
    Omit<CustomerFindManyArgs, 'select' | 'include'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CustomerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CustomerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Customer'> extends True ? Prisma__CustomerClient<CustomerGetPayload<T>> : Prisma__CustomerClient<CustomerGetPayload<T> | null, null>

    /**
     * Find one Customer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CustomerFindUniqueOrThrowArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CustomerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CustomerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Customer'> extends True ? Prisma__CustomerClient<CustomerGetPayload<T>> : Prisma__CustomerClient<CustomerGetPayload<T> | null, null>

    /**
     * Find the first Customer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CustomerFindFirstOrThrowArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CustomerFindManyArgs>(
      args?: SelectSubset<T, CustomerFindManyArgs>
    ): Prisma.PrismaPromise<Array<CustomerGetPayload<T>>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
    **/
    create<T extends CustomerCreateArgs>(
      args: SelectSubset<T, CustomerCreateArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Create many Customers.
     *     @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     *     @example
     *     // Create many Customers
     *     const customer = await prisma.customer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CustomerCreateManyArgs>(
      args?: SelectSubset<T, CustomerCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
    **/
    delete<T extends CustomerDeleteArgs>(
      args: SelectSubset<T, CustomerDeleteArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CustomerUpdateArgs>(
      args: SelectSubset<T, CustomerUpdateArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CustomerDeleteManyArgs>(
      args?: SelectSubset<T, CustomerDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CustomerUpdateManyArgs>(
      args: SelectSubset<T, CustomerUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
    **/
    upsert<T extends CustomerUpsertArgs>(
      args: SelectSubset<T, CustomerUpsertArgs>
    ): Prisma__CustomerClient<CustomerGetPayload<T>>

    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CustomerClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    site<T extends Customer$siteArgs= {}>(args?: Subset<T, Customer$siteArgs>): Prisma.PrismaPromise<Array<SiteGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Customer base type for findUnique actions
   */
  export type CustomerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUnique
   */
  export interface CustomerFindUniqueArgs extends CustomerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer base type for findFirst actions
   */
  export type CustomerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }

  /**
   * Customer findFirst
   */
  export interface CustomerFindFirstArgs extends CustomerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * Customer create
   */
  export type CustomerCreateArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }


  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs = {
    /**
     * The data used to create many Customers.
     */
    data: Enumerable<CustomerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Customer update
   */
  export type CustomerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }


  /**
   * Customer delete
   */
  export type CustomerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer.site
   */
  export type Customer$siteArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    where?: SiteWhereInput
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    cursor?: SiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SiteScalarFieldEnum>
  }


  /**
   * Customer without action
   */
  export type CustomerArgs = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude | null
  }



  /**
   * Model Site
   */


  export type AggregateSite = {
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  export type SiteAvgAggregateOutputType = {
    id: number | null
    siteTemplateId: number | null
    customerId: number | null
  }

  export type SiteSumAggregateOutputType = {
    id: number | null
    siteTemplateId: number | null
    customerId: number | null
  }

  export type SiteMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
    siteTemplateId: number | null
    customerId: number | null
  }

  export type SiteMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    name: string | null
    siteTemplateId: number | null
    customerId: number | null
  }

  export type SiteCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    name: number
    siteTemplateId: number
    customerId: number
    _all: number
  }


  export type SiteAvgAggregateInputType = {
    id?: true
    siteTemplateId?: true
    customerId?: true
  }

  export type SiteSumAggregateInputType = {
    id?: true
    siteTemplateId?: true
    customerId?: true
  }

  export type SiteMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    siteTemplateId?: true
    customerId?: true
  }

  export type SiteMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    siteTemplateId?: true
    customerId?: true
  }

  export type SiteCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    name?: true
    siteTemplateId?: true
    customerId?: true
    _all?: true
  }

  export type SiteAggregateArgs = {
    /**
     * Filter which Site to aggregate.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sites
    **/
    _count?: true | SiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteMaxAggregateInputType
  }

  export type GetSiteAggregateType<T extends SiteAggregateArgs> = {
        [P in keyof T & keyof AggregateSite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSite[P]>
      : GetScalarType<T[P], AggregateSite[P]>
  }




  export type SiteGroupByArgs = {
    where?: SiteWhereInput
    orderBy?: Enumerable<SiteOrderByWithAggregationInput>
    by: SiteScalarFieldEnum[]
    having?: SiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteCountAggregateInputType | true
    _avg?: SiteAvgAggregateInputType
    _sum?: SiteSumAggregateInputType
    _min?: SiteMinAggregateInputType
    _max?: SiteMaxAggregateInputType
  }


  export type SiteGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    name: string
    siteTemplateId: number
    customerId: number
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  type GetSiteGroupByPayload<T extends SiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteGroupByOutputType[P]>
            : GetScalarType<T[P], SiteGroupByOutputType[P]>
        }
      >
    >


  export type SiteSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    name?: boolean
    siteTemplateId?: boolean
    customerId?: boolean
    siteTemplate?: boolean | SiteTemplateArgs
    customer?: boolean | CustomerArgs
  }


  export type SiteInclude = {
    siteTemplate?: boolean | SiteTemplateArgs
    customer?: boolean | CustomerArgs
  }

  export type SiteGetPayload<S extends boolean | null | undefined | SiteArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Site :
    S extends undefined ? never :
    S extends { include: any } & (SiteArgs | SiteFindManyArgs)
    ? Site  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'siteTemplate' ? SiteTemplateGetPayload<S['include'][P]> :
        P extends 'customer' ? CustomerGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SiteArgs | SiteFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'siteTemplate' ? SiteTemplateGetPayload<S['select'][P]> :
        P extends 'customer' ? CustomerGetPayload<S['select'][P]> :  P extends keyof Site ? Site[P] : never
  } 
      : Site


  type SiteCountArgs = 
    Omit<SiteFindManyArgs, 'select' | 'include'> & {
      select?: SiteCountAggregateInputType | true
    }

  export interface SiteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Site that matches the filter.
     * @param {SiteFindUniqueArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SiteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SiteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Site'> extends True ? Prisma__SiteClient<SiteGetPayload<T>> : Prisma__SiteClient<SiteGetPayload<T> | null, null>

    /**
     * Find one Site that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SiteFindUniqueOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SiteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SiteFindUniqueOrThrowArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Find the first Site that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SiteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SiteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Site'> extends True ? Prisma__SiteClient<SiteGetPayload<T>> : Prisma__SiteClient<SiteGetPayload<T> | null, null>

    /**
     * Find the first Site that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SiteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SiteFindFirstOrThrowArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Find zero or more Sites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sites
     * const sites = await prisma.site.findMany()
     * 
     * // Get first 10 Sites
     * const sites = await prisma.site.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteWithIdOnly = await prisma.site.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SiteFindManyArgs>(
      args?: SelectSubset<T, SiteFindManyArgs>
    ): Prisma.PrismaPromise<Array<SiteGetPayload<T>>>

    /**
     * Create a Site.
     * @param {SiteCreateArgs} args - Arguments to create a Site.
     * @example
     * // Create one Site
     * const Site = await prisma.site.create({
     *   data: {
     *     // ... data to create a Site
     *   }
     * })
     * 
    **/
    create<T extends SiteCreateArgs>(
      args: SelectSubset<T, SiteCreateArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Create many Sites.
     *     @param {SiteCreateManyArgs} args - Arguments to create many Sites.
     *     @example
     *     // Create many Sites
     *     const site = await prisma.site.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SiteCreateManyArgs>(
      args?: SelectSubset<T, SiteCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Site.
     * @param {SiteDeleteArgs} args - Arguments to delete one Site.
     * @example
     * // Delete one Site
     * const Site = await prisma.site.delete({
     *   where: {
     *     // ... filter to delete one Site
     *   }
     * })
     * 
    **/
    delete<T extends SiteDeleteArgs>(
      args: SelectSubset<T, SiteDeleteArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Update one Site.
     * @param {SiteUpdateArgs} args - Arguments to update one Site.
     * @example
     * // Update one Site
     * const site = await prisma.site.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SiteUpdateArgs>(
      args: SelectSubset<T, SiteUpdateArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Delete zero or more Sites.
     * @param {SiteDeleteManyArgs} args - Arguments to filter Sites to delete.
     * @example
     * // Delete a few Sites
     * const { count } = await prisma.site.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SiteDeleteManyArgs>(
      args?: SelectSubset<T, SiteDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sites
     * const site = await prisma.site.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SiteUpdateManyArgs>(
      args: SelectSubset<T, SiteUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Site.
     * @param {SiteUpsertArgs} args - Arguments to update or create a Site.
     * @example
     * // Update or create a Site
     * const site = await prisma.site.upsert({
     *   create: {
     *     // ... data to create a Site
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Site we want to update
     *   }
     * })
    **/
    upsert<T extends SiteUpsertArgs>(
      args: SelectSubset<T, SiteUpsertArgs>
    ): Prisma__SiteClient<SiteGetPayload<T>>

    /**
     * Count the number of Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCountArgs} args - Arguments to filter Sites to count.
     * @example
     * // Count the number of Sites
     * const count = await prisma.site.count({
     *   where: {
     *     // ... the filter for the Sites we want to count
     *   }
     * })
    **/
    count<T extends SiteCountArgs>(
      args?: Subset<T, SiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteAggregateArgs>(args: Subset<T, SiteAggregateArgs>): Prisma.PrismaPromise<GetSiteAggregateType<T>>

    /**
     * Group by Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteGroupByArgs['orderBy'] }
        : { orderBy?: SiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Site.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SiteClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    siteTemplate<T extends SiteTemplateArgs= {}>(args?: Subset<T, SiteTemplateArgs>): Prisma__SiteTemplateClient<SiteTemplateGetPayload<T> | Null>;

    customer<T extends CustomerArgs= {}>(args?: Subset<T, CustomerArgs>): Prisma__CustomerClient<CustomerGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Site base type for findUnique actions
   */
  export type SiteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site findUnique
   */
  export interface SiteFindUniqueArgs extends SiteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Site findUniqueOrThrow
   */
  export type SiteFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site base type for findFirst actions
   */
  export type SiteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: Enumerable<SiteScalarFieldEnum>
  }

  /**
   * Site findFirst
   */
  export interface SiteFindFirstArgs extends SiteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Site findFirstOrThrow
   */
  export type SiteFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: Enumerable<SiteScalarFieldEnum>
  }


  /**
   * Site findMany
   */
  export type SiteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * Filter, which Sites to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: Enumerable<SiteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    distinct?: Enumerable<SiteScalarFieldEnum>
  }


  /**
   * Site create
   */
  export type SiteCreateArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * The data needed to create a Site.
     */
    data: XOR<SiteCreateInput, SiteUncheckedCreateInput>
  }


  /**
   * Site createMany
   */
  export type SiteCreateManyArgs = {
    /**
     * The data used to create many Sites.
     */
    data: Enumerable<SiteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Site update
   */
  export type SiteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * The data needed to update a Site.
     */
    data: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
    /**
     * Choose, which Site to update.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site updateMany
   */
  export type SiteUpdateManyArgs = {
    /**
     * The data used to update Sites.
     */
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyInput>
    /**
     * Filter which Sites to update
     */
    where?: SiteWhereInput
  }


  /**
   * Site upsert
   */
  export type SiteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * The filter to search for the Site to update in case it exists.
     */
    where: SiteWhereUniqueInput
    /**
     * In case the Site found by the `where` argument doesn't exist, create a new Site with this data.
     */
    create: XOR<SiteCreateInput, SiteUncheckedCreateInput>
    /**
     * In case the Site was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
  }


  /**
   * Site delete
   */
  export type SiteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
    /**
     * Filter which Site to delete.
     */
    where: SiteWhereUniqueInput
  }


  /**
   * Site deleteMany
   */
  export type SiteDeleteManyArgs = {
    /**
     * Filter which Sites to delete
     */
    where?: SiteWhereInput
  }


  /**
   * Site without action
   */
  export type SiteArgs = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SiteInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AuditsScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    auditId: 'auditId',
    auditType: 'auditType',
    userId: 'userId',
    username: 'username',
    action: 'action',
    auditChanges: 'auditChanges',
    version: 'version'
  };

  export type AuditsScalarFieldEnum = (typeof AuditsScalarFieldEnum)[keyof typeof AuditsScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted',
    name: 'name'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const SiteScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted',
    name: 'name',
    siteTemplateId: 'siteTemplateId',
    customerId: 'customerId'
  };

  export type SiteScalarFieldEnum = (typeof SiteScalarFieldEnum)[keyof typeof SiteScalarFieldEnum]


  export const SiteTemplateDataDefScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted',
    name: 'name',
    defData: 'defData',
    siteTemplateId: 'siteTemplateId'
  };

  export type SiteTemplateDataDefScalarFieldEnum = (typeof SiteTemplateDataDefScalarFieldEnum)[keyof typeof SiteTemplateDataDefScalarFieldEnum]


  export const SiteTemplateScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted',
    name: 'name',
    template: 'template'
  };

  export type SiteTemplateScalarFieldEnum = (typeof SiteTemplateScalarFieldEnum)[keyof typeof SiteTemplateScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type AuditsWhereInput = {
    AND?: Enumerable<AuditsWhereInput>
    OR?: Enumerable<AuditsWhereInput>
    NOT?: Enumerable<AuditsWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    auditId?: IntFilter | number
    auditType?: StringFilter | string
    userId?: StringFilter | string
    username?: StringNullableFilter | string | null
    action?: StringFilter | string
    auditChanges?: StringFilter | string
    version?: IntFilter | number
  }

  export type AuditsOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    auditId?: SortOrder
    auditType?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    action?: SortOrder
    auditChanges?: SortOrder
    version?: SortOrder
  }

  export type AuditsWhereUniqueInput = {
    id?: number
  }

  export type AuditsOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    auditId?: SortOrder
    auditType?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    action?: SortOrder
    auditChanges?: SortOrder
    version?: SortOrder
    _count?: AuditsCountOrderByAggregateInput
    _avg?: AuditsAvgOrderByAggregateInput
    _max?: AuditsMaxOrderByAggregateInput
    _min?: AuditsMinOrderByAggregateInput
    _sum?: AuditsSumOrderByAggregateInput
  }

  export type AuditsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AuditsScalarWhereWithAggregatesInput>
    OR?: Enumerable<AuditsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AuditsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    auditId?: IntWithAggregatesFilter | number
    auditType?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    username?: StringNullableWithAggregatesFilter | string | null
    action?: StringWithAggregatesFilter | string
    auditChanges?: StringWithAggregatesFilter | string
    version?: IntWithAggregatesFilter | number
  }

  export type SiteTemplateWhereInput = {
    AND?: Enumerable<SiteTemplateWhereInput>
    OR?: Enumerable<SiteTemplateWhereInput>
    NOT?: Enumerable<SiteTemplateWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    name?: StringFilter | string
    template?: StringFilter | string
    site?: SiteListRelationFilter
    siteTemplateDataDef?: XOR<SiteTemplateDataDefRelationFilter, SiteTemplateDataDefWhereInput> | null
  }

  export type SiteTemplateOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    template?: SortOrder
    site?: SiteOrderByRelationAggregateInput
    siteTemplateDataDef?: SiteTemplateDataDefOrderByWithRelationInput
  }

  export type SiteTemplateWhereUniqueInput = {
    id?: number
  }

  export type SiteTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    template?: SortOrder
    _count?: SiteTemplateCountOrderByAggregateInput
    _avg?: SiteTemplateAvgOrderByAggregateInput
    _max?: SiteTemplateMaxOrderByAggregateInput
    _min?: SiteTemplateMinOrderByAggregateInput
    _sum?: SiteTemplateSumOrderByAggregateInput
  }

  export type SiteTemplateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SiteTemplateScalarWhereWithAggregatesInput>
    OR?: Enumerable<SiteTemplateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SiteTemplateScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isDeleted?: BoolWithAggregatesFilter | boolean
    name?: StringWithAggregatesFilter | string
    template?: StringWithAggregatesFilter | string
  }

  export type SiteTemplateDataDefWhereInput = {
    AND?: Enumerable<SiteTemplateDataDefWhereInput>
    OR?: Enumerable<SiteTemplateDataDefWhereInput>
    NOT?: Enumerable<SiteTemplateDataDefWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    name?: StringFilter | string
    defData?: JsonFilter
    siteTemplateId?: IntFilter | number
    siteTemplate?: XOR<SiteTemplateRelationFilter, SiteTemplateWhereInput>
  }

  export type SiteTemplateDataDefOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    defData?: SortOrder
    siteTemplateId?: SortOrder
    siteTemplate?: SiteTemplateOrderByWithRelationInput
  }

  export type SiteTemplateDataDefWhereUniqueInput = {
    id?: number
    siteTemplateId?: number
  }

  export type SiteTemplateDataDefOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    defData?: SortOrder
    siteTemplateId?: SortOrder
    _count?: SiteTemplateDataDefCountOrderByAggregateInput
    _avg?: SiteTemplateDataDefAvgOrderByAggregateInput
    _max?: SiteTemplateDataDefMaxOrderByAggregateInput
    _min?: SiteTemplateDataDefMinOrderByAggregateInput
    _sum?: SiteTemplateDataDefSumOrderByAggregateInput
  }

  export type SiteTemplateDataDefScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SiteTemplateDataDefScalarWhereWithAggregatesInput>
    OR?: Enumerable<SiteTemplateDataDefScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SiteTemplateDataDefScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isDeleted?: BoolWithAggregatesFilter | boolean
    name?: StringWithAggregatesFilter | string
    defData?: JsonWithAggregatesFilter
    siteTemplateId?: IntWithAggregatesFilter | number
  }

  export type CustomerWhereInput = {
    AND?: Enumerable<CustomerWhereInput>
    OR?: Enumerable<CustomerWhereInput>
    NOT?: Enumerable<CustomerWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    name?: StringFilter | string
    site?: SiteListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    site?: SiteOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = {
    id?: number
  }

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    OR?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isDeleted?: BoolWithAggregatesFilter | boolean
    name?: StringWithAggregatesFilter | string
  }

  export type SiteWhereInput = {
    AND?: Enumerable<SiteWhereInput>
    OR?: Enumerable<SiteWhereInput>
    NOT?: Enumerable<SiteWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    name?: StringFilter | string
    siteTemplateId?: IntFilter | number
    customerId?: IntFilter | number
    siteTemplate?: XOR<SiteTemplateRelationFilter, SiteTemplateWhereInput>
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
  }

  export type SiteOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
    siteTemplate?: SiteTemplateOrderByWithRelationInput
    customer?: CustomerOrderByWithRelationInput
  }

  export type SiteWhereUniqueInput = {
    id?: number
  }

  export type SiteOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
    _count?: SiteCountOrderByAggregateInput
    _avg?: SiteAvgOrderByAggregateInput
    _max?: SiteMaxOrderByAggregateInput
    _min?: SiteMinOrderByAggregateInput
    _sum?: SiteSumOrderByAggregateInput
  }

  export type SiteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SiteScalarWhereWithAggregatesInput>
    OR?: Enumerable<SiteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SiteScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isDeleted?: BoolWithAggregatesFilter | boolean
    name?: StringWithAggregatesFilter | string
    siteTemplateId?: IntWithAggregatesFilter | number
    customerId?: IntWithAggregatesFilter | number
  }

  export type AuditsCreateInput = {
    createdAt?: Date | string
    auditId: number
    auditType: string
    userId: string
    username?: string | null
    action: string
    auditChanges: string
    version: number
  }

  export type AuditsUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    auditId: number
    auditType: string
    userId: string
    username?: string | null
    action: string
    auditChanges: string
    version: number
  }

  export type AuditsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditId?: IntFieldUpdateOperationsInput | number
    auditType?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    auditChanges?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
  }

  export type AuditsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditId?: IntFieldUpdateOperationsInput | number
    auditType?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    auditChanges?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
  }

  export type AuditsCreateManyInput = {
    id?: number
    createdAt?: Date | string
    auditId: number
    auditType: string
    userId: string
    username?: string | null
    action: string
    auditChanges: string
    version: number
  }

  export type AuditsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditId?: IntFieldUpdateOperationsInput | number
    auditType?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    auditChanges?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
  }

  export type AuditsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditId?: IntFieldUpdateOperationsInput | number
    auditType?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    auditChanges?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
  }

  export type SiteTemplateCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
    site?: SiteCreateNestedManyWithoutSiteTemplateInput
    siteTemplateDataDef?: SiteTemplateDataDefCreateNestedOneWithoutSiteTemplateInput
  }

  export type SiteTemplateUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
    site?: SiteUncheckedCreateNestedManyWithoutSiteTemplateInput
    siteTemplateDataDef?: SiteTemplateDataDefUncheckedCreateNestedOneWithoutSiteTemplateInput
  }

  export type SiteTemplateUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    site?: SiteUpdateManyWithoutSiteTemplateNestedInput
    siteTemplateDataDef?: SiteTemplateDataDefUpdateOneWithoutSiteTemplateNestedInput
  }

  export type SiteTemplateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    site?: SiteUncheckedUpdateManyWithoutSiteTemplateNestedInput
    siteTemplateDataDef?: SiteTemplateDataDefUncheckedUpdateOneWithoutSiteTemplateNestedInput
  }

  export type SiteTemplateCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
  }

  export type SiteTemplateUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
  }

  export type SiteTemplateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
  }

  export type SiteTemplateDataDefCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    defData: JsonNullValueInput | InputJsonValue
    siteTemplate: SiteTemplateCreateNestedOneWithoutSiteTemplateDataDefInput
  }

  export type SiteTemplateDataDefUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    defData: JsonNullValueInput | InputJsonValue
    siteTemplateId: number
  }

  export type SiteTemplateDataDefUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    defData?: JsonNullValueInput | InputJsonValue
    siteTemplate?: SiteTemplateUpdateOneRequiredWithoutSiteTemplateDataDefNestedInput
  }

  export type SiteTemplateDataDefUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    defData?: JsonNullValueInput | InputJsonValue
    siteTemplateId?: IntFieldUpdateOperationsInput | number
  }

  export type SiteTemplateDataDefCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    defData: JsonNullValueInput | InputJsonValue
    siteTemplateId: number
  }

  export type SiteTemplateDataDefUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    defData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteTemplateDataDefUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    defData?: JsonNullValueInput | InputJsonValue
    siteTemplateId?: IntFieldUpdateOperationsInput | number
  }

  export type CustomerCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    site?: SiteCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    site?: SiteUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    site?: SiteUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    site?: SiteUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
  }

  export type CustomerUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SiteCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    siteTemplate: SiteTemplateCreateNestedOneWithoutSiteInput
    customer: CustomerCreateNestedOneWithoutSiteInput
  }

  export type SiteUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    siteTemplateId: number
    customerId: number
  }

  export type SiteUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    siteTemplate?: SiteTemplateUpdateOneRequiredWithoutSiteNestedInput
    customer?: CustomerUpdateOneRequiredWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    siteTemplateId?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
  }

  export type SiteCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    siteTemplateId: number
    customerId: number
  }

  export type SiteUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SiteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    siteTemplateId?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type AuditsCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    auditId?: SortOrder
    auditType?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    action?: SortOrder
    auditChanges?: SortOrder
    version?: SortOrder
  }

  export type AuditsAvgOrderByAggregateInput = {
    id?: SortOrder
    auditId?: SortOrder
    version?: SortOrder
  }

  export type AuditsMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    auditId?: SortOrder
    auditType?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    action?: SortOrder
    auditChanges?: SortOrder
    version?: SortOrder
  }

  export type AuditsMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    auditId?: SortOrder
    auditType?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    action?: SortOrder
    auditChanges?: SortOrder
    version?: SortOrder
  }

  export type AuditsSumOrderByAggregateInput = {
    id?: SortOrder
    auditId?: SortOrder
    version?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type SiteListRelationFilter = {
    every?: SiteWhereInput
    some?: SiteWhereInput
    none?: SiteWhereInput
  }

  export type SiteTemplateDataDefRelationFilter = {
    is?: SiteTemplateDataDefWhereInput | null
    isNot?: SiteTemplateDataDefWhereInput | null
  }

  export type SiteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SiteTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    template?: SortOrder
  }

  export type SiteTemplateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SiteTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    template?: SortOrder
  }

  export type SiteTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    template?: SortOrder
  }

  export type SiteTemplateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type SiteTemplateRelationFilter = {
    is?: SiteTemplateWhereInput
    isNot?: SiteTemplateWhereInput
  }

  export type SiteTemplateDataDefCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    defData?: SortOrder
    siteTemplateId?: SortOrder
  }

  export type SiteTemplateDataDefAvgOrderByAggregateInput = {
    id?: SortOrder
    siteTemplateId?: SortOrder
  }

  export type SiteTemplateDataDefMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    siteTemplateId?: SortOrder
  }

  export type SiteTemplateDataDefMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    siteTemplateId?: SortOrder
  }

  export type SiteTemplateDataDefSumOrderByAggregateInput = {
    id?: SortOrder
    siteTemplateId?: SortOrder
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type SiteCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
  }

  export type SiteAvgOrderByAggregateInput = {
    id?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
  }

  export type SiteMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
  }

  export type SiteMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    name?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
  }

  export type SiteSumOrderByAggregateInput = {
    id?: SortOrder
    siteTemplateId?: SortOrder
    customerId?: SortOrder
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SiteCreateNestedManyWithoutSiteTemplateInput = {
    create?: XOR<Enumerable<SiteCreateWithoutSiteTemplateInput>, Enumerable<SiteUncheckedCreateWithoutSiteTemplateInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutSiteTemplateInput>
    createMany?: SiteCreateManySiteTemplateInputEnvelope
    connect?: Enumerable<SiteWhereUniqueInput>
  }

  export type SiteTemplateDataDefCreateNestedOneWithoutSiteTemplateInput = {
    create?: XOR<SiteTemplateDataDefCreateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput>
    connectOrCreate?: SiteTemplateDataDefCreateOrConnectWithoutSiteTemplateInput
    connect?: SiteTemplateDataDefWhereUniqueInput
  }

  export type SiteUncheckedCreateNestedManyWithoutSiteTemplateInput = {
    create?: XOR<Enumerable<SiteCreateWithoutSiteTemplateInput>, Enumerable<SiteUncheckedCreateWithoutSiteTemplateInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutSiteTemplateInput>
    createMany?: SiteCreateManySiteTemplateInputEnvelope
    connect?: Enumerable<SiteWhereUniqueInput>
  }

  export type SiteTemplateDataDefUncheckedCreateNestedOneWithoutSiteTemplateInput = {
    create?: XOR<SiteTemplateDataDefCreateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput>
    connectOrCreate?: SiteTemplateDataDefCreateOrConnectWithoutSiteTemplateInput
    connect?: SiteTemplateDataDefWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type SiteUpdateManyWithoutSiteTemplateNestedInput = {
    create?: XOR<Enumerable<SiteCreateWithoutSiteTemplateInput>, Enumerable<SiteUncheckedCreateWithoutSiteTemplateInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutSiteTemplateInput>
    upsert?: Enumerable<SiteUpsertWithWhereUniqueWithoutSiteTemplateInput>
    createMany?: SiteCreateManySiteTemplateInputEnvelope
    set?: Enumerable<SiteWhereUniqueInput>
    disconnect?: Enumerable<SiteWhereUniqueInput>
    delete?: Enumerable<SiteWhereUniqueInput>
    connect?: Enumerable<SiteWhereUniqueInput>
    update?: Enumerable<SiteUpdateWithWhereUniqueWithoutSiteTemplateInput>
    updateMany?: Enumerable<SiteUpdateManyWithWhereWithoutSiteTemplateInput>
    deleteMany?: Enumerable<SiteScalarWhereInput>
  }

  export type SiteTemplateDataDefUpdateOneWithoutSiteTemplateNestedInput = {
    create?: XOR<SiteTemplateDataDefCreateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput>
    connectOrCreate?: SiteTemplateDataDefCreateOrConnectWithoutSiteTemplateInput
    upsert?: SiteTemplateDataDefUpsertWithoutSiteTemplateInput
    disconnect?: boolean
    delete?: boolean
    connect?: SiteTemplateDataDefWhereUniqueInput
    update?: XOR<SiteTemplateDataDefUpdateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedUpdateWithoutSiteTemplateInput>
  }

  export type SiteUncheckedUpdateManyWithoutSiteTemplateNestedInput = {
    create?: XOR<Enumerable<SiteCreateWithoutSiteTemplateInput>, Enumerable<SiteUncheckedCreateWithoutSiteTemplateInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutSiteTemplateInput>
    upsert?: Enumerable<SiteUpsertWithWhereUniqueWithoutSiteTemplateInput>
    createMany?: SiteCreateManySiteTemplateInputEnvelope
    set?: Enumerable<SiteWhereUniqueInput>
    disconnect?: Enumerable<SiteWhereUniqueInput>
    delete?: Enumerable<SiteWhereUniqueInput>
    connect?: Enumerable<SiteWhereUniqueInput>
    update?: Enumerable<SiteUpdateWithWhereUniqueWithoutSiteTemplateInput>
    updateMany?: Enumerable<SiteUpdateManyWithWhereWithoutSiteTemplateInput>
    deleteMany?: Enumerable<SiteScalarWhereInput>
  }

  export type SiteTemplateDataDefUncheckedUpdateOneWithoutSiteTemplateNestedInput = {
    create?: XOR<SiteTemplateDataDefCreateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput>
    connectOrCreate?: SiteTemplateDataDefCreateOrConnectWithoutSiteTemplateInput
    upsert?: SiteTemplateDataDefUpsertWithoutSiteTemplateInput
    disconnect?: boolean
    delete?: boolean
    connect?: SiteTemplateDataDefWhereUniqueInput
    update?: XOR<SiteTemplateDataDefUpdateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedUpdateWithoutSiteTemplateInput>
  }

  export type SiteTemplateCreateNestedOneWithoutSiteTemplateDataDefInput = {
    create?: XOR<SiteTemplateCreateWithoutSiteTemplateDataDefInput, SiteTemplateUncheckedCreateWithoutSiteTemplateDataDefInput>
    connectOrCreate?: SiteTemplateCreateOrConnectWithoutSiteTemplateDataDefInput
    connect?: SiteTemplateWhereUniqueInput
  }

  export type SiteTemplateUpdateOneRequiredWithoutSiteTemplateDataDefNestedInput = {
    create?: XOR<SiteTemplateCreateWithoutSiteTemplateDataDefInput, SiteTemplateUncheckedCreateWithoutSiteTemplateDataDefInput>
    connectOrCreate?: SiteTemplateCreateOrConnectWithoutSiteTemplateDataDefInput
    upsert?: SiteTemplateUpsertWithoutSiteTemplateDataDefInput
    connect?: SiteTemplateWhereUniqueInput
    update?: XOR<SiteTemplateUpdateWithoutSiteTemplateDataDefInput, SiteTemplateUncheckedUpdateWithoutSiteTemplateDataDefInput>
  }

  export type SiteCreateNestedManyWithoutCustomerInput = {
    create?: XOR<Enumerable<SiteCreateWithoutCustomerInput>, Enumerable<SiteUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutCustomerInput>
    createMany?: SiteCreateManyCustomerInputEnvelope
    connect?: Enumerable<SiteWhereUniqueInput>
  }

  export type SiteUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<Enumerable<SiteCreateWithoutCustomerInput>, Enumerable<SiteUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutCustomerInput>
    createMany?: SiteCreateManyCustomerInputEnvelope
    connect?: Enumerable<SiteWhereUniqueInput>
  }

  export type SiteUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<Enumerable<SiteCreateWithoutCustomerInput>, Enumerable<SiteUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutCustomerInput>
    upsert?: Enumerable<SiteUpsertWithWhereUniqueWithoutCustomerInput>
    createMany?: SiteCreateManyCustomerInputEnvelope
    set?: Enumerable<SiteWhereUniqueInput>
    disconnect?: Enumerable<SiteWhereUniqueInput>
    delete?: Enumerable<SiteWhereUniqueInput>
    connect?: Enumerable<SiteWhereUniqueInput>
    update?: Enumerable<SiteUpdateWithWhereUniqueWithoutCustomerInput>
    updateMany?: Enumerable<SiteUpdateManyWithWhereWithoutCustomerInput>
    deleteMany?: Enumerable<SiteScalarWhereInput>
  }

  export type SiteUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<Enumerable<SiteCreateWithoutCustomerInput>, Enumerable<SiteUncheckedCreateWithoutCustomerInput>>
    connectOrCreate?: Enumerable<SiteCreateOrConnectWithoutCustomerInput>
    upsert?: Enumerable<SiteUpsertWithWhereUniqueWithoutCustomerInput>
    createMany?: SiteCreateManyCustomerInputEnvelope
    set?: Enumerable<SiteWhereUniqueInput>
    disconnect?: Enumerable<SiteWhereUniqueInput>
    delete?: Enumerable<SiteWhereUniqueInput>
    connect?: Enumerable<SiteWhereUniqueInput>
    update?: Enumerable<SiteUpdateWithWhereUniqueWithoutCustomerInput>
    updateMany?: Enumerable<SiteUpdateManyWithWhereWithoutCustomerInput>
    deleteMany?: Enumerable<SiteScalarWhereInput>
  }

  export type SiteTemplateCreateNestedOneWithoutSiteInput = {
    create?: XOR<SiteTemplateCreateWithoutSiteInput, SiteTemplateUncheckedCreateWithoutSiteInput>
    connectOrCreate?: SiteTemplateCreateOrConnectWithoutSiteInput
    connect?: SiteTemplateWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutSiteInput = {
    create?: XOR<CustomerCreateWithoutSiteInput, CustomerUncheckedCreateWithoutSiteInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSiteInput
    connect?: CustomerWhereUniqueInput
  }

  export type SiteTemplateUpdateOneRequiredWithoutSiteNestedInput = {
    create?: XOR<SiteTemplateCreateWithoutSiteInput, SiteTemplateUncheckedCreateWithoutSiteInput>
    connectOrCreate?: SiteTemplateCreateOrConnectWithoutSiteInput
    upsert?: SiteTemplateUpsertWithoutSiteInput
    connect?: SiteTemplateWhereUniqueInput
    update?: XOR<SiteTemplateUpdateWithoutSiteInput, SiteTemplateUncheckedUpdateWithoutSiteInput>
  }

  export type CustomerUpdateOneRequiredWithoutSiteNestedInput = {
    create?: XOR<CustomerCreateWithoutSiteInput, CustomerUncheckedCreateWithoutSiteInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSiteInput
    upsert?: CustomerUpsertWithoutSiteInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<CustomerUpdateWithoutSiteInput, CustomerUncheckedUpdateWithoutSiteInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type SiteCreateWithoutSiteTemplateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    customer: CustomerCreateNestedOneWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutSiteTemplateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    customerId: number
  }

  export type SiteCreateOrConnectWithoutSiteTemplateInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutSiteTemplateInput, SiteUncheckedCreateWithoutSiteTemplateInput>
  }

  export type SiteCreateManySiteTemplateInputEnvelope = {
    data: Enumerable<SiteCreateManySiteTemplateInput>
    skipDuplicates?: boolean
  }

  export type SiteTemplateDataDefCreateWithoutSiteTemplateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    defData: JsonNullValueInput | InputJsonValue
  }

  export type SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    defData: JsonNullValueInput | InputJsonValue
  }

  export type SiteTemplateDataDefCreateOrConnectWithoutSiteTemplateInput = {
    where: SiteTemplateDataDefWhereUniqueInput
    create: XOR<SiteTemplateDataDefCreateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput>
  }

  export type SiteUpsertWithWhereUniqueWithoutSiteTemplateInput = {
    where: SiteWhereUniqueInput
    update: XOR<SiteUpdateWithoutSiteTemplateInput, SiteUncheckedUpdateWithoutSiteTemplateInput>
    create: XOR<SiteCreateWithoutSiteTemplateInput, SiteUncheckedCreateWithoutSiteTemplateInput>
  }

  export type SiteUpdateWithWhereUniqueWithoutSiteTemplateInput = {
    where: SiteWhereUniqueInput
    data: XOR<SiteUpdateWithoutSiteTemplateInput, SiteUncheckedUpdateWithoutSiteTemplateInput>
  }

  export type SiteUpdateManyWithWhereWithoutSiteTemplateInput = {
    where: SiteScalarWhereInput
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyWithoutSiteInput>
  }

  export type SiteScalarWhereInput = {
    AND?: Enumerable<SiteScalarWhereInput>
    OR?: Enumerable<SiteScalarWhereInput>
    NOT?: Enumerable<SiteScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isDeleted?: BoolFilter | boolean
    name?: StringFilter | string
    siteTemplateId?: IntFilter | number
    customerId?: IntFilter | number
  }

  export type SiteTemplateDataDefUpsertWithoutSiteTemplateInput = {
    update: XOR<SiteTemplateDataDefUpdateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedUpdateWithoutSiteTemplateInput>
    create: XOR<SiteTemplateDataDefCreateWithoutSiteTemplateInput, SiteTemplateDataDefUncheckedCreateWithoutSiteTemplateInput>
  }

  export type SiteTemplateDataDefUpdateWithoutSiteTemplateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    defData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteTemplateDataDefUncheckedUpdateWithoutSiteTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    defData?: JsonNullValueInput | InputJsonValue
  }

  export type SiteTemplateCreateWithoutSiteTemplateDataDefInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
    site?: SiteCreateNestedManyWithoutSiteTemplateInput
  }

  export type SiteTemplateUncheckedCreateWithoutSiteTemplateDataDefInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
    site?: SiteUncheckedCreateNestedManyWithoutSiteTemplateInput
  }

  export type SiteTemplateCreateOrConnectWithoutSiteTemplateDataDefInput = {
    where: SiteTemplateWhereUniqueInput
    create: XOR<SiteTemplateCreateWithoutSiteTemplateDataDefInput, SiteTemplateUncheckedCreateWithoutSiteTemplateDataDefInput>
  }

  export type SiteTemplateUpsertWithoutSiteTemplateDataDefInput = {
    update: XOR<SiteTemplateUpdateWithoutSiteTemplateDataDefInput, SiteTemplateUncheckedUpdateWithoutSiteTemplateDataDefInput>
    create: XOR<SiteTemplateCreateWithoutSiteTemplateDataDefInput, SiteTemplateUncheckedCreateWithoutSiteTemplateDataDefInput>
  }

  export type SiteTemplateUpdateWithoutSiteTemplateDataDefInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    site?: SiteUpdateManyWithoutSiteTemplateNestedInput
  }

  export type SiteTemplateUncheckedUpdateWithoutSiteTemplateDataDefInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    site?: SiteUncheckedUpdateManyWithoutSiteTemplateNestedInput
  }

  export type SiteCreateWithoutCustomerInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    siteTemplate: SiteTemplateCreateNestedOneWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutCustomerInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    siteTemplateId: number
  }

  export type SiteCreateOrConnectWithoutCustomerInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutCustomerInput, SiteUncheckedCreateWithoutCustomerInput>
  }

  export type SiteCreateManyCustomerInputEnvelope = {
    data: Enumerable<SiteCreateManyCustomerInput>
    skipDuplicates?: boolean
  }

  export type SiteUpsertWithWhereUniqueWithoutCustomerInput = {
    where: SiteWhereUniqueInput
    update: XOR<SiteUpdateWithoutCustomerInput, SiteUncheckedUpdateWithoutCustomerInput>
    create: XOR<SiteCreateWithoutCustomerInput, SiteUncheckedCreateWithoutCustomerInput>
  }

  export type SiteUpdateWithWhereUniqueWithoutCustomerInput = {
    where: SiteWhereUniqueInput
    data: XOR<SiteUpdateWithoutCustomerInput, SiteUncheckedUpdateWithoutCustomerInput>
  }

  export type SiteUpdateManyWithWhereWithoutCustomerInput = {
    where: SiteScalarWhereInput
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyWithoutSiteInput>
  }

  export type SiteTemplateCreateWithoutSiteInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
    siteTemplateDataDef?: SiteTemplateDataDefCreateNestedOneWithoutSiteTemplateInput
  }

  export type SiteTemplateUncheckedCreateWithoutSiteInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    template: string
    siteTemplateDataDef?: SiteTemplateDataDefUncheckedCreateNestedOneWithoutSiteTemplateInput
  }

  export type SiteTemplateCreateOrConnectWithoutSiteInput = {
    where: SiteTemplateWhereUniqueInput
    create: XOR<SiteTemplateCreateWithoutSiteInput, SiteTemplateUncheckedCreateWithoutSiteInput>
  }

  export type CustomerCreateWithoutSiteInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
  }

  export type CustomerUncheckedCreateWithoutSiteInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
  }

  export type CustomerCreateOrConnectWithoutSiteInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutSiteInput, CustomerUncheckedCreateWithoutSiteInput>
  }

  export type SiteTemplateUpsertWithoutSiteInput = {
    update: XOR<SiteTemplateUpdateWithoutSiteInput, SiteTemplateUncheckedUpdateWithoutSiteInput>
    create: XOR<SiteTemplateCreateWithoutSiteInput, SiteTemplateUncheckedCreateWithoutSiteInput>
  }

  export type SiteTemplateUpdateWithoutSiteInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    siteTemplateDataDef?: SiteTemplateDataDefUpdateOneWithoutSiteTemplateNestedInput
  }

  export type SiteTemplateUncheckedUpdateWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    template?: StringFieldUpdateOperationsInput | string
    siteTemplateDataDef?: SiteTemplateDataDefUncheckedUpdateOneWithoutSiteTemplateNestedInput
  }

  export type CustomerUpsertWithoutSiteInput = {
    update: XOR<CustomerUpdateWithoutSiteInput, CustomerUncheckedUpdateWithoutSiteInput>
    create: XOR<CustomerCreateWithoutSiteInput, CustomerUncheckedCreateWithoutSiteInput>
  }

  export type CustomerUpdateWithoutSiteInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUncheckedUpdateWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SiteCreateManySiteTemplateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    customerId: number
  }

  export type SiteUpdateWithoutSiteTemplateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    customer?: CustomerUpdateOneRequiredWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutSiteTemplateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    customerId?: IntFieldUpdateOperationsInput | number
  }

  export type SiteUncheckedUpdateManyWithoutSiteInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    customerId?: IntFieldUpdateOperationsInput | number
  }

  export type SiteCreateManyCustomerInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    name: string
    siteTemplateId: number
  }

  export type SiteUpdateWithoutCustomerInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    siteTemplate?: SiteTemplateUpdateOneRequiredWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    siteTemplateId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}