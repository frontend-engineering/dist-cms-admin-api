// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // output          = "../../../node_modules/@prisma/client-cms_admin"
  output          = "../../../.yalc/@prisma/client-cms_admin"
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

// generator dbml {
//   provider = "npx prisma-dbml-generator"
// }

generator zod {
  provider                  = "node ../../node_modules/zod-prisma-types/dist/bin.js" // npx zod-prisma-types 如果无法生成可以改成 node ../../node_modules/zod-prisma-types/dist/bin.js 会有错误堆栈
  createModelTypes          = true
  createInputTypes          = false
  addInputTypeValidation    = false
  addIncludeType            = false
  addSelectType             = false
  coerceDate                = false
  createRelationValuesTypes = true
  output                    = "../../../libs/prisma-cms_admin/src/zod"
  prismaClientPath          = "@prisma/client-cms_admin"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // 用的不是很熟
  // relationMode = "prisma"
}

/// @schema.display_name 审计日志
model Audits {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  /// @schema.title 关联 id
  auditId      Int
  /// @schema.title 审计类型(关联 schema)
  auditType    String
  /// @schema.title 用户 id
  userId       String
  /// @schema.title 用户名
  username     String?
  /// @schema.title 动作(e.g. update)
  action       String
  /// @schema.title 变化
  auditChanges String  @db.Text
  /// @schema.title 版本
  version      Int
}

/// @schema.display_name 网站模板
/// @schema.display_column name
model SiteTemplate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  /// @schema.title 模板名称
  name     String
  /// @schema.title 模板内容
  /// @schema.column_type textarea
  template String

  // 一个模板可以有多个网站
  /// @schema.model_name Site
  sites Site[]

  // 1..1
  /// @schema.model_name SiteTemplateDataDef
  siteTemplateDataDef SiteTemplateDataDef?
}

/// @schema.display_name 模板数据定义
/// @schema.display_column siteTemplateId
model SiteTemplateDataDef {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  // 1..1
  /// @schema.reference SiteTemplate
  /// @schema.x-unique true
  siteTemplateId Int          @unique
  siteTemplate   SiteTemplate @relation(fields: [siteTemplateId], references: [id])

  /// @schema.title 结构定义
  defData Json
}

/// @schema.primary_key id
/// @schema.display_name 客户信息
/// @schema.display_column name
/// @schema.display_primary_key false
/// @schema.searchable_columns name
model Customer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  /// @schema.title 客户名称
  name String

  /// @schema.title 最终客户扩展数据
  extendData Json?

  /// @schema.title 看准网原始数据
  kanzhunRaw Json?

  /// @schema.title 被看准网更新前的原始数据
  prevExtendData Json?

  // 一个客户可以创建多个网站
  /// @schema.model_name Site
  sites Site[]
}

model CustomerRaw {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  ref      String?
  target   String?
  name     String  @unique
  address  String?
  region   String?
  phone    String?
  email    String?
  websites Json?
  contact  String?
  mobile   String?
  qq       String?
  desc     String?
  scope    String?
  biz      String?
  logo     String?
}

/// @schema.primary_key id
/// @schema.display_name 网站
/// @schema.display_column name
/// @schema.searchable_columns name
model Site {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  /// @schema.title 网站名称
  name String

  /// @schema.title 状态
  status SiteStatus @default(generated)

  /// @schema.title COS 地址
  cosUrl String @default("") @db.VarChar(1000)

  /// @schema.reference SiteTemplate
  siteTemplateId Int
  siteTemplate   SiteTemplate @relation(fields: [siteTemplateId], references: [id])

  /// @schema.reference Customer
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])

  /// @schema.title Slot 数据
  slotData Json @default("{}")

  /// @schema.title 关联项目
  /// @schema.reference Project
  projectId String?  @unique
  project   Project? @relation(fields: [projectId], references: [id])

  /// @schema.model_name Contact
  contacts Contact[]
}

/// @schema.x-enumNames 已生成,审核通过,审核不通过
enum SiteStatus {
  generated
  passed
  failed
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  //  projects  ProjectUsers[]
  //  links     Link[]
  createdAt DateTime  @default(now())
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// @schema.display_column name
model Project {
  id       String  @id @default(cuid())
  name     String
  slug     String  @unique
  logo     String?
  password String? @default("")

  type String @default("Invio")

  /// @schema.model_name ProjectUsers
  users ProjectUsers[]

  /// @schema.model_name ProjectInvite
  invites           ProjectInvite[]
  usage             Int             @default(0)
  usageLimit        Int             @default(1000)
  plan              String          @default("free")
  stripeId          String?         @unique // Stripe subscription ID
  billingCycleStart Int? // day of the month when the billing cycle starts

  region   String? @default("us-east-1") // COS info
  endpoint String? @default("https://s3.us-east-1.amazonaws.com") // COS info
  bucket   String? @default("invio-public-store") // COS info
  useHost  String? @default("turbosite.cloud") // 默认的host域名

  /// @schema.model_name SentEmail
  sentEmails SentEmail[]
  /// @schema.model_name Domain
  domains    Domain[]
  /// @schema.model_name Link
  links      Link[]
  /// @schema.model_name Tag
  tags       Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDeleted Boolean @default(false)
  site      Site?
}

model ProjectInvite {
  email     String
  expires   DateTime
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())

  @@unique([email, projectId])
  @@index([projectId])
}

enum Role {
  owner
  member
}

model ProjectUsers {
  id        String   @id @default(cuid())
  role      Role     @default(member)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  /// @schema.reference Project
  projectId String

  isDeleted Boolean @default(false)

  @@unique([userId, projectId])
  @@index([projectId])
}

enum EmailType {
  firstDomainInvalidEmail
  secondDomainInvalidEmail
  firstUsageLimitEmail
  secondUsageLimitEmail
}

model SentEmail {
  id        String    @id @default(cuid())
  type      EmailType
  createdAt DateTime  @default(now())
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  @@index([projectId])
}

model Domain {
  id          String   @id @default(cuid())
  slug        String   @unique
  verified    Boolean  @default(false)
  target      String?
  type        String   @default("redirect")
  description String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String?
  primary     Boolean  @default(false)
  links       Link[]
  lastChecked DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index(projectId)
  @@index(lastChecked)
}

model Link {
  id        String    @id @default(cuid())
  domain    String // domain of the link (e.g. turbosite.cloud) – also stored on Redis
  key       String // key of the link (e.g. /github) – also stored on Redis
  url       String    @db.LongText // target url (e.g. https://github.com/walkthunder/dub) – also stored on Redis
  archived  Boolean   @default(false) // whether the link is archived or not
  expiresAt DateTime? // when the link expires – stored on Redis via ttl
  password  String? // password to access the link – also stored on Redis

  proxy       Boolean @default(false) // Proxy to use custom OG tags (stored on redis) – if false, will use OG tags from target url
  title       String? // OG title for the link (e.g. Turbosite - Open-Source Bitly Alternative)
  description String? @db.VarChar(280) // OG description for the link (e.g. An open-source link management tool for modern marketing teams to create, share, and track short links.)
  image       String? @db.LongText // OG image for the link (e.g. https://turbosite.cloud/og-image.png)

  // UTM parameters
  utm_source   String? // UTM source for the link (e.g. youtube.com)
  utm_medium   String? // UTM medium for the link (e.g. social)
  utm_campaign String? // UTM campaign for the link (e.g. summer-sale)
  utm_term     String? // UTM term for the link (e.g. dub)
  utm_content  String? // UTM content for the link (e.g. description)

  // Link cloaking/masking via rewrite
  rewrite Boolean @default(false) // whether to rewrite the link or not

  // Custom device targeting
  ios     String? @db.LongText // custom link for iOS devices
  android String? @db.LongText // custom link for Android devices

  // User who created the link
  //  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // Project that the link belongs to
  project       Project? @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  /// @schema.reference Project
  projectId     String?
  // Relational reference to the project domain
  projectDomain Domain?  @relation(fields: [domain], references: [slug], onUpdate: Cascade, onDelete: Cascade)

  // Link metadata
  clicks      Int      @default(0) // number of clicks
  publicStats Boolean  @default(false) // whether to show public stats or not
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Link tags
  tag   Tag?    @relation(fields: [tagId], references: [id])
  tagId String?

  isDeleted Boolean @default(false)
  // TODO: might wanna add indices for utm_source, utm_medium, utm_campaign

  @@unique([domain, key])
  @@index(projectId)
  @@index(domain)
  @@index(tagId)
  @@index(proxy)
  @@index(password)
  @@index(createdAt(sort: Desc))
  @@index(clicks(sort: Desc))
  @@index(userId)
  @@fulltext([key, url])
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("blue")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId String
  links     Link[]

  @@unique([name, projectId])
  @@index(projectId)
}

//
//model jackson_index {
//  id       Int    @id @default(autoincrement())
//  key      String @db.VarChar(250)
//  storeKey String @db.VarChar(250)
//
//  @@index([key], map: "_jackson_index_key")
//  @@index([key, storeKey], map: "_jackson_index_key_store")
//}
//
//model jackson_store {
//  key        String    @id @db.VarChar(250)
//  value      String    @db.Text
//  iv         String?   @db.VarChar(64)
//  tag        String?   @db.VarChar(64)
//  createdAt  DateTime  @default(now()) @db.Timestamp(0)
//  modifiedAt DateTime? @db.Timestamp(0)
//}
//
//model jackson_ttl {
//  key       String @id @db.VarChar(250)
//  expiresAt BigInt
//
//  @@index([expiresAt], map: "_jackson_ttl_expires_at")
//}

model ImageLibrary {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  unsplashId String
  tag        String
  urls       Json
  css        String @db.VarChar(2000)
}

/// @schema.primary_key id
/// @schema.display_name 产品咨询联系人
/// @schema.display_column contact
/// @schema.display_primary_key false
model Contact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isDeleted Boolean  @default(false)

  /// @schema.reference Site
  siteId Int
  site   Site @relation(fields: [siteId], references: [id])

  /// @schema.title Slot 联系方式
  contact String
}
